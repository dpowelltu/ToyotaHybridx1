
ToyotaHybridx1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001efc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002008  08002008  00012008  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002030  08002030  00012030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002034  08002034  00012034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000005c  20000000  08002038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e30  2000005c  08002094  0002005c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000e8c  08002094  00020e8c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011152  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000270f  00000000  00000000  000311d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000886d  00000000  00000000  000338e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bc0  00000000  00000000  0003c158  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001028  00000000  00000000  0003cd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005f8a  00000000  00000000  0003dd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000473b  00000000  00000000  00043cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00048405  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000023b8  00000000  00000000  00048484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ff0 	.word	0x08001ff0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08001ff0 	.word	0x08001ff0

0800014c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800014c:	4a07      	ldr	r2, [pc, #28]	; (800016c <HAL_Init+0x20>)
{
 800014e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000152:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	f043 0310 	orr.w	r3, r3, #16
 8000158:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015a:	f000 f8a9 	bl	80002b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800015e:	2000      	movs	r0, #0
 8000160:	f001 fe62 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000164:	f001 fcbc 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000168:	2000      	movs	r0, #0
 800016a:	bd08      	pop	{r3, pc}
 800016c:	40022000 	.word	0x40022000

08000170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000170:	4a03      	ldr	r2, [pc, #12]	; (8000180 <HAL_IncTick+0x10>)
 8000172:	4b04      	ldr	r3, [pc, #16]	; (8000184 <HAL_IncTick+0x14>)
 8000174:	6811      	ldr	r1, [r2, #0]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	440b      	add	r3, r1
 800017a:	6013      	str	r3, [r2, #0]
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	200000e0 	.word	0x200000e0
 8000184:	20000000 	.word	0x20000000

08000188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000188:	4b01      	ldr	r3, [pc, #4]	; (8000190 <HAL_GetTick+0x8>)
 800018a:	6818      	ldr	r0, [r3, #0]
}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	200000e0 	.word	0x200000e0

08000194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000194:	b538      	push	{r3, r4, r5, lr}
 8000196:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000198:	f7ff fff6 	bl	8000188 <HAL_GetTick>
 800019c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800019e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001a0:	bf1e      	ittt	ne
 80001a2:	4b04      	ldrne	r3, [pc, #16]	; (80001b4 <HAL_Delay+0x20>)
 80001a4:	781b      	ldrbne	r3, [r3, #0]
 80001a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001a8:	f7ff ffee 	bl	8000188 <HAL_GetTick>
 80001ac:	1b40      	subs	r0, r0, r5
 80001ae:	4284      	cmp	r4, r0
 80001b0:	d8fa      	bhi.n	80001a8 <HAL_Delay+0x14>
  {
  }
}
 80001b2:	bd38      	pop	{r3, r4, r5, pc}
 80001b4:	20000000 	.word	0x20000000

080001b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80001b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80001ba:	4604      	mov	r4, r0
 80001bc:	2800      	cmp	r0, #0
 80001be:	d06e      	beq.n	800029e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80001c0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80001c4:	b90b      	cbnz	r3, 80001ca <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80001c6:	f001 fcad 	bl	8001b24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80001ca:	6822      	ldr	r2, [r4, #0]
 80001cc:	6813      	ldr	r3, [r2, #0]
 80001ce:	f023 0302 	bic.w	r3, r3, #2
 80001d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80001d4:	f7ff ffd8 	bl	8000188 <HAL_GetTick>
 80001d8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80001da:	6823      	ldr	r3, [r4, #0]
 80001dc:	685a      	ldr	r2, [r3, #4]
 80001de:	0791      	lsls	r1, r2, #30
 80001e0:	d451      	bmi.n	8000286 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	f042 0201 	orr.w	r2, r2, #1
 80001e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80001ea:	f7ff ffcd 	bl	8000188 <HAL_GetTick>
 80001ee:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80001f0:	6823      	ldr	r3, [r4, #0]
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	07d2      	lsls	r2, r2, #31
 80001f6:	d554      	bpl.n	80002a2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80001f8:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80001fa:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80001fc:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	bf0c      	ite	eq
 8000202:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000206:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800020a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800020c:	7e62      	ldrb	r2, [r4, #25]
 800020e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	bf0c      	ite	eq
 8000214:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000218:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800021c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800021e:	7ea2      	ldrb	r2, [r4, #26]
 8000220:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	bf0c      	ite	eq
 8000226:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800022a:	f022 0220 	bicne.w	r2, r2, #32
 800022e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000230:	7ee2      	ldrb	r2, [r4, #27]
 8000232:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	bf0c      	ite	eq
 8000238:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800023c:	f042 0210 	orrne.w	r2, r2, #16
 8000240:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000242:	7f22      	ldrb	r2, [r4, #28]
 8000244:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	bf0c      	ite	eq
 800024a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800024e:	f022 0208 	bicne.w	r2, r2, #8
 8000252:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000254:	7f62      	ldrb	r2, [r4, #29]
 8000256:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	bf0c      	ite	eq
 800025c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000260:	f022 0204 	bicne.w	r2, r2, #4
 8000264:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000266:	68e1      	ldr	r1, [r4, #12]
 8000268:	68a2      	ldr	r2, [r4, #8]
 800026a:	430a      	orrs	r2, r1
 800026c:	6921      	ldr	r1, [r4, #16]
 800026e:	430a      	orrs	r2, r1
 8000270:	6961      	ldr	r1, [r4, #20]
 8000272:	430a      	orrs	r2, r1
 8000274:	6861      	ldr	r1, [r4, #4]
 8000276:	3901      	subs	r1, #1
 8000278:	430a      	orrs	r2, r1
 800027a:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800027c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800027e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000280:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000284:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000286:	f7ff ff7f 	bl	8000188 <HAL_GetTick>
 800028a:	1b40      	subs	r0, r0, r5
 800028c:	280a      	cmp	r0, #10
 800028e:	d9a4      	bls.n	80001da <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000298:	2305      	movs	r3, #5
 800029a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800029e:	2001      	movs	r0, #1
}
 80002a0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002a2:	f7ff ff71 	bl	8000188 <HAL_GetTick>
 80002a6:	1b40      	subs	r0, r0, r5
 80002a8:	280a      	cmp	r0, #10
 80002aa:	d9a1      	bls.n	80001f0 <HAL_CAN_Init+0x38>
 80002ac:	e7f0      	b.n	8000290 <HAL_CAN_Init+0xd8>
	...

080002b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b0:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002be:	041b      	lsls	r3, r3, #16
 80002c0:	0c1b      	lsrs	r3, r3, #16
 80002c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002cc:	60d3      	str	r3, [r2, #12]
 80002ce:	4770      	bx	lr
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002d6:	b530      	push	{r4, r5, lr}
 80002d8:	68dc      	ldr	r4, [r3, #12]
 80002da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e4:	2b04      	cmp	r3, #4
 80002e6:	bf28      	it	cs
 80002e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f0:	bf98      	it	ls
 80002f2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f4:	fa05 f303 	lsl.w	r3, r5, r3
 80002f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002fc:	bf88      	it	hi
 80002fe:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000300:	4019      	ands	r1, r3
 8000302:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000304:	fa05 f404 	lsl.w	r4, r5, r4
 8000308:	3c01      	subs	r4, #1
 800030a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800030c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800030e:	ea42 0201 	orr.w	r2, r2, r1
 8000312:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	bfa9      	itett	ge
 8000318:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	4b06      	ldrlt	r3, [pc, #24]	; (8000338 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	b2d2      	uxtbge	r2, r2
 8000320:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	bfbb      	ittet	lt
 8000326:	f000 000f 	andlt.w	r0, r0, #15
 800032a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000330:	541a      	strblt	r2, [r3, r0]
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000ed14 	.word	0xe000ed14

0800033c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800033c:	2800      	cmp	r0, #0
 800033e:	db08      	blt.n	8000352 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000340:	2301      	movs	r3, #1
 8000342:	0942      	lsrs	r2, r0, #5
 8000344:	f000 001f 	and.w	r0, r0, #31
 8000348:	fa03 f000 	lsl.w	r0, r3, r0
 800034c:	4b01      	ldr	r3, [pc, #4]	; (8000354 <HAL_NVIC_EnableIRQ+0x18>)
 800034e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000352:	4770      	bx	lr
 8000354:	e000e100 	.word	0xe000e100

08000358 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000358:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800035a:	b330      	cbz	r0, 80003aa <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800035c:	2214      	movs	r2, #20
 800035e:	6801      	ldr	r1, [r0, #0]
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000362:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000364:	440b      	add	r3, r1
 8000366:	fbb3 f3f2 	udiv	r3, r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000370:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000372:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000374:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000376:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800037a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800037c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800037e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000382:	4323      	orrs	r3, r4
 8000384:	6904      	ldr	r4, [r0, #16]
 8000386:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000388:	6944      	ldr	r4, [r0, #20]
 800038a:	4323      	orrs	r3, r4
 800038c:	6984      	ldr	r4, [r0, #24]
 800038e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000390:	69c4      	ldr	r4, [r0, #28]
 8000392:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000394:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000396:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000398:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800039a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800039c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80003a0:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80003a2:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80003a6:	4618      	mov	r0, r3
 80003a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80003aa:	2001      	movs	r0, #1
}
 80003ac:	bd10      	pop	{r4, pc}
 80003ae:	bf00      	nop
 80003b0:	bffdfff8 	.word	0xbffdfff8
 80003b4:	40020000 	.word	0x40020000

080003b8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003b8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80003bc:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d003      	beq.n	80003ca <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003c2:	2304      	movs	r3, #4
 80003c4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80003c6:	2001      	movs	r0, #1
 80003c8:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80003ca:	6803      	ldr	r3, [r0, #0]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	f022 020e 	bic.w	r2, r2, #14
 80003d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	f022 0201 	bic.w	r2, r2, #1
 80003da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003dc:	4a18      	ldr	r2, [pc, #96]	; (8000440 <HAL_DMA_Abort_IT+0x88>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d01f      	beq.n	8000422 <HAL_DMA_Abort_IT+0x6a>
 80003e2:	3214      	adds	r2, #20
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d01e      	beq.n	8000426 <HAL_DMA_Abort_IT+0x6e>
 80003e8:	3214      	adds	r2, #20
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d01d      	beq.n	800042a <HAL_DMA_Abort_IT+0x72>
 80003ee:	3214      	adds	r2, #20
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d01d      	beq.n	8000430 <HAL_DMA_Abort_IT+0x78>
 80003f4:	3214      	adds	r2, #20
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d01d      	beq.n	8000436 <HAL_DMA_Abort_IT+0x7e>
 80003fa:	3214      	adds	r2, #20
 80003fc:	4293      	cmp	r3, r2
 80003fe:	bf0c      	ite	eq
 8000400:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000404:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000408:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800040a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800040c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800040e:	2301      	movs	r3, #1
 8000410:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000414:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000416:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800041a:	b17b      	cbz	r3, 800043c <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 800041c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800041e:	4620      	mov	r0, r4
 8000420:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000422:	2301      	movs	r3, #1
 8000424:	e7f0      	b.n	8000408 <HAL_DMA_Abort_IT+0x50>
 8000426:	2310      	movs	r3, #16
 8000428:	e7ee      	b.n	8000408 <HAL_DMA_Abort_IT+0x50>
 800042a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800042e:	e7eb      	b.n	8000408 <HAL_DMA_Abort_IT+0x50>
 8000430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000434:	e7e8      	b.n	8000408 <HAL_DMA_Abort_IT+0x50>
 8000436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800043a:	e7e5      	b.n	8000408 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800043c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800043e:	bd10      	pop	{r4, pc}
 8000440:	40020008 	.word	0x40020008
 8000444:	40020000 	.word	0x40020000

08000448 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000448:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800044a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800044c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800044e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000450:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000452:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000454:	4095      	lsls	r5, r2
 8000456:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000458:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800045a:	d032      	beq.n	80004c2 <HAL_DMA_IRQHandler+0x7a>
 800045c:	074d      	lsls	r5, r1, #29
 800045e:	d530      	bpl.n	80004c2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000464:	bf5e      	ittt	pl
 8000466:	681a      	ldrpl	r2, [r3, #0]
 8000468:	f022 0204 	bicpl.w	r2, r2, #4
 800046c:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800046e:	4a3e      	ldr	r2, [pc, #248]	; (8000568 <HAL_DMA_IRQHandler+0x120>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d019      	beq.n	80004a8 <HAL_DMA_IRQHandler+0x60>
 8000474:	3214      	adds	r2, #20
 8000476:	4293      	cmp	r3, r2
 8000478:	d018      	beq.n	80004ac <HAL_DMA_IRQHandler+0x64>
 800047a:	3214      	adds	r2, #20
 800047c:	4293      	cmp	r3, r2
 800047e:	d017      	beq.n	80004b0 <HAL_DMA_IRQHandler+0x68>
 8000480:	3214      	adds	r2, #20
 8000482:	4293      	cmp	r3, r2
 8000484:	d017      	beq.n	80004b6 <HAL_DMA_IRQHandler+0x6e>
 8000486:	3214      	adds	r2, #20
 8000488:	4293      	cmp	r3, r2
 800048a:	d017      	beq.n	80004bc <HAL_DMA_IRQHandler+0x74>
 800048c:	3214      	adds	r2, #20
 800048e:	4293      	cmp	r3, r2
 8000490:	bf0c      	ite	eq
 8000492:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000496:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800049a:	4a34      	ldr	r2, [pc, #208]	; (800056c <HAL_DMA_IRQHandler+0x124>)
 800049c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800049e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d05e      	beq.n	8000562 <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80004a4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80004a6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80004a8:	2304      	movs	r3, #4
 80004aa:	e7f6      	b.n	800049a <HAL_DMA_IRQHandler+0x52>
 80004ac:	2340      	movs	r3, #64	; 0x40
 80004ae:	e7f4      	b.n	800049a <HAL_DMA_IRQHandler+0x52>
 80004b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b4:	e7f1      	b.n	800049a <HAL_DMA_IRQHandler+0x52>
 80004b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004ba:	e7ee      	b.n	800049a <HAL_DMA_IRQHandler+0x52>
 80004bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80004c0:	e7eb      	b.n	800049a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80004c2:	2502      	movs	r5, #2
 80004c4:	4095      	lsls	r5, r2
 80004c6:	4225      	tst	r5, r4
 80004c8:	d035      	beq.n	8000536 <HAL_DMA_IRQHandler+0xee>
 80004ca:	078d      	lsls	r5, r1, #30
 80004cc:	d533      	bpl.n	8000536 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	0694      	lsls	r4, r2, #26
 80004d2:	d406      	bmi.n	80004e2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	f022 020a 	bic.w	r2, r2, #10
 80004da:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80004dc:	2201      	movs	r2, #1
 80004de:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80004e2:	4a21      	ldr	r2, [pc, #132]	; (8000568 <HAL_DMA_IRQHandler+0x120>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d019      	beq.n	800051c <HAL_DMA_IRQHandler+0xd4>
 80004e8:	3214      	adds	r2, #20
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d018      	beq.n	8000520 <HAL_DMA_IRQHandler+0xd8>
 80004ee:	3214      	adds	r2, #20
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d017      	beq.n	8000524 <HAL_DMA_IRQHandler+0xdc>
 80004f4:	3214      	adds	r2, #20
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d017      	beq.n	800052a <HAL_DMA_IRQHandler+0xe2>
 80004fa:	3214      	adds	r2, #20
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d017      	beq.n	8000530 <HAL_DMA_IRQHandler+0xe8>
 8000500:	3214      	adds	r2, #20
 8000502:	4293      	cmp	r3, r2
 8000504:	bf0c      	ite	eq
 8000506:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800050a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <HAL_DMA_IRQHandler+0x124>)
 8000510:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000512:	2300      	movs	r3, #0
 8000514:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000518:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800051a:	e7c1      	b.n	80004a0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800051c:	2302      	movs	r3, #2
 800051e:	e7f6      	b.n	800050e <HAL_DMA_IRQHandler+0xc6>
 8000520:	2320      	movs	r3, #32
 8000522:	e7f4      	b.n	800050e <HAL_DMA_IRQHandler+0xc6>
 8000524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000528:	e7f1      	b.n	800050e <HAL_DMA_IRQHandler+0xc6>
 800052a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052e:	e7ee      	b.n	800050e <HAL_DMA_IRQHandler+0xc6>
 8000530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000534:	e7eb      	b.n	800050e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000536:	2508      	movs	r5, #8
 8000538:	4095      	lsls	r5, r2
 800053a:	4225      	tst	r5, r4
 800053c:	d011      	beq.n	8000562 <HAL_DMA_IRQHandler+0x11a>
 800053e:	0709      	lsls	r1, r1, #28
 8000540:	d50f      	bpl.n	8000562 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	f021 010e 	bic.w	r1, r1, #14
 8000548:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800054a:	2301      	movs	r3, #1
 800054c:	fa03 f202 	lsl.w	r2, r3, r2
 8000550:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000552:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000554:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000558:	2300      	movs	r3, #0
 800055a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800055e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000560:	e79e      	b.n	80004a0 <HAL_DMA_IRQHandler+0x58>
}
 8000562:	bc70      	pop	{r4, r5, r6}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40020008 	.word	0x40020008
 800056c:	40020000 	.word	0x40020000

08000570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000574:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000576:	4626      	mov	r6, r4
 8000578:	4b66      	ldr	r3, [pc, #408]	; (8000714 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800057a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000724 <HAL_GPIO_Init+0x1b4>
 800057e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000728 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000582:	680a      	ldr	r2, [r1, #0]
 8000584:	fa32 f506 	lsrs.w	r5, r2, r6
 8000588:	d102      	bne.n	8000590 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800058a:	b003      	add	sp, #12
 800058c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000590:	f04f 0801 	mov.w	r8, #1
 8000594:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000598:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800059c:	4590      	cmp	r8, r2
 800059e:	d17f      	bne.n	80006a0 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80005a0:	684d      	ldr	r5, [r1, #4]
 80005a2:	2d12      	cmp	r5, #18
 80005a4:	f000 80aa 	beq.w	80006fc <HAL_GPIO_Init+0x18c>
 80005a8:	f200 8083 	bhi.w	80006b2 <HAL_GPIO_Init+0x142>
 80005ac:	2d02      	cmp	r5, #2
 80005ae:	f000 80a2 	beq.w	80006f6 <HAL_GPIO_Init+0x186>
 80005b2:	d877      	bhi.n	80006a4 <HAL_GPIO_Init+0x134>
 80005b4:	2d00      	cmp	r5, #0
 80005b6:	f000 8089 	beq.w	80006cc <HAL_GPIO_Init+0x15c>
 80005ba:	2d01      	cmp	r5, #1
 80005bc:	f000 8099 	beq.w	80006f2 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005c0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005c4:	2aff      	cmp	r2, #255	; 0xff
 80005c6:	bf93      	iteet	ls
 80005c8:	4682      	movls	sl, r0
 80005ca:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80005ce:	3d08      	subhi	r5, #8
 80005d0:	f8d0 b000 	ldrls.w	fp, [r0]
 80005d4:	bf92      	itee	ls
 80005d6:	00b5      	lslls	r5, r6, #2
 80005d8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80005dc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005de:	fa09 f805 	lsl.w	r8, r9, r5
 80005e2:	ea2b 0808 	bic.w	r8, fp, r8
 80005e6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005ea:	bf88      	it	hi
 80005ec:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005f0:	ea48 0505 	orr.w	r5, r8, r5
 80005f4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005f8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80005fc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000600:	d04e      	beq.n	80006a0 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000602:	4d45      	ldr	r5, [pc, #276]	; (8000718 <HAL_GPIO_Init+0x1a8>)
 8000604:	4f44      	ldr	r7, [pc, #272]	; (8000718 <HAL_GPIO_Init+0x1a8>)
 8000606:	69ad      	ldr	r5, [r5, #24]
 8000608:	f026 0803 	bic.w	r8, r6, #3
 800060c:	f045 0501 	orr.w	r5, r5, #1
 8000610:	61bd      	str	r5, [r7, #24]
 8000612:	69bd      	ldr	r5, [r7, #24]
 8000614:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000618:	f005 0501 	and.w	r5, r5, #1
 800061c:	9501      	str	r5, [sp, #4]
 800061e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000622:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000628:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800062c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000630:	fa09 f90b 	lsl.w	r9, r9, fp
 8000634:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000638:	4d38      	ldr	r5, [pc, #224]	; (800071c <HAL_GPIO_Init+0x1ac>)
 800063a:	42a8      	cmp	r0, r5
 800063c:	d063      	beq.n	8000706 <HAL_GPIO_Init+0x196>
 800063e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000642:	42a8      	cmp	r0, r5
 8000644:	d061      	beq.n	800070a <HAL_GPIO_Init+0x19a>
 8000646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800064a:	42a8      	cmp	r0, r5
 800064c:	d05f      	beq.n	800070e <HAL_GPIO_Init+0x19e>
 800064e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000652:	42a8      	cmp	r0, r5
 8000654:	bf0c      	ite	eq
 8000656:	2503      	moveq	r5, #3
 8000658:	2504      	movne	r5, #4
 800065a:	fa05 f50b 	lsl.w	r5, r5, fp
 800065e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000662:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000666:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000668:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800066c:	bf14      	ite	ne
 800066e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000670:	4395      	biceq	r5, r2
 8000672:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000674:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000676:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800067a:	bf14      	ite	ne
 800067c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800067e:	4395      	biceq	r5, r2
 8000680:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000682:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000684:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000688:	bf14      	ite	ne
 800068a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800068c:	4395      	biceq	r5, r2
 800068e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000690:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000692:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000696:	bf14      	ite	ne
 8000698:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800069a:	ea25 0202 	biceq.w	r2, r5, r2
 800069e:	60da      	str	r2, [r3, #12]
	position++;
 80006a0:	3601      	adds	r6, #1
 80006a2:	e76e      	b.n	8000582 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80006a4:	2d03      	cmp	r5, #3
 80006a6:	d022      	beq.n	80006ee <HAL_GPIO_Init+0x17e>
 80006a8:	2d11      	cmp	r5, #17
 80006aa:	d189      	bne.n	80005c0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006ac:	68cc      	ldr	r4, [r1, #12]
 80006ae:	3404      	adds	r4, #4
          break;
 80006b0:	e786      	b.n	80005c0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006b2:	4f1b      	ldr	r7, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x1b0>)
 80006b4:	42bd      	cmp	r5, r7
 80006b6:	d009      	beq.n	80006cc <HAL_GPIO_Init+0x15c>
 80006b8:	d812      	bhi.n	80006e0 <HAL_GPIO_Init+0x170>
 80006ba:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800072c <HAL_GPIO_Init+0x1bc>
 80006be:	454d      	cmp	r5, r9
 80006c0:	d004      	beq.n	80006cc <HAL_GPIO_Init+0x15c>
 80006c2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80006c6:	454d      	cmp	r5, r9
 80006c8:	f47f af7a 	bne.w	80005c0 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006cc:	688c      	ldr	r4, [r1, #8]
 80006ce:	b1c4      	cbz	r4, 8000702 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006d0:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80006d2:	bf0c      	ite	eq
 80006d4:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80006d8:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006dc:	2408      	movs	r4, #8
 80006de:	e76f      	b.n	80005c0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006e0:	4575      	cmp	r5, lr
 80006e2:	d0f3      	beq.n	80006cc <HAL_GPIO_Init+0x15c>
 80006e4:	4565      	cmp	r5, ip
 80006e6:	d0f1      	beq.n	80006cc <HAL_GPIO_Init+0x15c>
 80006e8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000730 <HAL_GPIO_Init+0x1c0>
 80006ec:	e7eb      	b.n	80006c6 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006ee:	2400      	movs	r4, #0
 80006f0:	e766      	b.n	80005c0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006f2:	68cc      	ldr	r4, [r1, #12]
          break;
 80006f4:	e764      	b.n	80005c0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006f6:	68cc      	ldr	r4, [r1, #12]
 80006f8:	3408      	adds	r4, #8
          break;
 80006fa:	e761      	b.n	80005c0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006fc:	68cc      	ldr	r4, [r1, #12]
 80006fe:	340c      	adds	r4, #12
          break;
 8000700:	e75e      	b.n	80005c0 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000702:	2404      	movs	r4, #4
 8000704:	e75c      	b.n	80005c0 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000706:	2500      	movs	r5, #0
 8000708:	e7a7      	b.n	800065a <HAL_GPIO_Init+0xea>
 800070a:	2501      	movs	r5, #1
 800070c:	e7a5      	b.n	800065a <HAL_GPIO_Init+0xea>
 800070e:	2502      	movs	r5, #2
 8000710:	e7a3      	b.n	800065a <HAL_GPIO_Init+0xea>
 8000712:	bf00      	nop
 8000714:	40010400 	.word	0x40010400
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800
 8000720:	10210000 	.word	0x10210000
 8000724:	10310000 	.word	0x10310000
 8000728:	10320000 	.word	0x10320000
 800072c:	10110000 	.word	0x10110000
 8000730:	10220000 	.word	0x10220000

08000734 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000734:	b10a      	cbz	r2, 800073a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000736:	6101      	str	r1, [r0, #16]
 8000738:	4770      	bx	lr
 800073a:	0409      	lsls	r1, r1, #16
 800073c:	e7fb      	b.n	8000736 <HAL_GPIO_WritePin+0x2>

0800073e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800073e:	68c3      	ldr	r3, [r0, #12]
 8000740:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000742:	bf14      	ite	ne
 8000744:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000746:	6101      	streq	r1, [r0, #16]
 8000748:	4770      	bx	lr
	...

0800074c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800074c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000750:	4605      	mov	r5, r0
 8000752:	b908      	cbnz	r0, 8000758 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000754:	2001      	movs	r0, #1
 8000756:	e03c      	b.n	80007d2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000758:	6803      	ldr	r3, [r0, #0]
 800075a:	07db      	lsls	r3, r3, #31
 800075c:	d410      	bmi.n	8000780 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800075e:	682b      	ldr	r3, [r5, #0]
 8000760:	079f      	lsls	r7, r3, #30
 8000762:	d45d      	bmi.n	8000820 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000764:	682b      	ldr	r3, [r5, #0]
 8000766:	0719      	lsls	r1, r3, #28
 8000768:	f100 8094 	bmi.w	8000894 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800076c:	682b      	ldr	r3, [r5, #0]
 800076e:	075a      	lsls	r2, r3, #29
 8000770:	f100 80be 	bmi.w	80008f0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000774:	69e8      	ldr	r0, [r5, #28]
 8000776:	2800      	cmp	r0, #0
 8000778:	f040 812c 	bne.w	80009d4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800077c:	2000      	movs	r0, #0
 800077e:	e028      	b.n	80007d2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000780:	4c8f      	ldr	r4, [pc, #572]	; (80009c0 <HAL_RCC_OscConfig+0x274>)
 8000782:	6863      	ldr	r3, [r4, #4]
 8000784:	f003 030c 	and.w	r3, r3, #12
 8000788:	2b04      	cmp	r3, #4
 800078a:	d007      	beq.n	800079c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800078c:	6863      	ldr	r3, [r4, #4]
 800078e:	f003 030c 	and.w	r3, r3, #12
 8000792:	2b08      	cmp	r3, #8
 8000794:	d109      	bne.n	80007aa <HAL_RCC_OscConfig+0x5e>
 8000796:	6863      	ldr	r3, [r4, #4]
 8000798:	03de      	lsls	r6, r3, #15
 800079a:	d506      	bpl.n	80007aa <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	039c      	lsls	r4, r3, #14
 80007a0:	d5dd      	bpl.n	800075e <HAL_RCC_OscConfig+0x12>
 80007a2:	686b      	ldr	r3, [r5, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1da      	bne.n	800075e <HAL_RCC_OscConfig+0x12>
 80007a8:	e7d4      	b.n	8000754 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007aa:	686b      	ldr	r3, [r5, #4]
 80007ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007b0:	d112      	bne.n	80007d8 <HAL_RCC_OscConfig+0x8c>
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007ba:	f7ff fce5 	bl	8000188 <HAL_GetTick>
 80007be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007c0:	6823      	ldr	r3, [r4, #0]
 80007c2:	0398      	lsls	r0, r3, #14
 80007c4:	d4cb      	bmi.n	800075e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007c6:	f7ff fcdf 	bl	8000188 <HAL_GetTick>
 80007ca:	1b80      	subs	r0, r0, r6
 80007cc:	2864      	cmp	r0, #100	; 0x64
 80007ce:	d9f7      	bls.n	80007c0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80007d0:	2003      	movs	r0, #3
}
 80007d2:	b002      	add	sp, #8
 80007d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007d8:	b99b      	cbnz	r3, 8000802 <HAL_RCC_OscConfig+0xb6>
 80007da:	6823      	ldr	r3, [r4, #0]
 80007dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e0:	6023      	str	r3, [r4, #0]
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007ea:	f7ff fccd 	bl	8000188 <HAL_GetTick>
 80007ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	0399      	lsls	r1, r3, #14
 80007f4:	d5b3      	bpl.n	800075e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007f6:	f7ff fcc7 	bl	8000188 <HAL_GetTick>
 80007fa:	1b80      	subs	r0, r0, r6
 80007fc:	2864      	cmp	r0, #100	; 0x64
 80007fe:	d9f7      	bls.n	80007f0 <HAL_RCC_OscConfig+0xa4>
 8000800:	e7e6      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000802:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	d103      	bne.n	8000812 <HAL_RCC_OscConfig+0xc6>
 800080a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080e:	6023      	str	r3, [r4, #0]
 8000810:	e7cf      	b.n	80007b2 <HAL_RCC_OscConfig+0x66>
 8000812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000816:	6023      	str	r3, [r4, #0]
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800081e:	e7cb      	b.n	80007b8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000820:	4c67      	ldr	r4, [pc, #412]	; (80009c0 <HAL_RCC_OscConfig+0x274>)
 8000822:	6863      	ldr	r3, [r4, #4]
 8000824:	f013 0f0c 	tst.w	r3, #12
 8000828:	d007      	beq.n	800083a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800082a:	6863      	ldr	r3, [r4, #4]
 800082c:	f003 030c 	and.w	r3, r3, #12
 8000830:	2b08      	cmp	r3, #8
 8000832:	d110      	bne.n	8000856 <HAL_RCC_OscConfig+0x10a>
 8000834:	6863      	ldr	r3, [r4, #4]
 8000836:	03da      	lsls	r2, r3, #15
 8000838:	d40d      	bmi.n	8000856 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	079b      	lsls	r3, r3, #30
 800083e:	d502      	bpl.n	8000846 <HAL_RCC_OscConfig+0xfa>
 8000840:	692b      	ldr	r3, [r5, #16]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d186      	bne.n	8000754 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	696a      	ldr	r2, [r5, #20]
 800084a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800084e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000852:	6023      	str	r3, [r4, #0]
 8000854:	e786      	b.n	8000764 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000856:	692a      	ldr	r2, [r5, #16]
 8000858:	4b5a      	ldr	r3, [pc, #360]	; (80009c4 <HAL_RCC_OscConfig+0x278>)
 800085a:	b16a      	cbz	r2, 8000878 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800085c:	2201      	movs	r2, #1
 800085e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000860:	f7ff fc92 	bl	8000188 <HAL_GetTick>
 8000864:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	079f      	lsls	r7, r3, #30
 800086a:	d4ec      	bmi.n	8000846 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800086c:	f7ff fc8c 	bl	8000188 <HAL_GetTick>
 8000870:	1b80      	subs	r0, r0, r6
 8000872:	2802      	cmp	r0, #2
 8000874:	d9f7      	bls.n	8000866 <HAL_RCC_OscConfig+0x11a>
 8000876:	e7ab      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000878:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800087a:	f7ff fc85 	bl	8000188 <HAL_GetTick>
 800087e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	0798      	lsls	r0, r3, #30
 8000884:	f57f af6e 	bpl.w	8000764 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000888:	f7ff fc7e 	bl	8000188 <HAL_GetTick>
 800088c:	1b80      	subs	r0, r0, r6
 800088e:	2802      	cmp	r0, #2
 8000890:	d9f6      	bls.n	8000880 <HAL_RCC_OscConfig+0x134>
 8000892:	e79d      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000894:	69aa      	ldr	r2, [r5, #24]
 8000896:	4c4a      	ldr	r4, [pc, #296]	; (80009c0 <HAL_RCC_OscConfig+0x274>)
 8000898:	4b4b      	ldr	r3, [pc, #300]	; (80009c8 <HAL_RCC_OscConfig+0x27c>)
 800089a:	b1da      	cbz	r2, 80008d4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800089c:	2201      	movs	r2, #1
 800089e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008a0:	f7ff fc72 	bl	8000188 <HAL_GetTick>
 80008a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008a8:	079b      	lsls	r3, r3, #30
 80008aa:	d50d      	bpl.n	80008c8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80008ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008b0:	4b46      	ldr	r3, [pc, #280]	; (80009cc <HAL_RCC_OscConfig+0x280>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80008b8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80008ba:	bf00      	nop
  }
  while (Delay --);
 80008bc:	9b01      	ldr	r3, [sp, #4]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	9201      	str	r2, [sp, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f9      	bne.n	80008ba <HAL_RCC_OscConfig+0x16e>
 80008c6:	e751      	b.n	800076c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008c8:	f7ff fc5e 	bl	8000188 <HAL_GetTick>
 80008cc:	1b80      	subs	r0, r0, r6
 80008ce:	2802      	cmp	r0, #2
 80008d0:	d9e9      	bls.n	80008a6 <HAL_RCC_OscConfig+0x15a>
 80008d2:	e77d      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80008d4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008d6:	f7ff fc57 	bl	8000188 <HAL_GetTick>
 80008da:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008de:	079f      	lsls	r7, r3, #30
 80008e0:	f57f af44 	bpl.w	800076c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008e4:	f7ff fc50 	bl	8000188 <HAL_GetTick>
 80008e8:	1b80      	subs	r0, r0, r6
 80008ea:	2802      	cmp	r0, #2
 80008ec:	d9f6      	bls.n	80008dc <HAL_RCC_OscConfig+0x190>
 80008ee:	e76f      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008f0:	4c33      	ldr	r4, [pc, #204]	; (80009c0 <HAL_RCC_OscConfig+0x274>)
 80008f2:	69e3      	ldr	r3, [r4, #28]
 80008f4:	00d8      	lsls	r0, r3, #3
 80008f6:	d424      	bmi.n	8000942 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80008f8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	69e3      	ldr	r3, [r4, #28]
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	61e3      	str	r3, [r4, #28]
 8000902:	69e3      	ldr	r3, [r4, #28]
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800090c:	4e30      	ldr	r6, [pc, #192]	; (80009d0 <HAL_RCC_OscConfig+0x284>)
 800090e:	6833      	ldr	r3, [r6, #0]
 8000910:	05d9      	lsls	r1, r3, #23
 8000912:	d518      	bpl.n	8000946 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000914:	68eb      	ldr	r3, [r5, #12]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d126      	bne.n	8000968 <HAL_RCC_OscConfig+0x21c>
 800091a:	6a23      	ldr	r3, [r4, #32]
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000922:	f7ff fc31 	bl	8000188 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000926:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800092a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800092c:	6a23      	ldr	r3, [r4, #32]
 800092e:	079b      	lsls	r3, r3, #30
 8000930:	d53f      	bpl.n	80009b2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000932:	2f00      	cmp	r7, #0
 8000934:	f43f af1e 	beq.w	8000774 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000938:	69e3      	ldr	r3, [r4, #28]
 800093a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800093e:	61e3      	str	r3, [r4, #28]
 8000940:	e718      	b.n	8000774 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000942:	2700      	movs	r7, #0
 8000944:	e7e2      	b.n	800090c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000946:	6833      	ldr	r3, [r6, #0]
 8000948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800094e:	f7ff fc1b 	bl	8000188 <HAL_GetTick>
 8000952:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000954:	6833      	ldr	r3, [r6, #0]
 8000956:	05da      	lsls	r2, r3, #23
 8000958:	d4dc      	bmi.n	8000914 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800095a:	f7ff fc15 	bl	8000188 <HAL_GetTick>
 800095e:	eba0 0008 	sub.w	r0, r0, r8
 8000962:	2864      	cmp	r0, #100	; 0x64
 8000964:	d9f6      	bls.n	8000954 <HAL_RCC_OscConfig+0x208>
 8000966:	e733      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000968:	b9ab      	cbnz	r3, 8000996 <HAL_RCC_OscConfig+0x24a>
 800096a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800096c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000970:	f023 0301 	bic.w	r3, r3, #1
 8000974:	6223      	str	r3, [r4, #32]
 8000976:	6a23      	ldr	r3, [r4, #32]
 8000978:	f023 0304 	bic.w	r3, r3, #4
 800097c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800097e:	f7ff fc03 	bl	8000188 <HAL_GetTick>
 8000982:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000984:	6a23      	ldr	r3, [r4, #32]
 8000986:	0798      	lsls	r0, r3, #30
 8000988:	d5d3      	bpl.n	8000932 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800098a:	f7ff fbfd 	bl	8000188 <HAL_GetTick>
 800098e:	1b80      	subs	r0, r0, r6
 8000990:	4540      	cmp	r0, r8
 8000992:	d9f7      	bls.n	8000984 <HAL_RCC_OscConfig+0x238>
 8000994:	e71c      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000996:	2b05      	cmp	r3, #5
 8000998:	6a23      	ldr	r3, [r4, #32]
 800099a:	d103      	bne.n	80009a4 <HAL_RCC_OscConfig+0x258>
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6223      	str	r3, [r4, #32]
 80009a2:	e7ba      	b.n	800091a <HAL_RCC_OscConfig+0x1ce>
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	6223      	str	r3, [r4, #32]
 80009aa:	6a23      	ldr	r3, [r4, #32]
 80009ac:	f023 0304 	bic.w	r3, r3, #4
 80009b0:	e7b6      	b.n	8000920 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009b2:	f7ff fbe9 	bl	8000188 <HAL_GetTick>
 80009b6:	eba0 0008 	sub.w	r0, r0, r8
 80009ba:	42b0      	cmp	r0, r6
 80009bc:	d9b6      	bls.n	800092c <HAL_RCC_OscConfig+0x1e0>
 80009be:	e707      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
 80009c0:	40021000 	.word	0x40021000
 80009c4:	42420000 	.word	0x42420000
 80009c8:	42420480 	.word	0x42420480
 80009cc:	20000058 	.word	0x20000058
 80009d0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <HAL_RCC_OscConfig+0x334>)
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	461c      	mov	r4, r3
 80009da:	f002 020c 	and.w	r2, r2, #12
 80009de:	2a08      	cmp	r2, #8
 80009e0:	d03d      	beq.n	8000a5e <HAL_RCC_OscConfig+0x312>
 80009e2:	2300      	movs	r3, #0
 80009e4:	4e27      	ldr	r6, [pc, #156]	; (8000a84 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009e6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80009e8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009ea:	d12b      	bne.n	8000a44 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80009ec:	f7ff fbcc 	bl	8000188 <HAL_GetTick>
 80009f0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	0199      	lsls	r1, r3, #6
 80009f6:	d41f      	bmi.n	8000a38 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80009f8:	6a2b      	ldr	r3, [r5, #32]
 80009fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009fe:	d105      	bne.n	8000a0c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a00:	6862      	ldr	r2, [r4, #4]
 8000a02:	68a9      	ldr	r1, [r5, #8]
 8000a04:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a0c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000a0e:	6862      	ldr	r2, [r4, #4]
 8000a10:	430b      	orrs	r3, r1
 8000a12:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000a16:	4313      	orrs	r3, r2
 8000a18:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a1e:	f7ff fbb3 	bl	8000188 <HAL_GetTick>
 8000a22:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a24:	6823      	ldr	r3, [r4, #0]
 8000a26:	019a      	lsls	r2, r3, #6
 8000a28:	f53f aea8 	bmi.w	800077c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a2c:	f7ff fbac 	bl	8000188 <HAL_GetTick>
 8000a30:	1b40      	subs	r0, r0, r5
 8000a32:	2802      	cmp	r0, #2
 8000a34:	d9f6      	bls.n	8000a24 <HAL_RCC_OscConfig+0x2d8>
 8000a36:	e6cb      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a38:	f7ff fba6 	bl	8000188 <HAL_GetTick>
 8000a3c:	1bc0      	subs	r0, r0, r7
 8000a3e:	2802      	cmp	r0, #2
 8000a40:	d9d7      	bls.n	80009f2 <HAL_RCC_OscConfig+0x2a6>
 8000a42:	e6c5      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000a44:	f7ff fba0 	bl	8000188 <HAL_GetTick>
 8000a48:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	019b      	lsls	r3, r3, #6
 8000a4e:	f57f ae95 	bpl.w	800077c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a52:	f7ff fb99 	bl	8000188 <HAL_GetTick>
 8000a56:	1b40      	subs	r0, r0, r5
 8000a58:	2802      	cmp	r0, #2
 8000a5a:	d9f6      	bls.n	8000a4a <HAL_RCC_OscConfig+0x2fe>
 8000a5c:	e6b8      	b.n	80007d0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000a5e:	2801      	cmp	r0, #1
 8000a60:	f43f aeb7 	beq.w	80007d2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000a64:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a66:	6a2b      	ldr	r3, [r5, #32]
 8000a68:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f47f ae71 	bne.w	8000754 <HAL_RCC_OscConfig+0x8>
 8000a72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000a74:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000a78:	1ac0      	subs	r0, r0, r3
 8000a7a:	bf18      	it	ne
 8000a7c:	2001      	movne	r0, #1
 8000a7e:	e6a8      	b.n	80007d2 <HAL_RCC_OscConfig+0x86>
 8000a80:	40021000 	.word	0x40021000
 8000a84:	42420060 	.word	0x42420060

08000a88 <HAL_RCC_GetSysClockFreq>:
{
 8000a88:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000a8c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a8e:	ac02      	add	r4, sp, #8
 8000a90:	f103 0510 	add.w	r5, r3, #16
 8000a94:	4622      	mov	r2, r4
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	6859      	ldr	r1, [r3, #4]
 8000a9a:	3308      	adds	r3, #8
 8000a9c:	c203      	stmia	r2!, {r0, r1}
 8000a9e:	42ab      	cmp	r3, r5
 8000aa0:	4614      	mov	r4, r2
 8000aa2:	d1f7      	bne.n	8000a94 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f88d 3004 	strb.w	r3, [sp, #4]
 8000aaa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000aac:	4911      	ldr	r1, [pc, #68]	; (8000af4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000aae:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000ab2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ab4:	f003 020c 	and.w	r2, r3, #12
 8000ab8:	2a08      	cmp	r2, #8
 8000aba:	d117      	bne.n	8000aec <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000abc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000ac0:	a806      	add	r0, sp, #24
 8000ac2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ac4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ac6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000aca:	d50c      	bpl.n	8000ae6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000acc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ad0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ad4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ad6:	aa06      	add	r2, sp, #24
 8000ad8:	4413      	add	r3, r2
 8000ada:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ade:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000ae2:	b007      	add	sp, #28
 8000ae4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_RCC_GetSysClockFreq+0x74>)
 8000ae8:	4350      	muls	r0, r2
 8000aea:	e7fa      	b.n	8000ae2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000aee:	e7f8      	b.n	8000ae2 <HAL_RCC_GetSysClockFreq+0x5a>
 8000af0:	08002008 	.word	0x08002008
 8000af4:	40021000 	.word	0x40021000
 8000af8:	007a1200 	.word	0x007a1200
 8000afc:	003d0900 	.word	0x003d0900

08000b00 <HAL_RCC_ClockConfig>:
{
 8000b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b04:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000b06:	4604      	mov	r4, r0
 8000b08:	b910      	cbnz	r0, 8000b10 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b10:	4a45      	ldr	r2, [pc, #276]	; (8000c28 <HAL_RCC_ClockConfig+0x128>)
 8000b12:	6813      	ldr	r3, [r2, #0]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	d329      	bcc.n	8000b70 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b1c:	6821      	ldr	r1, [r4, #0]
 8000b1e:	078e      	lsls	r6, r1, #30
 8000b20:	d431      	bmi.n	8000b86 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b22:	07ca      	lsls	r2, r1, #31
 8000b24:	d444      	bmi.n	8000bb0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000b26:	4a40      	ldr	r2, [pc, #256]	; (8000c28 <HAL_RCC_ClockConfig+0x128>)
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	429d      	cmp	r5, r3
 8000b30:	d367      	bcc.n	8000c02 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b32:	6822      	ldr	r2, [r4, #0]
 8000b34:	4d3d      	ldr	r5, [pc, #244]	; (8000c2c <HAL_RCC_ClockConfig+0x12c>)
 8000b36:	f012 0f04 	tst.w	r2, #4
 8000b3a:	d16e      	bne.n	8000c1a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b3c:	0713      	lsls	r3, r2, #28
 8000b3e:	d506      	bpl.n	8000b4e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b40:	686b      	ldr	r3, [r5, #4]
 8000b42:	6922      	ldr	r2, [r4, #16]
 8000b44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b4c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b4e:	f7ff ff9b 	bl	8000a88 <HAL_RCC_GetSysClockFreq>
 8000b52:	686b      	ldr	r3, [r5, #4]
 8000b54:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <HAL_RCC_ClockConfig+0x130>)
 8000b56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b5a:	5cd3      	ldrb	r3, [r2, r3]
 8000b5c:	40d8      	lsrs	r0, r3
 8000b5e:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <HAL_RCC_ClockConfig+0x134>)
 8000b60:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000b62:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <HAL_RCC_ClockConfig+0x138>)
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	f001 f95f 	bl	8001e28 <HAL_InitTick>
  return HAL_OK;
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	f023 0307 	bic.w	r3, r3, #7
 8000b76:	430b      	orrs	r3, r1
 8000b78:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d1c2      	bne.n	8000b0a <HAL_RCC_ClockConfig+0xa>
 8000b84:	e7ca      	b.n	8000b1c <HAL_RCC_ClockConfig+0x1c>
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b88:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	685a      	ldrne	r2, [r3, #4]
 8000b90:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000b94:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b96:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b98:	bf42      	ittt	mi
 8000b9a:	685a      	ldrmi	r2, [r3, #4]
 8000b9c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000ba0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	68a0      	ldr	r0, [r4, #8]
 8000ba6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000baa:	4302      	orrs	r2, r0
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	e7b8      	b.n	8000b22 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb0:	6862      	ldr	r2, [r4, #4]
 8000bb2:	4e1e      	ldr	r6, [pc, #120]	; (8000c2c <HAL_RCC_ClockConfig+0x12c>)
 8000bb4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb8:	d11b      	bne.n	8000bf2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bbe:	d0a4      	beq.n	8000b0a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bc0:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bc6:	f023 0303 	bic.w	r3, r3, #3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000bce:	f7ff fadb 	bl	8000188 <HAL_GetTick>
 8000bd2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bd4:	6873      	ldr	r3, [r6, #4]
 8000bd6:	6862      	ldr	r2, [r4, #4]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000be0:	d0a1      	beq.n	8000b26 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000be2:	f7ff fad1 	bl	8000188 <HAL_GetTick>
 8000be6:	1bc0      	subs	r0, r0, r7
 8000be8:	4540      	cmp	r0, r8
 8000bea:	d9f3      	bls.n	8000bd4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000bec:	2003      	movs	r0, #3
}
 8000bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bf2:	2a02      	cmp	r2, #2
 8000bf4:	d102      	bne.n	8000bfc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bf6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bfa:	e7e0      	b.n	8000bbe <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfc:	f013 0f02 	tst.w	r3, #2
 8000c00:	e7dd      	b.n	8000bbe <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	f023 0307 	bic.w	r3, r3, #7
 8000c08:	432b      	orrs	r3, r5
 8000c0a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c0c:	6813      	ldr	r3, [r2, #0]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	429d      	cmp	r5, r3
 8000c14:	f47f af79 	bne.w	8000b0a <HAL_RCC_ClockConfig+0xa>
 8000c18:	e78b      	b.n	8000b32 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c1a:	686b      	ldr	r3, [r5, #4]
 8000c1c:	68e1      	ldr	r1, [r4, #12]
 8000c1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c22:	430b      	orrs	r3, r1
 8000c24:	606b      	str	r3, [r5, #4]
 8000c26:	e789      	b.n	8000b3c <HAL_RCC_ClockConfig+0x3c>
 8000c28:	40022000 	.word	0x40022000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	08002018 	.word	0x08002018
 8000c34:	20000058 	.word	0x20000058
 8000c38:	20000004 	.word	0x20000004

08000c3c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000c46:	5cd3      	ldrb	r3, [r2, r3]
 8000c48:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c4a:	6810      	ldr	r0, [r2, #0]
}
 8000c4c:	40d8      	lsrs	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000
 8000c54:	08002028 	.word	0x08002028
 8000c58:	20000058 	.word	0x20000058

08000c5c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c66:	5cd3      	ldrb	r3, [r2, r3]
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c6a:	6810      	ldr	r0, [r2, #0]
}
 8000c6c:	40d8      	lsrs	r0, r3
 8000c6e:	4770      	bx	lr
 8000c70:	40021000 	.word	0x40021000
 8000c74:	08002028 	.word	0x08002028
 8000c78:	20000058 	.word	0x20000058

08000c7c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_RCC_GetClockConfig+0x34>)
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	f002 0203 	and.w	r2, r2, #3
 8000c88:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000c90:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000c98:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ca2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_RCC_GetClockConfig+0x38>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	600b      	str	r3, [r1, #0]
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000cb8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000cba:	4604      	mov	r4, r0
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d034      	beq.n	8000d2a <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000cc4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000cc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ccc:	b91b      	cbnz	r3, 8000cd6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000cce:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000cd2:	f000 ff5f 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000cd6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000cd8:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000cda:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000cde:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ce0:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ce6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ce8:	6863      	ldr	r3, [r4, #4]
 8000cea:	69a1      	ldr	r1, [r4, #24]
 8000cec:	4303      	orrs	r3, r0
 8000cee:	68e0      	ldr	r0, [r4, #12]
 8000cf0:	4303      	orrs	r3, r0
 8000cf2:	6920      	ldr	r0, [r4, #16]
 8000cf4:	4303      	orrs	r3, r0
 8000cf6:	6960      	ldr	r0, [r4, #20]
 8000cf8:	4303      	orrs	r3, r0
 8000cfa:	69e0      	ldr	r0, [r4, #28]
 8000cfc:	4303      	orrs	r3, r0
 8000cfe:	6a20      	ldr	r0, [r4, #32]
 8000d00:	4303      	orrs	r3, r0
 8000d02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000d04:	4303      	orrs	r3, r0
 8000d06:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000d0a:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d0c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000d0e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d12:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000d14:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d16:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d18:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d1e:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000d20:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d22:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000d24:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000d28:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1
}
 8000d2c:	bd10      	pop	{r4, pc}
	...

08000d30 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d30:	6a03      	ldr	r3, [r0, #32]
{
 8000d32:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d3a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000d3c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000d3e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000d42:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d46:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000d48:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000d4a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000d4e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000d50:	4d0a      	ldr	r5, [pc, #40]	; (8000d7c <TIM_OC1_SetConfig+0x4c>)
 8000d52:	42a8      	cmp	r0, r5
 8000d54:	d10b      	bne.n	8000d6e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000d56:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000d58:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000d5c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d5e:	698e      	ldr	r6, [r1, #24]
 8000d60:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000d62:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d66:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000d68:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d6c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000d70:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000d72:	684a      	ldr	r2, [r1, #4]
 8000d74:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d76:	6203      	str	r3, [r0, #32]
 8000d78:	bd70      	pop	{r4, r5, r6, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40012c00 	.word	0x40012c00

08000d80 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000d80:	6a03      	ldr	r3, [r0, #32]
{
 8000d82:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d88:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d8a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000d8c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d8e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d90:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000d92:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d96:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d98:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000d9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000da2:	4d0b      	ldr	r5, [pc, #44]	; (8000dd0 <TIM_OC3_SetConfig+0x50>)
 8000da4:	42a8      	cmp	r0, r5
 8000da6:	d10d      	bne.n	8000dc4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000da8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000dae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000db2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000db4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000db6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000dba:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000dc0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000dc4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000dc6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000dc8:	684a      	ldr	r2, [r1, #4]
 8000dca:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000dcc:	6203      	str	r3, [r0, #32]
 8000dce:	bd70      	pop	{r4, r5, r6, pc}
 8000dd0:	40012c00 	.word	0x40012c00

08000dd4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000dd4:	6a03      	ldr	r3, [r0, #32]
{
 8000dd6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ddc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000dde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000de0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000de2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000de4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000de6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000dea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000dee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000df4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000df8:	4d06      	ldr	r5, [pc, #24]	; (8000e14 <TIM_OC4_SetConfig+0x40>)
 8000dfa:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000dfc:	bf02      	ittt	eq
 8000dfe:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000e00:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e04:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e08:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e0a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000e0c:	684a      	ldr	r2, [r1, #4]
 8000e0e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e10:	6203      	str	r3, [r0, #32]
 8000e12:	bd30      	pop	{r4, r5, pc}
 8000e14:	40012c00 	.word	0x40012c00

08000e18 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000e18:	6803      	ldr	r3, [r0, #0]
}
 8000e1a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	f042 0201 	orr.w	r2, r2, #1
 8000e22:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000e2a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8000e2c:	bf1e      	ittt	ne
 8000e2e:	681a      	ldrne	r2, [r3, #0]
 8000e30:	f042 0201 	orrne.w	r2, r2, #1
 8000e34:	601a      	strne	r2, [r3, #0]
}
 8000e36:	4770      	bx	lr

08000e38 <HAL_TIM_PWM_MspInit>:
 8000e38:	4770      	bx	lr

08000e3a <HAL_TIM_OnePulse_MspInit>:
 8000e3a:	4770      	bx	lr

08000e3c <HAL_TIM_OC_DelayElapsedCallback>:
 8000e3c:	4770      	bx	lr

08000e3e <HAL_TIM_IC_CaptureCallback>:
 8000e3e:	4770      	bx	lr

08000e40 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000e40:	4770      	bx	lr

08000e42 <HAL_TIM_TriggerCallback>:
 8000e42:	4770      	bx	lr

08000e44 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e44:	6803      	ldr	r3, [r0, #0]
{
 8000e46:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e48:	691a      	ldr	r2, [r3, #16]
{
 8000e4a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e4c:	0791      	lsls	r1, r2, #30
 8000e4e:	d50e      	bpl.n	8000e6e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	0792      	lsls	r2, r2, #30
 8000e54:	d50b      	bpl.n	8000e6e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e56:	f06f 0202 	mvn.w	r2, #2
 8000e5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e5c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e5e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e60:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e62:	079b      	lsls	r3, r3, #30
 8000e64:	d077      	beq.n	8000f56 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000e66:	f7ff ffea 	bl	8000e3e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	691a      	ldr	r2, [r3, #16]
 8000e72:	0750      	lsls	r0, r2, #29
 8000e74:	d510      	bpl.n	8000e98 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	0751      	lsls	r1, r2, #29
 8000e7a:	d50d      	bpl.n	8000e98 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e7c:	f06f 0204 	mvn.w	r2, #4
 8000e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e82:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e84:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e86:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e88:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000e8c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e8e:	d068      	beq.n	8000f62 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e90:	f7ff ffd5 	bl	8000e3e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e94:	2300      	movs	r3, #0
 8000e96:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	0712      	lsls	r2, r2, #28
 8000e9e:	d50f      	bpl.n	8000ec0 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	0710      	lsls	r0, r2, #28
 8000ea4:	d50c      	bpl.n	8000ec0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000ea6:	f06f 0208 	mvn.w	r2, #8
 8000eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000eac:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000eae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000eb0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000eb2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000eb4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000eb6:	d05a      	beq.n	8000f6e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000eb8:	f7ff ffc1 	bl	8000e3e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	06d2      	lsls	r2, r2, #27
 8000ec6:	d510      	bpl.n	8000eea <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	06d0      	lsls	r0, r2, #27
 8000ecc:	d50d      	bpl.n	8000eea <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000ece:	f06f 0210 	mvn.w	r2, #16
 8000ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ed4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ed6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ed8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000eda:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000ede:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ee0:	d04b      	beq.n	8000f7a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ee2:	f7ff ffac 	bl	8000e3e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	691a      	ldr	r2, [r3, #16]
 8000eee:	07d1      	lsls	r1, r2, #31
 8000ef0:	d508      	bpl.n	8000f04 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000ef2:	68da      	ldr	r2, [r3, #12]
 8000ef4:	07d2      	lsls	r2, r2, #31
 8000ef6:	d505      	bpl.n	8000f04 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ef8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000efc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000efe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000f00:	f000 fde2 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	0610      	lsls	r0, r2, #24
 8000f0a:	d508      	bpl.n	8000f1e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	0611      	lsls	r1, r2, #24
 8000f10:	d505      	bpl.n	8000f1e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000f12:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000f16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000f18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000f1a:	f000 fa3a 	bl	8001392 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	691a      	ldr	r2, [r3, #16]
 8000f22:	0652      	lsls	r2, r2, #25
 8000f24:	d508      	bpl.n	8000f38 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	0650      	lsls	r0, r2, #25
 8000f2a:	d505      	bpl.n	8000f38 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000f30:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f32:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000f34:	f7ff ff85 	bl	8000e42 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	0691      	lsls	r1, r2, #26
 8000f3e:	d522      	bpl.n	8000f86 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	0692      	lsls	r2, r2, #26
 8000f44:	d51f      	bpl.n	8000f86 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f46:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8000f4a:	4620      	mov	r0, r4
}
 8000f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8000f52:	f000 ba1d 	b.w	8001390 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f56:	f7ff ff71 	bl	8000e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f7ff ff70 	bl	8000e40 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f60:	e783      	b.n	8000e6a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f62:	f7ff ff6b 	bl	8000e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff ff6a 	bl	8000e40 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f6c:	e792      	b.n	8000e94 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f6e:	f7ff ff65 	bl	8000e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff ff64 	bl	8000e40 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f78:	e7a0      	b.n	8000ebc <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f7a:	f7ff ff5f 	bl	8000e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f7ff ff5e 	bl	8000e40 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f84:	e7af      	b.n	8000ee6 <HAL_TIM_IRQHandler+0xa2>
 8000f86:	bd10      	pop	{r4, pc}

08000f88 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000f8a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f8c:	4290      	cmp	r0, r2
 8000f8e:	d00a      	beq.n	8000fa6 <TIM_Base_SetConfig+0x1e>
 8000f90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f94:	d007      	beq.n	8000fa6 <TIM_Base_SetConfig+0x1e>
 8000f96:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f9a:	4290      	cmp	r0, r2
 8000f9c:	d003      	beq.n	8000fa6 <TIM_Base_SetConfig+0x1e>
 8000f9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa2:	4290      	cmp	r0, r2
 8000fa4:	d115      	bne.n	8000fd2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000fa6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000fac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000fae:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <TIM_Base_SetConfig+0x6c>)
 8000fb0:	4290      	cmp	r0, r2
 8000fb2:	d00a      	beq.n	8000fca <TIM_Base_SetConfig+0x42>
 8000fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fb8:	d007      	beq.n	8000fca <TIM_Base_SetConfig+0x42>
 8000fba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000fbe:	4290      	cmp	r0, r2
 8000fc0:	d003      	beq.n	8000fca <TIM_Base_SetConfig+0x42>
 8000fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fc6:	4290      	cmp	r0, r2
 8000fc8:	d103      	bne.n	8000fd2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fd0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000fd2:	694a      	ldr	r2, [r1, #20]
 8000fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fd8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000fda:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fdc:	688b      	ldr	r3, [r1, #8]
 8000fde:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000fe0:	680b      	ldr	r3, [r1, #0]
 8000fe2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <TIM_Base_SetConfig+0x6c>)
 8000fe6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000fe8:	bf04      	itt	eq
 8000fea:	690b      	ldreq	r3, [r1, #16]
 8000fec:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	6143      	str	r3, [r0, #20]
 8000ff2:	4770      	bx	lr
 8000ff4:	40012c00 	.word	0x40012c00

08000ff8 <HAL_TIM_Base_Init>:
{
 8000ff8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	b1a0      	cbz	r0, 8001028 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000ffe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001002:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001006:	b91b      	cbnz	r3, 8001010 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001008:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800100c:	f000 fe36 	bl	8001c7c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001010:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001012:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001014:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001018:	1d21      	adds	r1, r4, #4
 800101a:	f7ff ffb5 	bl	8000f88 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800101e:	2301      	movs	r3, #1
  return HAL_OK;
 8001020:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001022:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001026:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001028:	2001      	movs	r0, #1
}
 800102a:	bd10      	pop	{r4, pc}

0800102c <HAL_TIM_PWM_Init>:
{
 800102c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800102e:	4604      	mov	r4, r0
 8001030:	b1a0      	cbz	r0, 800105c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001032:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001036:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800103a:	b91b      	cbnz	r3, 8001044 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800103c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001040:	f7ff fefa 	bl	8000e38 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001044:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001046:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001048:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800104c:	1d21      	adds	r1, r4, #4
 800104e:	f7ff ff9b 	bl	8000f88 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001052:	2301      	movs	r3, #1
  return HAL_OK;
 8001054:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800105a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800105c:	2001      	movs	r0, #1
}
 800105e:	bd10      	pop	{r4, pc}

08001060 <HAL_TIM_OnePulse_Init>:
{
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	460d      	mov	r5, r1
  if (htim == NULL)
 8001064:	4604      	mov	r4, r0
 8001066:	b1e0      	cbz	r0, 80010a2 <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001068:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800106c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001070:	b91b      	cbnz	r3, 800107a <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 8001072:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8001076:	f7ff fee0 	bl	8000e3a <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800107a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800107c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800107e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001082:	6820      	ldr	r0, [r4, #0]
 8001084:	f7ff ff80 	bl	8000f88 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001088:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800108a:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f022 0208 	bic.w	r2, r2, #8
 8001092:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8001094:	6819      	ldr	r1, [r3, #0]
 8001096:	4329      	orrs	r1, r5
 8001098:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800109a:	2301      	movs	r3, #1
 800109c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80010a2:	2001      	movs	r0, #1
}
 80010a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080010a8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010a8:	6a03      	ldr	r3, [r0, #32]
{
 80010aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010ac:	f023 0310 	bic.w	r3, r3, #16
 80010b0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80010b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80010b4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80010b6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80010ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80010c2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80010c4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80010c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80010cc:	4d0b      	ldr	r5, [pc, #44]	; (80010fc <TIM_OC2_SetConfig+0x54>)
 80010ce:	42a8      	cmp	r0, r5
 80010d0:	d10d      	bne.n	80010ee <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80010d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80010d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80010d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010dc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80010de:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80010e0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010e4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80010e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010ea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80010ee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80010f0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80010f2:	684a      	ldr	r2, [r1, #4]
 80010f4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80010f6:	6203      	str	r3, [r0, #32]
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
 80010fa:	bf00      	nop
 80010fc:	40012c00 	.word	0x40012c00

08001100 <HAL_TIM_PWM_ConfigChannel>:
{
 8001100:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001102:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001106:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001108:	2b01      	cmp	r3, #1
 800110a:	f04f 0002 	mov.w	r0, #2
 800110e:	d025      	beq.n	800115c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001110:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001112:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001116:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800111a:	2a0c      	cmp	r2, #12
 800111c:	d818      	bhi.n	8001150 <HAL_TIM_PWM_ConfigChannel+0x50>
 800111e:	e8df f002 	tbb	[pc, r2]
 8001122:	1707      	.short	0x1707
 8001124:	171e1717 	.word	0x171e1717
 8001128:	172f1717 	.word	0x172f1717
 800112c:	1717      	.short	0x1717
 800112e:	40          	.byte	0x40
 800112f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001130:	6820      	ldr	r0, [r4, #0]
 8001132:	f7ff fdfd 	bl	8000d30 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001136:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001138:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	f042 0208 	orr.w	r2, r2, #8
 8001140:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	f022 0204 	bic.w	r2, r2, #4
 8001148:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800114e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001150:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001152:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001154:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001158:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800115c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800115e:	6820      	ldr	r0, [r4, #0]
 8001160:	f7ff ffa2 	bl	80010a8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001164:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001166:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001168:	699a      	ldr	r2, [r3, #24]
 800116a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800116e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800117e:	e7e6      	b.n	800114e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001180:	6820      	ldr	r0, [r4, #0]
 8001182:	f7ff fdfd 	bl	8000d80 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001186:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001188:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800118a:	69da      	ldr	r2, [r3, #28]
 800118c:	f042 0208 	orr.w	r2, r2, #8
 8001190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	f022 0204 	bic.w	r2, r2, #4
 8001198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800119a:	69da      	ldr	r2, [r3, #28]
 800119c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800119e:	61da      	str	r2, [r3, #28]
      break;
 80011a0:	e7d6      	b.n	8001150 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	f7ff fe16 	bl	8000dd4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80011a8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80011aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80011ac:	69da      	ldr	r2, [r3, #28]
 80011ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80011b4:	69da      	ldr	r2, [r3, #28]
 80011b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011c2:	e7ec      	b.n	800119e <HAL_TIM_PWM_ConfigChannel+0x9e>

080011c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80011c4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80011c6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011c8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011ca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80011d2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80011d4:	6083      	str	r3, [r0, #8]
 80011d6:	bd10      	pop	{r4, pc}

080011d8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80011d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80011de:	2b01      	cmp	r3, #1
{
 80011e0:	4604      	mov	r4, r0
 80011e2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80011e6:	d019      	beq.n	800121c <HAL_TIM_ConfigClockSource+0x44>
 80011e8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80011ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80011ee:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80011f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80011f4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80011fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80011fe:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001200:	680b      	ldr	r3, [r1, #0]
 8001202:	2b40      	cmp	r3, #64	; 0x40
 8001204:	d065      	beq.n	80012d2 <HAL_TIM_ConfigClockSource+0xfa>
 8001206:	d815      	bhi.n	8001234 <HAL_TIM_ConfigClockSource+0x5c>
 8001208:	2b10      	cmp	r3, #16
 800120a:	d00c      	beq.n	8001226 <HAL_TIM_ConfigClockSource+0x4e>
 800120c:	d807      	bhi.n	800121e <HAL_TIM_ConfigClockSource+0x46>
 800120e:	b153      	cbz	r3, 8001226 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001210:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001212:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001214:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001218:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800121c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800121e:	2b20      	cmp	r3, #32
 8001220:	d001      	beq.n	8001226 <HAL_TIM_ConfigClockSource+0x4e>
 8001222:	2b30      	cmp	r3, #48	; 0x30
 8001224:	d1f4      	bne.n	8001210 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001226:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001228:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800122c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001230:	4313      	orrs	r3, r2
 8001232:	e01a      	b.n	800126a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001234:	2b60      	cmp	r3, #96	; 0x60
 8001236:	d034      	beq.n	80012a2 <HAL_TIM_ConfigClockSource+0xca>
 8001238:	d819      	bhi.n	800126e <HAL_TIM_ConfigClockSource+0x96>
 800123a:	2b50      	cmp	r3, #80	; 0x50
 800123c:	d1e8      	bne.n	8001210 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800123e:	684a      	ldr	r2, [r1, #4]
 8001240:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001242:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001244:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001246:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800124a:	f025 0501 	bic.w	r5, r5, #1
 800124e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001250:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001252:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001258:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800125c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800125e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001260:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001266:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800126a:	6083      	str	r3, [r0, #8]
 800126c:	e7d0      	b.n	8001210 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800126e:	2b70      	cmp	r3, #112	; 0x70
 8001270:	d00c      	beq.n	800128c <HAL_TIM_ConfigClockSource+0xb4>
 8001272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001276:	d1cb      	bne.n	8001210 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001278:	68cb      	ldr	r3, [r1, #12]
 800127a:	684a      	ldr	r2, [r1, #4]
 800127c:	6889      	ldr	r1, [r1, #8]
 800127e:	f7ff ffa1 	bl	80011c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001282:	6822      	ldr	r2, [r4, #0]
 8001284:	6893      	ldr	r3, [r2, #8]
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	e008      	b.n	800129e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800128c:	68cb      	ldr	r3, [r1, #12]
 800128e:	684a      	ldr	r2, [r1, #4]
 8001290:	6889      	ldr	r1, [r1, #8]
 8001292:	f7ff ff97 	bl	80011c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001296:	6822      	ldr	r2, [r4, #0]
 8001298:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800129a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800129e:	6093      	str	r3, [r2, #8]
      break;
 80012a0:	e7b6      	b.n	8001210 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80012a2:	684d      	ldr	r5, [r1, #4]
 80012a4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012a6:	6a01      	ldr	r1, [r0, #32]
 80012a8:	f021 0110 	bic.w	r1, r1, #16
 80012ac:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012ae:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80012b0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012b2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80012ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80012be:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80012c2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80012c4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80012c6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012cc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80012d0:	e7cb      	b.n	800126a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012d2:	684a      	ldr	r2, [r1, #4]
 80012d4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80012d6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012d8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012da:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012de:	f025 0501 	bic.w	r5, r5, #1
 80012e2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012e4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80012e6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012ec:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80012f0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80012f2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80012f4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012fa:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80012fe:	e7b4      	b.n	800126a <HAL_TIM_ConfigClockSource+0x92>

08001300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001300:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001302:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001304:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001306:	f001 011f 	and.w	r1, r1, #31
 800130a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800130c:	ea23 0304 	bic.w	r3, r3, r4
 8001310:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001312:	6a03      	ldr	r3, [r0, #32]
 8001314:	408a      	lsls	r2, r1
 8001316:	431a      	orrs	r2, r3
 8001318:	6202      	str	r2, [r0, #32]
 800131a:	bd10      	pop	{r4, pc}

0800131c <HAL_TIM_PWM_Start>:
{
 800131c:	b510      	push	{r4, lr}
 800131e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001320:	2201      	movs	r2, #1
 8001322:	6800      	ldr	r0, [r0, #0]
 8001324:	f7ff ffec 	bl	8001300 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_TIM_PWM_Start+0x34>)
}
 800132c:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800132e:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001330:	bf02      	ittt	eq
 8001332:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001334:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001338:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001340:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001342:	bf1e      	ittt	ne
 8001344:	681a      	ldrne	r2, [r3, #0]
 8001346:	f042 0201 	orrne.w	r2, r2, #1
 800134a:	601a      	strne	r2, [r3, #0]
}
 800134c:	bd10      	pop	{r4, pc}
 800134e:	bf00      	nop
 8001350:	40012c00 	.word	0x40012c00

08001354 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001354:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001358:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800135a:	2b01      	cmp	r3, #1
 800135c:	f04f 0302 	mov.w	r3, #2
 8001360:	d014      	beq.n	800138c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001362:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001364:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001368:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800136a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800136c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800136e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001370:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001378:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800137a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800137c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800137e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001380:	2301      	movs	r3, #1
 8001382:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001386:	2300      	movs	r3, #0
 8001388:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800138c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800138e:	bd30      	pop	{r4, r5, pc}

08001390 <HAL_TIMEx_CommutCallback>:
 8001390:	4770      	bx	lr

08001392 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001392:	4770      	bx	lr

08001394 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001394:	6803      	ldr	r3, [r0, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800139c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	f022 0201 	bic.w	r2, r2, #1
 80013a4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013a6:	2320      	movs	r3, #32
 80013a8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80013ac:	4770      	bx	lr
	...

080013b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013b0:	b538      	push	{r3, r4, r5, lr}
 80013b2:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	68c1      	ldr	r1, [r0, #12]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	2419      	movs	r4, #25
 80013bc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80013c0:	430a      	orrs	r2, r1
 80013c2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013c4:	6882      	ldr	r2, [r0, #8]
 80013c6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80013c8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013ca:	4302      	orrs	r2, r0
 80013cc:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80013ce:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80013d2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013d6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80013d8:	430a      	orrs	r2, r1
 80013da:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	69a9      	ldr	r1, [r5, #24]
 80013e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013e4:	430a      	orrs	r2, r1
 80013e6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <UART_SetConfig+0x70>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d114      	bne.n	8001418 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80013ee:	f7ff fc35 	bl	8000c5c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013f2:	4360      	muls	r0, r4
 80013f4:	686c      	ldr	r4, [r5, #4]
 80013f6:	2264      	movs	r2, #100	; 0x64
 80013f8:	00a4      	lsls	r4, r4, #2
 80013fa:	fbb0 f0f4 	udiv	r0, r0, r4
 80013fe:	fbb0 f4f2 	udiv	r4, r0, r2
 8001402:	fb02 0314 	mls	r3, r2, r4, r0
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	3332      	adds	r3, #50	; 0x32
 800140a:	fbb3 f3f2 	udiv	r3, r3, r2
 800140e:	6829      	ldr	r1, [r5, #0]
 8001410:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001414:	608b      	str	r3, [r1, #8]
 8001416:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001418:	f7ff fc10 	bl	8000c3c <HAL_RCC_GetPCLK1Freq>
 800141c:	e7e9      	b.n	80013f2 <UART_SetConfig+0x42>
 800141e:	bf00      	nop
 8001420:	40013800 	.word	0x40013800

08001424 <HAL_UART_Init>:
{
 8001424:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001426:	4604      	mov	r4, r0
 8001428:	b340      	cbz	r0, 800147c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800142a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800142e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001432:	b91b      	cbnz	r3, 800143c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001434:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001438:	f000 fc7e 	bl	8001d38 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800143c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800143e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001440:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001444:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001446:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001448:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800144c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800144e:	f7ff ffaf 	bl	80013b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001452:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001454:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800145c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001464:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800146c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800146e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001470:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001472:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001476:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800147a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800147c:	2001      	movs	r0, #1
}
 800147e:	bd10      	pop	{r4, pc}

08001480 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001480:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001484:	2b20      	cmp	r3, #32
 8001486:	d118      	bne.n	80014ba <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8001488:	b1a9      	cbz	r1, 80014b6 <HAL_UART_Transmit_IT+0x36>
 800148a:	b1a2      	cbz	r2, 80014b6 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 800148c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001490:	2b01      	cmp	r3, #1
 8001492:	d012      	beq.n	80014ba <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001494:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 8001496:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001498:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800149a:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 800149c:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800149e:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014a2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80014a6:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 80014a8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80014ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014b0:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80014b2:	4618      	mov	r0, r3
 80014b4:	4770      	bx	lr
      return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
 80014b8:	4770      	bx	lr
    return HAL_BUSY;
 80014ba:	2002      	movs	r0, #2
}
 80014bc:	4770      	bx	lr

080014be <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80014be:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80014c2:	2b20      	cmp	r3, #32
 80014c4:	d120      	bne.n	8001508 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80014c6:	b1e9      	cbz	r1, 8001504 <HAL_UART_Receive_IT+0x46>
 80014c8:	b1e2      	cbz	r2, 8001504 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80014ca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d01a      	beq.n	8001508 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80014d2:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80014d4:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014d6:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014d8:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014da:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014dc:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014e0:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80014e2:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014e4:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80014e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014ea:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80014ee:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014f0:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80014f2:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014f4:	f041 0101 	orr.w	r1, r1, #1
 80014f8:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80014fa:	68d1      	ldr	r1, [r2, #12]
 80014fc:	f041 0120 	orr.w	r1, r1, #32
 8001500:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001502:	4770      	bx	lr
      return HAL_ERROR;
 8001504:	2001      	movs	r0, #1
 8001506:	4770      	bx	lr
    return HAL_BUSY;
 8001508:	2002      	movs	r0, #2
}
 800150a:	4770      	bx	lr

0800150c <HAL_UART_TxCpltCallback>:
 800150c:	4770      	bx	lr

0800150e <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800150e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001512:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001514:	2b22      	cmp	r3, #34	; 0x22
 8001516:	d136      	bne.n	8001586 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001518:	6883      	ldr	r3, [r0, #8]
 800151a:	6901      	ldr	r1, [r0, #16]
 800151c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001520:	6802      	ldr	r2, [r0, #0]
 8001522:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001524:	d123      	bne.n	800156e <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001526:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001528:	b9e9      	cbnz	r1, 8001566 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800152a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800152e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001532:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001534:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001536:	3c01      	subs	r4, #1
 8001538:	b2a4      	uxth	r4, r4
 800153a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800153c:	b98c      	cbnz	r4, 8001562 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800153e:	6803      	ldr	r3, [r0, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	f022 0220 	bic.w	r2, r2, #32
 8001546:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800154e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001558:	2320      	movs	r3, #32
 800155a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800155e:	f000 f8bd 	bl	80016dc <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001562:	2000      	movs	r0, #0
}
 8001564:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	f823 2b01 	strh.w	r2, [r3], #1
 800156c:	e7e1      	b.n	8001532 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800156e:	b921      	cbnz	r1, 800157a <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001570:	1c59      	adds	r1, r3, #1
 8001572:	6852      	ldr	r2, [r2, #4]
 8001574:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e7dc      	b.n	8001534 <UART_Receive_IT+0x26>
 800157a:	6852      	ldr	r2, [r2, #4]
 800157c:	1c59      	adds	r1, r3, #1
 800157e:	6281      	str	r1, [r0, #40]	; 0x28
 8001580:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001584:	e7f7      	b.n	8001576 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001586:	2002      	movs	r0, #2
 8001588:	bd10      	pop	{r4, pc}

0800158a <HAL_UART_ErrorCallback>:
 800158a:	4770      	bx	lr

0800158c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800158c:	6803      	ldr	r3, [r0, #0]
{
 800158e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001590:	681a      	ldr	r2, [r3, #0]
{
 8001592:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001594:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001596:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001598:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800159a:	d107      	bne.n	80015ac <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800159c:	0696      	lsls	r6, r2, #26
 800159e:	d55a      	bpl.n	8001656 <HAL_UART_IRQHandler+0xca>
 80015a0:	068d      	lsls	r5, r1, #26
 80015a2:	d558      	bpl.n	8001656 <HAL_UART_IRQHandler+0xca>
}
 80015a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80015a8:	f7ff bfb1 	b.w	800150e <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80015ac:	f015 0501 	ands.w	r5, r5, #1
 80015b0:	d102      	bne.n	80015b8 <HAL_UART_IRQHandler+0x2c>
 80015b2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80015b6:	d04e      	beq.n	8001656 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80015b8:	07d3      	lsls	r3, r2, #31
 80015ba:	d505      	bpl.n	80015c8 <HAL_UART_IRQHandler+0x3c>
 80015bc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80015be:	bf42      	ittt	mi
 80015c0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80015c2:	f043 0301 	orrmi.w	r3, r3, #1
 80015c6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015c8:	0750      	lsls	r0, r2, #29
 80015ca:	d504      	bpl.n	80015d6 <HAL_UART_IRQHandler+0x4a>
 80015cc:	b11d      	cbz	r5, 80015d6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80015ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015d6:	0793      	lsls	r3, r2, #30
 80015d8:	d504      	bpl.n	80015e4 <HAL_UART_IRQHandler+0x58>
 80015da:	b11d      	cbz	r5, 80015e4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80015dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015e4:	0716      	lsls	r6, r2, #28
 80015e6:	d504      	bpl.n	80015f2 <HAL_UART_IRQHandler+0x66>
 80015e8:	b11d      	cbz	r5, 80015f2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80015ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d066      	beq.n	80016c6 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015f8:	0695      	lsls	r5, r2, #26
 80015fa:	d504      	bpl.n	8001606 <HAL_UART_IRQHandler+0x7a>
 80015fc:	0688      	lsls	r0, r1, #26
 80015fe:	d502      	bpl.n	8001606 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff ff84 	bl	800150e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001606:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001608:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800160a:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800160c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800160e:	0711      	lsls	r1, r2, #28
 8001610:	d402      	bmi.n	8001618 <HAL_UART_IRQHandler+0x8c>
 8001612:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001616:	d01a      	beq.n	800164e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001618:	f7ff febc 	bl	8001394 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	0652      	lsls	r2, r2, #25
 8001622:	d510      	bpl.n	8001646 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001624:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001626:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800162c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800162e:	b150      	cbz	r0, 8001646 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_UART_IRQHandler+0x13c>)
 8001632:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001634:	f7fe fec0 	bl	80003b8 <HAL_DMA_Abort_IT>
 8001638:	2800      	cmp	r0, #0
 800163a:	d044      	beq.n	80016c6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800163c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800163e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001642:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001644:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001646:	4620      	mov	r0, r4
 8001648:	f7ff ff9f 	bl	800158a <HAL_UART_ErrorCallback>
 800164c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800164e:	f7ff ff9c 	bl	800158a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001652:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001654:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001656:	0616      	lsls	r6, r2, #24
 8001658:	d527      	bpl.n	80016aa <HAL_UART_IRQHandler+0x11e>
 800165a:	060d      	lsls	r5, r1, #24
 800165c:	d525      	bpl.n	80016aa <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800165e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001662:	2a21      	cmp	r2, #33	; 0x21
 8001664:	d12f      	bne.n	80016c6 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001666:	68a2      	ldr	r2, [r4, #8]
 8001668:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800166c:	6a22      	ldr	r2, [r4, #32]
 800166e:	d117      	bne.n	80016a0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001670:	8811      	ldrh	r1, [r2, #0]
 8001672:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001676:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001678:	6921      	ldr	r1, [r4, #16]
 800167a:	b979      	cbnz	r1, 800169c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 800167c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800167e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001680:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001682:	3a01      	subs	r2, #1
 8001684:	b292      	uxth	r2, r2
 8001686:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001688:	b9ea      	cbnz	r2, 80016c6 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001690:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800169c:	3201      	adds	r2, #1
 800169e:	e7ee      	b.n	800167e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80016a0:	1c51      	adds	r1, r2, #1
 80016a2:	6221      	str	r1, [r4, #32]
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	e7ea      	b.n	8001680 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80016aa:	0650      	lsls	r0, r2, #25
 80016ac:	d50b      	bpl.n	80016c6 <HAL_UART_IRQHandler+0x13a>
 80016ae:	064a      	lsls	r2, r1, #25
 80016b0:	d509      	bpl.n	80016c6 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80016b2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80016b4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80016b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ba:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80016bc:	2320      	movs	r3, #32
 80016be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80016c2:	f7ff ff23 	bl	800150c <HAL_UART_TxCpltCallback>
 80016c6:	bd70      	pop	{r4, r5, r6, pc}
 80016c8:	080016cd 	.word	0x080016cd

080016cc <UART_DMAAbortOnError>:
{
 80016cc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80016ce:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80016d2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80016d4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80016d6:	f7ff ff58 	bl	800158a <HAL_UART_ErrorCallback>
 80016da:	bd08      	pop	{r3, pc}

080016dc <HAL_UART_RxCpltCallback>:
uint8_t serial1_in_buff[MAX_COMMAND_SIZE];
uint8_t serial1_in_buff_count = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){


	 if ( huart->Instance == USART2 ){
 80016dc:	6802      	ldr	r2, [r0, #0]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_UART_RxCpltCallback+0x28>)
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10e      	bne.n	8001702 <HAL_UART_RxCpltCallback+0x26>

			if(serial1_in_buff_count<MAX_COMMAND_SIZE){
 80016e4:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_UART_RxCpltCallback+0x2c>)
 80016e6:	7813      	ldrb	r3, [r2, #0]
 80016e8:	2bc7      	cmp	r3, #199	; 0xc7
 80016ea:	d805      	bhi.n	80016f8 <HAL_UART_RxCpltCallback+0x1c>

				mth_data[serial1_in_buff_count]=uart1_rx_buffer[0];
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <HAL_UART_RxCpltCallback+0x30>)
 80016ee:	7808      	ldrb	r0, [r1, #0]
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <HAL_UART_RxCpltCallback+0x34>)
 80016f2:	54c8      	strb	r0, [r1, r3]
				serial1_in_buff_count++;
 80016f4:	3301      	adds	r3, #1
 80016f6:	7013      	strb	r3, [r2, #0]



				}

			HAL_UART_Receive_IT(&huart2,uart1_rx_buffer,1);
 80016f8:	2201      	movs	r2, #1
 80016fa:	4904      	ldr	r1, [pc, #16]	; (800170c <HAL_UART_RxCpltCallback+0x30>)
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_UART_RxCpltCallback+0x38>)
 80016fe:	f7ff bede 	b.w	80014be <HAL_UART_Receive_IT>
 8001702:	4770      	bx	lr
 8001704:	40004400 	.word	0x40004400
 8001708:	200000dc 	.word	0x200000dc
 800170c:	2000015c 	.word	0x2000015c
 8001710:	20000078 	.word	0x20000078
 8001714:	20000bc8 	.word	0x20000bc8

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b530      	push	{r4, r5, lr}
 800171a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171c:	2228      	movs	r2, #40	; 0x28
 800171e:	2100      	movs	r1, #0
 8001720:	a806      	add	r0, sp, #24
 8001722:	f000 fc5d 	bl	8001fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001726:	2214      	movs	r2, #20
 8001728:	2100      	movs	r1, #0
 800172a:	a801      	add	r0, sp, #4
 800172c:	f000 fc58 	bl	8001fe0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001730:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001732:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001734:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001736:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001738:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800173e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001740:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001742:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001744:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001746:	f7ff f801 	bl	800074c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174a:	230f      	movs	r3, #15
 800174c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001750:	4629      	mov	r1, r5
 8001752:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001754:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001756:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001758:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800175c:	f7ff f9d0 	bl	8000b00 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001760:	b011      	add	sp, #68	; 0x44
 8001762:	bd30      	pop	{r4, r5, pc}

08001764 <CalcMTHChecksum>:

uint8_t CalcMTHChecksum(void){

	uint16_t mth_checksum=0;

	for(int i=0;i<98;i++)mth_checksum+=mth_data[i];
 8001764:	2200      	movs	r2, #0
	uint16_t mth_checksum=0;
 8001766:	4613      	mov	r3, r2
	for(int i=0;i<98;i++)mth_checksum+=mth_data[i];
 8001768:	4906      	ldr	r1, [pc, #24]	; (8001784 <CalcMTHChecksum+0x20>)
 800176a:	5c50      	ldrb	r0, [r2, r1]
 800176c:	3201      	adds	r2, #1
 800176e:	4403      	add	r3, r0
 8001770:	2a62      	cmp	r2, #98	; 0x62
 8001772:	b29b      	uxth	r3, r3
 8001774:	d1f9      	bne.n	800176a <CalcMTHChecksum+0x6>


  if(mth_checksum==(mth_data[98]|(mth_data[99]<<8))) return 1;
 8001776:	f8b1 0062 	ldrh.w	r0, [r1, #98]	; 0x62
  else return 0;

}
 800177a:	1ac3      	subs	r3, r0, r3
 800177c:	4258      	negs	r0, r3
 800177e:	4158      	adcs	r0, r3
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000078 	.word	0x20000078

08001788 <main>:
{
 8001788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f04f 0810 	mov.w	r8, #16
{
 8001790:	b093      	sub	sp, #76	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	4db8      	ldr	r5, [pc, #736]	; (8001a74 <main+0x2ec>)
  HAL_Init();
 8001794:	f7fe fcda 	bl	800014c <HAL_Init>
  SystemClock_Config();
 8001798:	f7ff ffbe 	bl	8001718 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	4642      	mov	r2, r8
 800179e:	2100      	movs	r1, #0
 80017a0:	a80b      	add	r0, sp, #44	; 0x2c
 80017a2:	f000 fc1d 	bl	8001fe0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	ea43 0308 	orr.w	r3, r3, r8
 80017ae:	61ab      	str	r3, [r5, #24]
 80017b0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80017b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	ea03 0308 	and.w	r3, r3, r8
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80017c0:	48ad      	ldr	r0, [pc, #692]	; (8001a78 <main+0x2f0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	61ab      	str	r3, [r5, #24]
 80017c8:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	9303      	str	r3, [sp, #12]
 80017d2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	61ab      	str	r3, [r5, #24]
 80017de:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2602      	movs	r6, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	9304      	str	r3, [sp, #16]
 80017e8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80017ea:	f7fe ffa3 	bl	8000734 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, s_Pin|UART1_SYNC_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2121      	movs	r1, #33	; 0x21
 80017f2:	48a2      	ldr	r0, [pc, #648]	; (8001a7c <main+0x2f4>)
 80017f4:	f7fe ff9e 	bl	8000734 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 80017f8:	2200      	movs	r2, #0
 80017fa:	f24f 0140 	movw	r1, #61504	; 0xf040
 80017fe:	48a0      	ldr	r0, [pc, #640]	; (8001a80 <main+0x2f8>)
 8001800:	f7fe ff98 	bl	8000734 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001808:	a90b      	add	r1, sp, #44	; 0x2c
 800180a:	489b      	ldr	r0, [pc, #620]	; (8001a78 <main+0x2f0>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800180c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001814:	f7fe feac 	bl	8000570 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = s_Pin|UART1_SYNC_Pin;
 8001818:	2321      	movs	r3, #33	; 0x21
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	a90b      	add	r1, sp, #44	; 0x2c
 800181c:	4897      	ldr	r0, [pc, #604]	; (8001a7c <main+0x2f4>)
  GPIO_InitStruct.Pin = s_Pin|UART1_SYNC_Pin;
 800181e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f7fe fea3 	bl	8000570 <HAL_GPIO_Init>
  HAL_GPIO_Init(z_GPIO_Port, &GPIO_InitStruct);
 800182a:	a90b      	add	r1, sp, #44	; 0x2c
 800182c:	4893      	ldr	r0, [pc, #588]	; (8001a7c <main+0x2f4>)
  GPIO_InitStruct.Pin = z_Pin;
 800182e:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(z_GPIO_Port, &GPIO_InitStruct);
 8001834:	f7fe fe9c 	bl	8000570 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8001838:	f24f 0340 	movw	r3, #61504	; 0xf040
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	a90b      	add	r1, sp, #44	; 0x2c
 800183e:	4890      	ldr	r0, [pc, #576]	; (8001a80 <main+0x2f8>)
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8001840:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f7fe fe92 	bl	8000570 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FWD_IN_Pin|REV_IN_Pin|START_IN_Pin;
 800184c:	f44f 7360 	mov.w	r3, #896	; 0x380
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001850:	f04f 0a0c 	mov.w	sl, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	a90b      	add	r1, sp, #44	; 0x2c
 8001856:	488a      	ldr	r0, [pc, #552]	; (8001a80 <main+0x2f8>)
  GPIO_InitStruct.Pin = FWD_IN_Pin|REV_IN_Pin|START_IN_Pin;
 8001858:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185a:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f7fe fe87 	bl	8000570 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001862:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001864:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001866:	433b      	orrs	r3, r7
 8001868:	616b      	str	r3, [r5, #20]
 800186a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800186c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800186e:	403b      	ands	r3, r7
 8001870:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001872:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001874:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001876:	f7fe fd2d 	bl	80002d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800187a:	200c      	movs	r0, #12
 800187c:	f7fe fd5e 	bl	800033c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001880:	4622      	mov	r2, r4
 8001882:	4621      	mov	r1, r4
 8001884:	200d      	movs	r0, #13
 8001886:	f7fe fd25 	bl	80002d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800188a:	200d      	movs	r0, #13
 800188c:	f7fe fd56 	bl	800033c <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 500000;
 8001890:	f8df b230 	ldr.w	fp, [pc, #560]	; 8001ac4 <main+0x33c>
  huart1.Instance = USART1;
 8001894:	487b      	ldr	r0, [pc, #492]	; (8001a84 <main+0x2fc>)
  huart1.Init.BaudRate = 500000;
 8001896:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <main+0x300>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001898:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 500000;
 800189a:	e880 0808 	stmia.w	r0, {r3, fp}
  huart1.Init.StopBits = UART_STOPBITS_1;
 800189e:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018a0:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a2:	f8c0 a014 	str.w	sl, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018aa:	f7ff fdbb 	bl	8001424 <HAL_UART_Init>
  hcan.Instance = CAN1;
 80018ae:	4877      	ldr	r0, [pc, #476]	; (8001a8c <main+0x304>)
 80018b0:	4b77      	ldr	r3, [pc, #476]	; (8001a90 <main+0x308>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80018b2:	6084      	str	r4, [r0, #8]
  hcan.Init.Prescaler = 16;
 80018b4:	e880 0108 	stmia.w	r0, {r3, r8}
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018b8:	60c4      	str	r4, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80018ba:	6104      	str	r4, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018bc:	6144      	str	r4, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80018be:	7604      	strb	r4, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80018c0:	7644      	strb	r4, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80018c2:	7684      	strb	r4, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80018c4:	76c4      	strb	r4, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80018c6:	7704      	strb	r4, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80018c8:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80018ca:	f7fe fc75 	bl	80001b8 <HAL_CAN_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	4642      	mov	r2, r8
 80018d0:	4621      	mov	r1, r4
 80018d2:	a80b      	add	r0, sp, #44	; 0x2c
 80018d4:	f000 fb84 	bl	8001fe0 <memset>
  htim3.Init.Prescaler = 20000;
 80018d8:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim3.Instance = TIM3;
 80018dc:	4d6d      	ldr	r5, [pc, #436]	; (8001a94 <main+0x30c>)
  htim3.Init.Prescaler = 20000;
 80018de:	4a6e      	ldr	r2, [pc, #440]	; (8001a98 <main+0x310>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e0:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  htim3.Init.Prescaler = 20000;
 80018e4:	e885 000c 	stmia.w	r5, {r2, r3}
  htim3.Init.Period = 1000;
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ec:	4628      	mov	r0, r5
  htim3.Init.Period = 1000;
 80018ee:	60eb      	str	r3, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f6:	9407      	str	r4, [sp, #28]
 80018f8:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018fa:	f7ff fb7d 	bl	8000ff8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018fe:	a90b      	add	r1, sp, #44	; 0x2c
 8001900:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001902:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001906:	f7ff fc67 	bl	80011d8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800190a:	2108      	movs	r1, #8
 800190c:	4628      	mov	r0, r5
  huart2.Instance = USART2;
 800190e:	4e63      	ldr	r6, [pc, #396]	; (8001a9c <main+0x314>)
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001910:	f7ff fba6 	bl	8001060 <HAL_TIM_OnePulse_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001914:	a907      	add	r1, sp, #28
 8001916:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001918:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800191c:	f7ff fd1a 	bl	8001354 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 8001920:	4b5f      	ldr	r3, [pc, #380]	; (8001aa0 <main+0x318>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4630      	mov	r0, r6
  huart2.Init.BaudRate = 500000;
 8001924:	e886 0808 	stmia.w	r6, {r3, fp}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001928:	60b4      	str	r4, [r6, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800192a:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800192c:	6134      	str	r4, [r6, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800192e:	f8c6 a014 	str.w	sl, [r6, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001936:	f7ff fd75 	bl	8001424 <HAL_UART_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800193e:	4859      	ldr	r0, [pc, #356]	; (8001aa4 <main+0x31c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001940:	4959      	ldr	r1, [pc, #356]	; (8001aa8 <main+0x320>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001942:	6147      	str	r7, [r0, #20]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001944:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194c:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800194e:	2318      	movs	r3, #24
 8001950:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	6203      	str	r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 8001956:	230a      	movs	r3, #10
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001958:	6084      	str	r4, [r0, #8]
  hspi1.Init.CRCPolynomial = 10;
 800195a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800195c:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800195e:	6104      	str	r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001960:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001962:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001964:	f7ff f9a8 	bl	8000cb8 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001968:	4642      	mov	r2, r8
 800196a:	4621      	mov	r1, r4
 800196c:	a807      	add	r0, sp, #28
 800196e:	f000 fb37 	bl	8001fe0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001972:	221c      	movs	r2, #28
 8001974:	4621      	mov	r1, r4
 8001976:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	9405      	str	r4, [sp, #20]
 800197a:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197c:	f000 fb30 	bl	8001fe0 <memset>
  htim2.Instance = TIM2;
 8001980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001984:	4d49      	ldr	r5, [pc, #292]	; (8001aac <main+0x324>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001986:	f04f 0820 	mov.w	r8, #32
  htim2.Init.Prescaler = 0;
 800198a:	e885 0018 	stmia.w	r5, {r3, r4}
  htim2.Init.Period = 63;
 800198e:	233f      	movs	r3, #63	; 0x3f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001990:	4628      	mov	r0, r5
  htim2.Init.Period = 63;
 8001992:	60eb      	str	r3, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199a:	f7ff fb2d 	bl	8000ff8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800199e:	a907      	add	r1, sp, #28
 80019a0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a2:	f8cd 901c 	str.w	r9, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a6:	f7ff fc17 	bl	80011d8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019aa:	4628      	mov	r0, r5
 80019ac:	f7ff fb3e 	bl	800102c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b0:	a905      	add	r1, sp, #20
 80019b2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019b4:	f8cd 8014 	str.w	r8, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b8:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ba:	f7ff fccb 	bl	8001354 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019be:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c0:	2208      	movs	r2, #8
 80019c2:	a90b      	add	r1, sp, #44	; 0x2c
 80019c4:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c6:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 32;
 80019c8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ce:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019d0:	f7ff fb96 	bl	8001100 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80019d4:	4628      	mov	r0, r5
 80019d6:	f000 f97f 	bl	8001cd8 <HAL_TIM_MspPostInit>
  HAL_UART_Receive_IT(&huart2,uart1_rx_buffer,1);
 80019da:	463a      	mov	r2, r7
 80019dc:	4934      	ldr	r1, [pc, #208]	; (8001ab0 <main+0x328>)
 80019de:	4630      	mov	r0, r6
 80019e0:	f7ff fd6d 	bl	80014be <HAL_UART_Receive_IT>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 80019e4:	682a      	ldr	r2, [r5, #0]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019e6:	2108      	movs	r1, #8
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 80019e8:	69d3      	ldr	r3, [r2, #28]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019ea:	4628      	mov	r0, r5
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	61d3      	str	r3, [r2, #28]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019f2:	f7ff fc93 	bl	800131c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,1);
 80019f6:	463a      	mov	r2, r7
 80019f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019fc:	4820      	ldr	r0, [pc, #128]	; (8001a80 <main+0x2f8>)
 80019fe:	f7fe fe99 	bl	8000734 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001a02:	20c8      	movs	r0, #200	; 0xc8
 8001a04:	f7fe fbc6 	bl	8000194 <HAL_Delay>
	  serial1_in_buff_count=0;
 8001a08:	46a0      	mov	r8, r4
 8001a0a:	4f2a      	ldr	r7, [pc, #168]	; (8001ab4 <main+0x32c>)
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001a0c:	4e1c      	ldr	r6, [pc, #112]	; (8001a80 <main+0x2f8>)
 8001a0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a12:	481b      	ldr	r0, [pc, #108]	; (8001a80 <main+0x2f8>)
	  serial1_in_buff_count=0;
 8001a14:	f887 8000 	strb.w	r8, [r7]
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001a18:	f7fe fe91 	bl	800073e <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7fe fbb9 	bl	8000194 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a26:	4816      	ldr	r0, [pc, #88]	; (8001a80 <main+0x2f8>)
 8001a28:	f7fe fe89 	bl	800073e <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit_IT(&huart2, htm_data_setup, 80);
 8001a2c:	2250      	movs	r2, #80	; 0x50
 8001a2e:	4922      	ldr	r1, [pc, #136]	; (8001ab8 <main+0x330>)
 8001a30:	481a      	ldr	r0, [pc, #104]	; (8001a9c <main+0x314>)
 8001a32:	f7ff fd25 	bl	8001480 <HAL_UART_Transmit_IT>
	  HAL_Delay(4);
 8001a36:	2004      	movs	r0, #4
 8001a38:	f7fe fbac 	bl	8000194 <HAL_Delay>
	  if(CalcMTHChecksum()==0){
 8001a3c:	f7ff fe92 	bl	8001764 <CalcMTHChecksum>
 8001a40:	b928      	cbnz	r0, 8001a4e <main+0x2c6>
	  	  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1 );
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a48:	4630      	mov	r0, r6
 8001a4a:	f7fe fe73 	bl	8000734 <HAL_GPIO_WritePin>
	  mth_data[98]=0;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <main+0x334>)
	  if(counter>100){
 8001a50:	4d1b      	ldr	r5, [pc, #108]	; (8001ac0 <main+0x338>)
	  mth_data[98]=0;
 8001a52:	f883 4062 	strb.w	r4, [r3, #98]	; 0x62
	  mth_data[99]=0;
 8001a56:	f883 4063 	strb.w	r4, [r3, #99]	; 0x63
	  if(counter>100){
 8001a5a:	882b      	ldrh	r3, [r5, #0]
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d906      	bls.n	8001a6e <main+0x2e6>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin );
 8001a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a64:	4630      	mov	r0, r6
 8001a66:	f7fe fe6a 	bl	800073e <HAL_GPIO_TogglePin>
		  counter = 0;
 8001a6a:	802c      	strh	r4, [r5, #0]
 8001a6c:	e7cf      	b.n	8001a0e <main+0x286>
		  counter++;
 8001a6e:	3301      	adds	r3, #1
 8001a70:	802b      	strh	r3, [r5, #0]
 8001a72:	e7cc      	b.n	8001a0e <main+0x286>
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40011000 	.word	0x40011000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	20000224 	.word	0x20000224
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	200000e8 	.word	0x200000e8
 8001a90:	40006400 	.word	0x40006400
 8001a94:	2000011c 	.word	0x2000011c
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	20000bc8 	.word	0x20000bc8
 8001aa0:	40004400 	.word	0x40004400
 8001aa4:	20000a68 	.word	0x20000a68
 8001aa8:	40013000 	.word	0x40013000
 8001aac:	20000ac0 	.word	0x20000ac0
 8001ab0:	2000015c 	.word	0x2000015c
 8001ab4:	200000dc 	.word	0x200000dc
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000078 	.word	0x20000078
 8001ac0:	20000264 	.word	0x20000264
 8001ac4:	0007a120 	.word	0x0007a120

08001ac8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ac8:	6802      	ldr	r2, [r0, #0]
 8001aca:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d101      	bne.n	8001ad4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001ad0:	f7fe bb4e 	b.w	8000170 <HAL_IncTick>
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40012c00 	.word	0x40012c00

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_MspInit+0x3c>)
{
 8001ae2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	619a      	str	r2, [r3, #24]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	f002 0201 	and.w	r2, r2, #1
 8001af2:	9200      	str	r2, [sp, #0]
 8001af4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001afc:	61da      	str	r2, [r3, #28]
 8001afe:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b0a:	6853      	ldr	r3, [r2, #4]
 8001b0c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	b002      	add	sp, #8
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000

08001b24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b24:	b510      	push	{r4, lr}
 8001b26:	4604      	mov	r4, r0
 8001b28:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	a802      	add	r0, sp, #8
 8001b30:	f000 fa56 	bl	8001fe0 <memset>
  if(hcan->Instance==CAN1)
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_CAN_MspInit+0x68>)
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d125      	bne.n	8001b88 <HAL_CAN_MspInit+0x64>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b3c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001b40:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b44:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b48:	61da      	str	r2, [r3, #28]
 8001b4a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	4810      	ldr	r0, [pc, #64]	; (8001b90 <HAL_CAN_MspInit+0x6c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b4e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001b52:	9200      	str	r2, [sp, #0]
 8001b54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	f042 0204 	orr.w	r2, r2, #4
 8001b5c:	619a      	str	r2, [r3, #24]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b6c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f7fe fcff 	bl	8000570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	a902      	add	r1, sp, #8
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <HAL_CAN_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b82:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f7fe fcf4 	bl	8000570 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001b88:	b006      	add	sp, #24
 8001b8a:	bd10      	pop	{r4, pc}
 8001b8c:	40006400 	.word	0x40006400
 8001b90:	40010800 	.word	0x40010800

08001b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b94:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	2410      	movs	r4, #16
{
 8001b98:	4606      	mov	r6, r0
 8001b9a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	a802      	add	r0, sp, #8
 8001ba2:	f000 fa1d 	bl	8001fe0 <memset>
  if(hspi->Instance==SPI1)
 8001ba6:	6832      	ldr	r2, [r6, #0]
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_SPI_MspInit+0xcc>)
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d155      	bne.n	8001c5a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bae:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001bb2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2500      	movs	r5, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bba:	619a      	str	r2, [r3, #24]
 8001bbc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bc0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	4826      	ldr	r0, [pc, #152]	; (8001c64 <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	f042 0208 	orr.w	r2, r2, #8
 8001bd0:	619a      	str	r2, [r3, #24]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001bdc:	2328      	movs	r3, #40	; 0x28
 8001bde:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f7fe fcc2 	bl	8000570 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	481d      	ldr	r0, [pc, #116]	; (8001c64 <HAL_SPI_MspInit+0xd0>)
 8001bee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bf0:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f7fe fcbb 	bl	8000570 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_SPI_MspInit+0xd4>)

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001bfc:	4c1b      	ldr	r4, [pc, #108]	; (8001c6c <HAL_SPI_MspInit+0xd8>)
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001bfe:	6853      	ldr	r3, [r2, #4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c00:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001c02:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6053      	str	r3, [r2, #4]
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_SPI_MspInit+0xdc>)
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0e:	60a5      	str	r5, [r4, #8]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c10:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c14:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c16:	6125      	str	r5, [r4, #16]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c18:	60e3      	str	r3, [r4, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1a:	6165      	str	r5, [r4, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001c1c:	61a5      	str	r5, [r4, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1e:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c20:	f7fe fb9a 	bl	8000358 <HAL_DMA_Init>
 8001c24:	b108      	cbz	r0, 8001c2a <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 8001c26:	f7ff ff59 	bl	8001adc <Error_Handler>

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c2a:	f04f 0c10 	mov.w	ip, #16
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_SPI_MspInit+0xe0>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001c30:	64f4      	str	r4, [r6, #76]	; 0x4c
 8001c32:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001c34:	4c10      	ldr	r4, [pc, #64]	; (8001c78 <HAL_SPI_MspInit+0xe4>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c36:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c38:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3c:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c3e:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c40:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c42:	60e2      	str	r2, [r4, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c44:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c46:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c48:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c4a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c4c:	f7fe fb84 	bl	8000358 <HAL_DMA_Init>
 8001c50:	b108      	cbz	r0, 8001c56 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8001c52:	f7ff ff43 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c56:	64b4      	str	r4, [r6, #72]	; 0x48
 8001c58:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c5a:	b006      	add	sp, #24
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
 8001c5e:	bf00      	nop
 8001c60:	40013000 	.word	0x40013000
 8001c64:	40010c00 	.word	0x40010c00
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	20000c08 	.word	0x20000c08
 8001c70:	4002001c 	.word	0x4002001c
 8001c74:	40020030 	.word	0x40020030
 8001c78:	20000c50 	.word	0x20000c50

08001c7c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001c7c:	6803      	ldr	r3, [r0, #0]
{
 8001c7e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c84:	d115      	bne.n	8001cb2 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c86:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c8a:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c8c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c96:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c98:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ca2:	f7fe fb17 	bl	80002d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca6:	201c      	movs	r0, #28
 8001ca8:	f7fe fb48 	bl	800033c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cac:	b003      	add	sp, #12
 8001cae:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8001cb2:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <HAL_TIM_Base_MspInit+0x54>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d1f9      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_TIM_Base_MspInit+0x58>)
 8001cba:	69da      	ldr	r2, [r3, #28]
 8001cbc:	f042 0202 	orr.w	r2, r2, #2
 8001cc0:	61da      	str	r2, [r3, #28]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	9b01      	ldr	r3, [sp, #4]
}
 8001ccc:	e7ee      	b.n	8001cac <HAL_TIM_Base_MspInit+0x30>
 8001cce:	bf00      	nop
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	4604      	mov	r4, r0
 8001cdc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cde:	2210      	movs	r2, #16
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	a802      	add	r0, sp, #8
 8001ce4:	f000 f97c 	bl	8001fe0 <memset>
  if(htim->Instance==TIM2)
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cee:	d11d      	bne.n	8001d2c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001cf4:	699a      	ldr	r2, [r3, #24]
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	f042 0208 	orr.w	r2, r2, #8
 8001cfc:	619a      	str	r2, [r3, #24]
 8001cfe:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	480b      	ldr	r0, [pc, #44]	; (8001d30 <HAL_TIM_MspPostInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f7fe fc2b 	bl	8000570 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001d1a:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <HAL_TIM_MspPostInit+0x5c>)
 8001d1c:	6853      	ldr	r3, [r2, #4]
 8001d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d22:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d2c:	b006      	add	sp, #24
 8001d2e:	bd10      	pop	{r4, pc}
 8001d30:	40010c00 	.word	0x40010c00
 8001d34:	40010000 	.word	0x40010000

08001d38 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	2210      	movs	r2, #16
{
 8001d3a:	b510      	push	{r4, lr}
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	eb0d 0002 	add.w	r0, sp, r2
 8001d44:	2100      	movs	r1, #0
 8001d46:	f000 f94b 	bl	8001fe0 <memset>
  if(huart->Instance==USART1)
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <HAL_UART_MspInit+0xe0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d131      	bne.n	8001db6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d52:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_UART_MspInit+0xe4>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d56:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	4831      	ldr	r0, [pc, #196]	; (8001e20 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d62:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d64:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d68:	9200      	str	r2, [sp, #0]
 8001d6a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	f042 0204 	orr.w	r2, r2, #4
 8001d72:	619a      	str	r2, [r3, #24]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d82:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f7fe fbf0 	bl	8000570 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	a904      	add	r1, sp, #16
 8001d96:	4822      	ldr	r0, [pc, #136]	; (8001e20 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d98:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f7fe fbe7 	bl	8000570 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001da2:	2025      	movs	r0, #37	; 0x25
 8001da4:	4622      	mov	r2, r4
 8001da6:	4621      	mov	r1, r4
 8001da8:	f7fe fa94 	bl	80002d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dac:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dae:	f7fe fac5 	bl	800033c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001db2:	b008      	add	sp, #32
 8001db4:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8001db6:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <HAL_UART_MspInit+0xec>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d1fa      	bne.n	8001db2 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	4817      	ldr	r0, [pc, #92]	; (8001e20 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dc8:	61da      	str	r2, [r3, #28]
 8001dca:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dce:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001dd2:	9202      	str	r2, [sp, #8]
 8001dd4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	f042 0204 	orr.w	r2, r2, #4
 8001ddc:	619a      	str	r2, [r3, #24]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	9303      	str	r3, [sp, #12]
 8001de6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de8:	2304      	movs	r3, #4
 8001dea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f7fe fbbc 	bl	8000570 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001df8:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	a904      	add	r1, sp, #16
 8001dfc:	4808      	ldr	r0, [pc, #32]	; (8001e20 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dfe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e00:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f7fe fbb4 	bl	8000570 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e08:	2026      	movs	r0, #38	; 0x26
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	f7fe fa61 	bl	80002d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e12:	2026      	movs	r0, #38	; 0x26
 8001e14:	e7cb      	b.n	8001dae <HAL_UART_MspInit+0x76>
 8001e16:	bf00      	nop
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010800 	.word	0x40010800
 8001e24:	40004400 	.word	0x40004400

08001e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001e2a:	4601      	mov	r1, r0
{
 8001e2c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2019      	movs	r0, #25
 8001e32:	f7fe fa4f 	bl	80002d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001e36:	2019      	movs	r0, #25
 8001e38:	f7fe fa80 	bl	800033c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e3e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e40:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e42:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e48:	619a      	str	r2, [r3, #24]
 8001e4a:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e4c:	4c11      	ldr	r4, [pc, #68]	; (8001e94 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e56:	f7fe ff11 	bl	8000c7c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e5a:	f7fe feff 	bl	8000c5c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_InitTick+0x70>)
 8001e60:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001e62:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001e66:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_InitTick+0x74>)
 8001e6a:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001e6e:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e70:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e72:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e74:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001e76:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e7a:	f7ff f8bd 	bl	8000ff8 <HAL_TIM_Base_Init>
 8001e7e:	b920      	cbnz	r0, 8001e8a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7fe ffc9 	bl	8000e18 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001e86:	b008      	add	sp, #32
 8001e88:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e7fb      	b.n	8001e86 <HAL_InitTick+0x5e>
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	20000e4c 	.word	0x20000e4c
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	000f4240 	.word	0x000f4240

08001ea0 <NMI_Handler>:
 8001ea0:	4770      	bx	lr

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	e7fe      	b.n	8001ea2 <HardFault_Handler>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	e7fe      	b.n	8001ea4 <MemManage_Handler>

08001ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea6:	e7fe      	b.n	8001ea6 <BusFault_Handler>

08001ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea8:	e7fe      	b.n	8001ea8 <UsageFault_Handler>

08001eaa <SVC_Handler>:
 8001eaa:	4770      	bx	lr

08001eac <DebugMon_Handler>:
 8001eac:	4770      	bx	lr

08001eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eae:	4770      	bx	lr

08001eb0 <DMA1_Channel2_IRQHandler>:
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	dma_complete=1;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <DMA1_Channel2_IRQHandler+0xc>)
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <DMA1_Channel2_IRQHandler+0x10>)
	dma_complete=1;
 8001eb6:	701a      	strb	r2, [r3, #0]
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001eb8:	f7fe bac6 	b.w	8000448 <HAL_DMA_IRQHandler>
 8001ebc:	20000c4c 	.word	0x20000c4c
 8001ec0:	20000c08 	.word	0x20000c08

08001ec4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ec4:	4801      	ldr	r0, [pc, #4]	; (8001ecc <DMA1_Channel3_IRQHandler+0x8>)
 8001ec6:	f7fe babf 	b.w	8000448 <HAL_DMA_IRQHandler>
 8001eca:	bf00      	nop
 8001ecc:	20000c50 	.word	0x20000c50

08001ed0 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ed0:	4801      	ldr	r0, [pc, #4]	; (8001ed8 <TIM1_UP_IRQHandler+0x8>)
 8001ed2:	f7fe bfb7 	b.w	8000e44 <HAL_TIM_IRQHandler>
 8001ed6:	bf00      	nop
 8001ed8:	20000e4c 	.word	0x20000e4c

08001edc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001edc:	4801      	ldr	r0, [pc, #4]	; (8001ee4 <TIM2_IRQHandler+0x8>)
 8001ede:	f7fe bfb1 	b.w	8000e44 <HAL_TIM_IRQHandler>
 8001ee2:	bf00      	nop
 8001ee4:	20000ac0 	.word	0x20000ac0

08001ee8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ee8:	4801      	ldr	r0, [pc, #4]	; (8001ef0 <USART1_IRQHandler+0x8>)
 8001eea:	f7ff bb4f 	b.w	800158c <HAL_UART_IRQHandler>
 8001eee:	bf00      	nop
 8001ef0:	20000224 	.word	0x20000224

08001ef4 <USART2_IRQHandler>:
				}
		//USART_ClearITPendingBit(USART2, USART_IT_TXE);
	}

#endif
	 HAL_UART_IRQHandler(&huart2);
 8001ef4:	4801      	ldr	r0, [pc, #4]	; (8001efc <USART2_IRQHandler+0x8>)
 8001ef6:	f7ff bb49 	b.w	800158c <HAL_UART_IRQHandler>
 8001efa:	bf00      	nop
 8001efc:	20000bc8 	.word	0x20000bc8

08001f00 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <SystemInit+0x40>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <SystemInit+0x44>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f24:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001f2c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f2e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f32:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <SystemInit+0x48>)
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	f8ff0000 	.word	0xf8ff0000
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f4e:	e003      	b.n	8001f58 <LoopCopyDataInit>

08001f50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f56:	3104      	adds	r1, #4

08001f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f58:	480a      	ldr	r0, [pc, #40]	; (8001f84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f60:	d3f6      	bcc.n	8001f50 <CopyDataInit>
  ldr r2, =_sbss
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f64:	e002      	b.n	8001f6c <LoopFillZerobss>

08001f66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f68:	f842 3b04 	str.w	r3, [r2], #4

08001f6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f70:	d3f9      	bcc.n	8001f66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f72:	f7ff ffc5 	bl	8001f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f76:	f000 f80f 	bl	8001f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f7a:	f7ff fc05 	bl	8001788 <main>
  bx lr
 8001f7e:	4770      	bx	lr
  ldr r3, =_sidata
 8001f80:	08002038 	.word	0x08002038
  ldr r0, =_sdata
 8001f84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f88:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8001f8c:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8001f90:	20000e8c 	.word	0x20000e8c

08001f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC1_2_IRQHandler>
	...

08001f98 <__libc_init_array>:
 8001f98:	b570      	push	{r4, r5, r6, lr}
 8001f9a:	2500      	movs	r5, #0
 8001f9c:	4e0c      	ldr	r6, [pc, #48]	; (8001fd0 <__libc_init_array+0x38>)
 8001f9e:	4c0d      	ldr	r4, [pc, #52]	; (8001fd4 <__libc_init_array+0x3c>)
 8001fa0:	1ba4      	subs	r4, r4, r6
 8001fa2:	10a4      	asrs	r4, r4, #2
 8001fa4:	42a5      	cmp	r5, r4
 8001fa6:	d109      	bne.n	8001fbc <__libc_init_array+0x24>
 8001fa8:	f000 f822 	bl	8001ff0 <_init>
 8001fac:	2500      	movs	r5, #0
 8001fae:	4e0a      	ldr	r6, [pc, #40]	; (8001fd8 <__libc_init_array+0x40>)
 8001fb0:	4c0a      	ldr	r4, [pc, #40]	; (8001fdc <__libc_init_array+0x44>)
 8001fb2:	1ba4      	subs	r4, r4, r6
 8001fb4:	10a4      	asrs	r4, r4, #2
 8001fb6:	42a5      	cmp	r5, r4
 8001fb8:	d105      	bne.n	8001fc6 <__libc_init_array+0x2e>
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
 8001fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fc0:	4798      	blx	r3
 8001fc2:	3501      	adds	r5, #1
 8001fc4:	e7ee      	b.n	8001fa4 <__libc_init_array+0xc>
 8001fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fca:	4798      	blx	r3
 8001fcc:	3501      	adds	r5, #1
 8001fce:	e7f2      	b.n	8001fb6 <__libc_init_array+0x1e>
 8001fd0:	08002030 	.word	0x08002030
 8001fd4:	08002030 	.word	0x08002030
 8001fd8:	08002030 	.word	0x08002030
 8001fdc:	08002034 	.word	0x08002034

08001fe0 <memset>:
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4402      	add	r2, r0
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d100      	bne.n	8001fea <memset+0xa>
 8001fe8:	4770      	bx	lr
 8001fea:	f803 1b01 	strb.w	r1, [r3], #1
 8001fee:	e7f9      	b.n	8001fe4 <memset+0x4>

08001ff0 <_init>:
 8001ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff2:	bf00      	nop
 8001ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff6:	bc08      	pop	{r3}
 8001ff8:	469e      	mov	lr, r3
 8001ffa:	4770      	bx	lr

08001ffc <_fini>:
 8001ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffe:	bf00      	nop
 8002000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002002:	bc08      	pop	{r3}
 8002004:	469e      	mov	lr, r3
 8002006:	4770      	bx	lr
