
ToyotaHybridx1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080026d4  080026d4  000126d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b0  20000000  08002704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ed0  200000b0  080027b4  000200b0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000f80  080027b4  00020f80  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012d4b  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bf5  00000000  00000000  00032e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000951c  00000000  00000000  00035a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ce0  00000000  00000000  0003ef38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011b0  00000000  00000000  0003fc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006bbc  00000000  00000000  00040dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004da9  00000000  00000000  00047984  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004c72d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002738  00000000  00000000  0004c7ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080026bc 	.word	0x080026bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	080026bc 	.word	0x080026bc

0800014c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800014c:	4a07      	ldr	r2, [pc, #28]	; (800016c <HAL_Init+0x20>)
{
 800014e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000152:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	f043 0310 	orr.w	r3, r3, #16
 8000158:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015a:	f000 fa6d 	bl	8000638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800015e:	2000      	movs	r0, #0
 8000160:	f002 f9c8 	bl	80024f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000164:	f001 fff4 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000168:	2000      	movs	r0, #0
 800016a:	bd08      	pop	{r3, pc}
 800016c:	40022000 	.word	0x40022000

08000170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000170:	4a03      	ldr	r2, [pc, #12]	; (8000180 <HAL_IncTick+0x10>)
 8000172:	4b04      	ldr	r3, [pc, #16]	; (8000184 <HAL_IncTick+0x14>)
 8000174:	6811      	ldr	r1, [r2, #0]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	440b      	add	r3, r1
 800017a:	6013      	str	r3, [r2, #0]
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	200001a4 	.word	0x200001a4
 8000184:	20000000 	.word	0x20000000

08000188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000188:	4b01      	ldr	r3, [pc, #4]	; (8000190 <HAL_GetTick+0x8>)
 800018a:	6818      	ldr	r0, [r3, #0]
}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	200001a4 	.word	0x200001a4

08000194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000194:	b538      	push	{r3, r4, r5, lr}
 8000196:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000198:	f7ff fff6 	bl	8000188 <HAL_GetTick>
 800019c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800019e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001a0:	bf1e      	ittt	ne
 80001a2:	4b04      	ldrne	r3, [pc, #16]	; (80001b4 <HAL_Delay+0x20>)
 80001a4:	781b      	ldrbne	r3, [r3, #0]
 80001a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001a8:	f7ff ffee 	bl	8000188 <HAL_GetTick>
 80001ac:	1b40      	subs	r0, r0, r5
 80001ae:	4284      	cmp	r4, r0
 80001b0:	d8fa      	bhi.n	80001a8 <HAL_Delay+0x14>
  {
  }
}
 80001b2:	bd38      	pop	{r3, r4, r5, pc}
 80001b4:	20000000 	.word	0x20000000

080001b8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80001b8:	6803      	ldr	r3, [r0, #0]
 80001ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80001bc:	4770      	bx	lr
	...

080001c0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001c0:	2300      	movs	r3, #0
{ 
 80001c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001c4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001c6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d074      	beq.n	80002b8 <HAL_ADC_ConfigChannel+0xf8>
 80001ce:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001d0:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001d2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80001d6:	2d06      	cmp	r5, #6
 80001d8:	6802      	ldr	r2, [r0, #0]
 80001da:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80001de:	680c      	ldr	r4, [r1, #0]
 80001e0:	d825      	bhi.n	800022e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80001e2:	442b      	add	r3, r5
 80001e4:	251f      	movs	r5, #31
 80001e6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80001e8:	3b05      	subs	r3, #5
 80001ea:	409d      	lsls	r5, r3
 80001ec:	ea26 0505 	bic.w	r5, r6, r5
 80001f0:	fa04 f303 	lsl.w	r3, r4, r3
 80001f4:	432b      	orrs	r3, r5
 80001f6:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80001f8:	2c09      	cmp	r4, #9
 80001fa:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80001fe:	688d      	ldr	r5, [r1, #8]
 8000200:	d92f      	bls.n	8000262 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000202:	2607      	movs	r6, #7
 8000204:	4423      	add	r3, r4
 8000206:	68d1      	ldr	r1, [r2, #12]
 8000208:	3b1e      	subs	r3, #30
 800020a:	409e      	lsls	r6, r3
 800020c:	ea21 0106 	bic.w	r1, r1, r6
 8000210:	fa05 f303 	lsl.w	r3, r5, r3
 8000214:	430b      	orrs	r3, r1
 8000216:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000218:	f1a4 0310 	sub.w	r3, r4, #16
 800021c:	2b01      	cmp	r3, #1
 800021e:	d92b      	bls.n	8000278 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000220:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000222:	2200      	movs	r2, #0
 8000224:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000228:	4618      	mov	r0, r3
 800022a:	b002      	add	sp, #8
 800022c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800022e:	2d0c      	cmp	r5, #12
 8000230:	d80b      	bhi.n	800024a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000232:	442b      	add	r3, r5
 8000234:	251f      	movs	r5, #31
 8000236:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000238:	3b23      	subs	r3, #35	; 0x23
 800023a:	409d      	lsls	r5, r3
 800023c:	ea26 0505 	bic.w	r5, r6, r5
 8000240:	fa04 f303 	lsl.w	r3, r4, r3
 8000244:	432b      	orrs	r3, r5
 8000246:	6313      	str	r3, [r2, #48]	; 0x30
 8000248:	e7d6      	b.n	80001f8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800024a:	442b      	add	r3, r5
 800024c:	251f      	movs	r5, #31
 800024e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000250:	3b41      	subs	r3, #65	; 0x41
 8000252:	409d      	lsls	r5, r3
 8000254:	ea26 0505 	bic.w	r5, r6, r5
 8000258:	fa04 f303 	lsl.w	r3, r4, r3
 800025c:	432b      	orrs	r3, r5
 800025e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000260:	e7ca      	b.n	80001f8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000262:	2607      	movs	r6, #7
 8000264:	6911      	ldr	r1, [r2, #16]
 8000266:	4423      	add	r3, r4
 8000268:	409e      	lsls	r6, r3
 800026a:	ea21 0106 	bic.w	r1, r1, r6
 800026e:	fa05 f303 	lsl.w	r3, r5, r3
 8000272:	430b      	orrs	r3, r1
 8000274:	6113      	str	r3, [r2, #16]
 8000276:	e7cf      	b.n	8000218 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <HAL_ADC_ConfigChannel+0xfc>)
 800027a:	429a      	cmp	r2, r3
 800027c:	d116      	bne.n	80002ac <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800027e:	6893      	ldr	r3, [r2, #8]
 8000280:	021b      	lsls	r3, r3, #8
 8000282:	d4cd      	bmi.n	8000220 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000284:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000286:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000288:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800028c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800028e:	d1c7      	bne.n	8000220 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <HAL_ADC_ConfigChannel+0x100>)
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <HAL_ADC_ConfigChannel+0x104>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	fbb3 f2f2 	udiv	r2, r3, r2
 800029a:	230a      	movs	r3, #10
 800029c:	4353      	muls	r3, r2
            wait_loop_index--;
 800029e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002a0:	9b01      	ldr	r3, [sp, #4]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0bc      	beq.n	8000220 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002a6:	9b01      	ldr	r3, [sp, #4]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	e7f8      	b.n	800029e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002b4:	2301      	movs	r3, #1
 80002b6:	e7b4      	b.n	8000222 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002b8:	2302      	movs	r3, #2
 80002ba:	e7b5      	b.n	8000228 <HAL_ADC_ConfigChannel+0x68>
 80002bc:	40012400 	.word	0x40012400
 80002c0:	200000ac 	.word	0x200000ac
 80002c4:	000f4240 	.word	0x000f4240

080002c8 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80002c8:	2300      	movs	r3, #0
{
 80002ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80002cc:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002ce:	6803      	ldr	r3, [r0, #0]
{
 80002d0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002d2:	689a      	ldr	r2, [r3, #8]
 80002d4:	07d2      	lsls	r2, r2, #31
 80002d6:	d502      	bpl.n	80002de <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80002d8:	2000      	movs	r0, #0
}
 80002da:	b002      	add	sp, #8
 80002dc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80002de:	689a      	ldr	r2, [r3, #8]
 80002e0:	f042 0201 	orr.w	r2, r2, #1
 80002e4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <ADC_Enable+0x68>)
 80002e8:	4a12      	ldr	r2, [pc, #72]	; (8000334 <ADC_Enable+0x6c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80002f0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80002f2:	9b01      	ldr	r3, [sp, #4]
 80002f4:	b9c3      	cbnz	r3, 8000328 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80002f6:	f7ff ff47 	bl	8000188 <HAL_GetTick>
 80002fa:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80002fc:	6823      	ldr	r3, [r4, #0]
 80002fe:	689d      	ldr	r5, [r3, #8]
 8000300:	f015 0501 	ands.w	r5, r5, #1
 8000304:	d1e8      	bne.n	80002d8 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000306:	f7ff ff3f 	bl	8000188 <HAL_GetTick>
 800030a:	1b80      	subs	r0, r0, r6
 800030c:	2802      	cmp	r0, #2
 800030e:	d9f5      	bls.n	80002fc <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000312:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000316:	f043 0310 	orr.w	r3, r3, #16
 800031a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800031e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000326:	e7d8      	b.n	80002da <ADC_Enable+0x12>
      wait_loop_index--;
 8000328:	9b01      	ldr	r3, [sp, #4]
 800032a:	3b01      	subs	r3, #1
 800032c:	e7e0      	b.n	80002f0 <ADC_Enable+0x28>
 800032e:	bf00      	nop
 8000330:	200000ac 	.word	0x200000ac
 8000334:	000f4240 	.word	0x000f4240

08000338 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000338:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800033c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800033e:	2b01      	cmp	r3, #1
{
 8000340:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000342:	d054      	beq.n	80003ee <HAL_ADC_Start+0xb6>
 8000344:	2301      	movs	r3, #1
 8000346:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800034a:	f7ff ffbd 	bl	80002c8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800034e:	2800      	cmp	r0, #0
 8000350:	d149      	bne.n	80003e6 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8000352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000354:	4a27      	ldr	r2, [pc, #156]	; (80003f4 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8000356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000362:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000364:	6823      	ldr	r3, [r4, #0]
 8000366:	4293      	cmp	r3, r2
 8000368:	d104      	bne.n	8000374 <HAL_ADC_Start+0x3c>
 800036a:	4923      	ldr	r1, [pc, #140]	; (80003f8 <HAL_ADC_Start+0xc0>)
 800036c:	684a      	ldr	r2, [r1, #4]
 800036e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000372:	d12e      	bne.n	80003d2 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000374:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000376:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800037a:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800037c:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800037e:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000380:	bf41      	itttt	mi
 8000382:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000384:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000388:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800038c:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800038e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000394:	bf1c      	itt	ne
 8000396:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000398:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800039c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800039e:	2200      	movs	r2, #0
 80003a0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80003a4:	f06f 0202 	mvn.w	r2, #2
 80003a8:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80003aa:	689a      	ldr	r2, [r3, #8]
 80003ac:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80003b0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80003b4:	d113      	bne.n	80003de <HAL_ADC_Start+0xa6>
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <HAL_ADC_Start+0xbc>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d105      	bne.n	80003c8 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80003bc:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80003c0:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80003c2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80003c6:	d10a      	bne.n	80003de <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80003d8:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80003da:	684a      	ldr	r2, [r1, #4]
 80003dc:	e7cf      	b.n	800037e <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80003de:	689a      	ldr	r2, [r3, #8]
 80003e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80003e4:	e7f3      	b.n	80003ce <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80003e6:	2300      	movs	r3, #0
 80003e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80003ec:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80003ee:	2002      	movs	r0, #2
}
 80003f0:	bd10      	pop	{r4, pc}
 80003f2:	bf00      	nop
 80003f4:	40012800 	.word	0x40012800
 80003f8:	40012400 	.word	0x40012400

080003fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80003fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80003fe:	6803      	ldr	r3, [r0, #0]
{
 8000400:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000402:	689a      	ldr	r2, [r3, #8]
 8000404:	07d2      	lsls	r2, r2, #31
 8000406:	d401      	bmi.n	800040c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000408:	2000      	movs	r0, #0
 800040a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	f022 0201 	bic.w	r2, r2, #1
 8000412:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000414:	f7ff feb8 	bl	8000188 <HAL_GetTick>
 8000418:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800041a:	6823      	ldr	r3, [r4, #0]
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	07db      	lsls	r3, r3, #31
 8000420:	d5f2      	bpl.n	8000408 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000422:	f7ff feb1 	bl	8000188 <HAL_GetTick>
 8000426:	1b40      	subs	r0, r0, r5
 8000428:	2802      	cmp	r0, #2
 800042a:	d9f6      	bls.n	800041a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800042c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800042e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000430:	f043 0310 	orr.w	r3, r3, #16
 8000434:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000436:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800043e:	bd38      	pop	{r3, r4, r5, pc}

08000440 <HAL_ADC_Init>:
{
 8000440:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000442:	4604      	mov	r4, r0
 8000444:	2800      	cmp	r0, #0
 8000446:	d071      	beq.n	800052c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000448:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800044a:	b923      	cbnz	r3, 8000456 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800044c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800044e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000452:	f001 fe9f 	bl	8002194 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000456:	4620      	mov	r0, r4
 8000458:	f7ff ffd0 	bl	80003fc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800045c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800045e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000462:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000464:	d164      	bne.n	8000530 <HAL_ADC_Init+0xf0>
 8000466:	2800      	cmp	r0, #0
 8000468:	d162      	bne.n	8000530 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800046a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800046c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000470:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000472:	f023 0302 	bic.w	r3, r3, #2
 8000476:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800047a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800047c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800047e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000480:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000482:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000486:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800048a:	d038      	beq.n	80004fe <HAL_ADC_Init+0xbe>
 800048c:	2901      	cmp	r1, #1
 800048e:	bf14      	ite	ne
 8000490:	4606      	movne	r6, r0
 8000492:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000496:	7d25      	ldrb	r5, [r4, #20]
 8000498:	2d01      	cmp	r5, #1
 800049a:	d107      	bne.n	80004ac <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800049c:	2b00      	cmp	r3, #0
 800049e:	d130      	bne.n	8000502 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80004a0:	69a3      	ldr	r3, [r4, #24]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80004a8:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80004ac:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004ae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80004b2:	685d      	ldr	r5, [r3, #4]
 80004b4:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80004b8:	ea45 0506 	orr.w	r5, r5, r6
 80004bc:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80004be:	689e      	ldr	r6, [r3, #8]
 80004c0:	4d1d      	ldr	r5, [pc, #116]	; (8000538 <HAL_ADC_Init+0xf8>)
 80004c2:	ea05 0506 	and.w	r5, r5, r6
 80004c6:	ea45 0502 	orr.w	r5, r5, r2
 80004ca:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004cc:	d001      	beq.n	80004d2 <HAL_ADC_Init+0x92>
 80004ce:	2901      	cmp	r1, #1
 80004d0:	d120      	bne.n	8000514 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80004d2:	6921      	ldr	r1, [r4, #16]
 80004d4:	3901      	subs	r1, #1
 80004d6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80004d8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80004da:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80004de:	4329      	orrs	r1, r5
 80004e0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80004e2:	6899      	ldr	r1, [r3, #8]
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <HAL_ADC_Init+0xfc>)
 80004e6:	400b      	ands	r3, r1
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d115      	bne.n	8000518 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80004ec:	2300      	movs	r3, #0
 80004ee:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80004f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004f2:	f023 0303 	bic.w	r3, r3, #3
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80004fc:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004fe:	460e      	mov	r6, r1
 8000500:	e7c9      	b.n	8000496 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000504:	f043 0320 	orr.w	r3, r3, #32
 8000508:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800050a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000512:	e7cb      	b.n	80004ac <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000514:	2100      	movs	r1, #0
 8000516:	e7df      	b.n	80004d8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000518:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800051a:	f023 0312 	bic.w	r3, r3, #18
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000524:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800052c:	2001      	movs	r0, #1
}
 800052e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	62a3      	str	r3, [r4, #40]	; 0x28
 8000536:	e7f9      	b.n	800052c <HAL_ADC_Init+0xec>
 8000538:	ffe1f7fd 	.word	0xffe1f7fd
 800053c:	ff1f0efe 	.word	0xff1f0efe

08000540 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000540:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000542:	4604      	mov	r4, r0
 8000544:	2800      	cmp	r0, #0
 8000546:	d06e      	beq.n	8000626 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000548:	f890 3020 	ldrb.w	r3, [r0, #32]
 800054c:	b90b      	cbnz	r3, 8000552 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800054e:	f001 fe4f 	bl	80021f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000552:	6822      	ldr	r2, [r4, #0]
 8000554:	6813      	ldr	r3, [r2, #0]
 8000556:	f023 0302 	bic.w	r3, r3, #2
 800055a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800055c:	f7ff fe14 	bl	8000188 <HAL_GetTick>
 8000560:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	685a      	ldr	r2, [r3, #4]
 8000566:	0791      	lsls	r1, r2, #30
 8000568:	d451      	bmi.n	800060e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	f042 0201 	orr.w	r2, r2, #1
 8000570:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000572:	f7ff fe09 	bl	8000188 <HAL_GetTick>
 8000576:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000578:	6823      	ldr	r3, [r4, #0]
 800057a:	685a      	ldr	r2, [r3, #4]
 800057c:	07d2      	lsls	r2, r2, #31
 800057e:	d554      	bpl.n	800062a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000580:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000582:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000584:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	bf0c      	ite	eq
 800058a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800058e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000592:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000594:	7e62      	ldrb	r2, [r4, #25]
 8000596:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	bf0c      	ite	eq
 800059c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005a0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80005a4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80005a6:	7ea2      	ldrb	r2, [r4, #26]
 80005a8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	bf0c      	ite	eq
 80005ae:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005b2:	f022 0220 	bicne.w	r2, r2, #32
 80005b6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80005b8:	7ee2      	ldrb	r2, [r4, #27]
 80005ba:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	bf0c      	ite	eq
 80005c0:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80005c4:	f042 0210 	orrne.w	r2, r2, #16
 80005c8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80005ca:	7f22      	ldrb	r2, [r4, #28]
 80005cc:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	bf0c      	ite	eq
 80005d2:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80005d6:	f022 0208 	bicne.w	r2, r2, #8
 80005da:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80005dc:	7f62      	ldrb	r2, [r4, #29]
 80005de:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	bf0c      	ite	eq
 80005e4:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80005e8:	f022 0204 	bicne.w	r2, r2, #4
 80005ec:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80005ee:	68e1      	ldr	r1, [r4, #12]
 80005f0:	68a2      	ldr	r2, [r4, #8]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	6921      	ldr	r1, [r4, #16]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	6961      	ldr	r1, [r4, #20]
 80005fa:	430a      	orrs	r2, r1
 80005fc:	6861      	ldr	r1, [r4, #4]
 80005fe:	3901      	subs	r1, #1
 8000600:	430a      	orrs	r2, r1
 8000602:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000604:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000606:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000608:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 800060c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800060e:	f7ff fdbb 	bl	8000188 <HAL_GetTick>
 8000612:	1b40      	subs	r0, r0, r5
 8000614:	280a      	cmp	r0, #10
 8000616:	d9a4      	bls.n	8000562 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800061a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000620:	2305      	movs	r3, #5
 8000622:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000626:	2001      	movs	r0, #1
}
 8000628:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800062a:	f7ff fdad 	bl	8000188 <HAL_GetTick>
 800062e:	1b40      	subs	r0, r0, r5
 8000630:	280a      	cmp	r0, #10
 8000632:	d9a1      	bls.n	8000578 <HAL_CAN_Init+0x38>
 8000634:	e7f0      	b.n	8000618 <HAL_CAN_Init+0xd8>
	...

08000638 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800063a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800063e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000646:	041b      	lsls	r3, r3, #16
 8000648:	0c1b      	lsrs	r3, r3, #16
 800064a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800064e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000652:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000654:	60d3      	str	r3, [r2, #12]
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	68dc      	ldr	r4, [r3, #12]
 8000662:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000666:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	2b04      	cmp	r3, #4
 800066e:	bf28      	it	cs
 8000670:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000678:	bf98      	it	ls
 800067a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	fa05 f303 	lsl.w	r3, r5, r3
 8000680:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000684:	bf88      	it	hi
 8000686:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	4019      	ands	r1, r3
 800068a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800068c:	fa05 f404 	lsl.w	r4, r5, r4
 8000690:	3c01      	subs	r4, #1
 8000692:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000694:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000696:	ea42 0201 	orr.w	r2, r2, r1
 800069a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	bfa9      	itett	ge
 80006a0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	4b06      	ldrlt	r3, [pc, #24]	; (80006c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a6:	b2d2      	uxtbge	r2, r2
 80006a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	bfbb      	ittet	lt
 80006ae:	f000 000f 	andlt.w	r0, r0, #15
 80006b2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	541a      	strblt	r2, [r3, r0]
 80006ba:	bd30      	pop	{r4, r5, pc}
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	e000ed14 	.word	0xe000ed14

080006c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006c4:	2800      	cmp	r0, #0
 80006c6:	db08      	blt.n	80006da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c8:	2301      	movs	r3, #1
 80006ca:	0942      	lsrs	r2, r0, #5
 80006cc:	f000 001f 	and.w	r0, r0, #31
 80006d0:	fa03 f000 	lsl.w	r0, r3, r0
 80006d4:	4b01      	ldr	r3, [pc, #4]	; (80006dc <HAL_NVIC_EnableIRQ+0x18>)
 80006d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80006e0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80006e2:	b330      	cbz	r0, 8000732 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006e4:	2214      	movs	r2, #20
 80006e6:	6801      	ldr	r1, [r0, #0]
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80006ea:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006ec:	440b      	add	r3, r1
 80006ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80006f8:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80006fa:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80006fc:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80006fe:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000702:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000704:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000706:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800070a:	4323      	orrs	r3, r4
 800070c:	6904      	ldr	r4, [r0, #16]
 800070e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000710:	6944      	ldr	r4, [r0, #20]
 8000712:	4323      	orrs	r3, r4
 8000714:	6984      	ldr	r4, [r0, #24]
 8000716:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000718:	69c4      	ldr	r4, [r0, #28]
 800071a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800071c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800071e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000720:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000722:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000724:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000728:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800072a:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800072e:	4618      	mov	r0, r3
 8000730:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000732:	2001      	movs	r0, #1
}
 8000734:	bd10      	pop	{r4, pc}
 8000736:	bf00      	nop
 8000738:	bffdfff8 	.word	0xbffdfff8
 800073c:	40020000 	.word	0x40020000

08000740 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000740:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000744:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000746:	2b02      	cmp	r3, #2
 8000748:	d003      	beq.n	8000752 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800074a:	2304      	movs	r3, #4
 800074c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800074e:	2001      	movs	r0, #1
 8000750:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000752:	6803      	ldr	r3, [r0, #0]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	f022 020e 	bic.w	r2, r2, #14
 800075a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	f022 0201 	bic.w	r2, r2, #1
 8000762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000764:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <HAL_DMA_Abort_IT+0x88>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d01f      	beq.n	80007aa <HAL_DMA_Abort_IT+0x6a>
 800076a:	3214      	adds	r2, #20
 800076c:	4293      	cmp	r3, r2
 800076e:	d01e      	beq.n	80007ae <HAL_DMA_Abort_IT+0x6e>
 8000770:	3214      	adds	r2, #20
 8000772:	4293      	cmp	r3, r2
 8000774:	d01d      	beq.n	80007b2 <HAL_DMA_Abort_IT+0x72>
 8000776:	3214      	adds	r2, #20
 8000778:	4293      	cmp	r3, r2
 800077a:	d01d      	beq.n	80007b8 <HAL_DMA_Abort_IT+0x78>
 800077c:	3214      	adds	r2, #20
 800077e:	4293      	cmp	r3, r2
 8000780:	d01d      	beq.n	80007be <HAL_DMA_Abort_IT+0x7e>
 8000782:	3214      	adds	r2, #20
 8000784:	4293      	cmp	r3, r2
 8000786:	bf0c      	ite	eq
 8000788:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800078c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000792:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000794:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000796:	2301      	movs	r3, #1
 8000798:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800079c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800079e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80007a2:	b17b      	cbz	r3, 80007c4 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80007a4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80007a6:	4620      	mov	r0, r4
 80007a8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80007aa:	2301      	movs	r3, #1
 80007ac:	e7f0      	b.n	8000790 <HAL_DMA_Abort_IT+0x50>
 80007ae:	2310      	movs	r3, #16
 80007b0:	e7ee      	b.n	8000790 <HAL_DMA_Abort_IT+0x50>
 80007b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b6:	e7eb      	b.n	8000790 <HAL_DMA_Abort_IT+0x50>
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	e7e8      	b.n	8000790 <HAL_DMA_Abort_IT+0x50>
 80007be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c2:	e7e5      	b.n	8000790 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80007c4:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80007c6:	bd10      	pop	{r4, pc}
 80007c8:	40020008 	.word	0x40020008
 80007cc:	40020000 	.word	0x40020000

080007d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80007d0:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80007d2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007d4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80007d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007d8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80007da:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80007dc:	4095      	lsls	r5, r2
 80007de:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80007e0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80007e2:	d032      	beq.n	800084a <HAL_DMA_IRQHandler+0x7a>
 80007e4:	074d      	lsls	r5, r1, #29
 80007e6:	d530      	bpl.n	800084a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80007ec:	bf5e      	ittt	pl
 80007ee:	681a      	ldrpl	r2, [r3, #0]
 80007f0:	f022 0204 	bicpl.w	r2, r2, #4
 80007f4:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80007f6:	4a3e      	ldr	r2, [pc, #248]	; (80008f0 <HAL_DMA_IRQHandler+0x120>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d019      	beq.n	8000830 <HAL_DMA_IRQHandler+0x60>
 80007fc:	3214      	adds	r2, #20
 80007fe:	4293      	cmp	r3, r2
 8000800:	d018      	beq.n	8000834 <HAL_DMA_IRQHandler+0x64>
 8000802:	3214      	adds	r2, #20
 8000804:	4293      	cmp	r3, r2
 8000806:	d017      	beq.n	8000838 <HAL_DMA_IRQHandler+0x68>
 8000808:	3214      	adds	r2, #20
 800080a:	4293      	cmp	r3, r2
 800080c:	d017      	beq.n	800083e <HAL_DMA_IRQHandler+0x6e>
 800080e:	3214      	adds	r2, #20
 8000810:	4293      	cmp	r3, r2
 8000812:	d017      	beq.n	8000844 <HAL_DMA_IRQHandler+0x74>
 8000814:	3214      	adds	r2, #20
 8000816:	4293      	cmp	r3, r2
 8000818:	bf0c      	ite	eq
 800081a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800081e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000822:	4a34      	ldr	r2, [pc, #208]	; (80008f4 <HAL_DMA_IRQHandler+0x124>)
 8000824:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000826:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000828:	2b00      	cmp	r3, #0
 800082a:	d05e      	beq.n	80008ea <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 800082c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800082e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000830:	2304      	movs	r3, #4
 8000832:	e7f6      	b.n	8000822 <HAL_DMA_IRQHandler+0x52>
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	e7f4      	b.n	8000822 <HAL_DMA_IRQHandler+0x52>
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083c:	e7f1      	b.n	8000822 <HAL_DMA_IRQHandler+0x52>
 800083e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000842:	e7ee      	b.n	8000822 <HAL_DMA_IRQHandler+0x52>
 8000844:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000848:	e7eb      	b.n	8000822 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800084a:	2502      	movs	r5, #2
 800084c:	4095      	lsls	r5, r2
 800084e:	4225      	tst	r5, r4
 8000850:	d035      	beq.n	80008be <HAL_DMA_IRQHandler+0xee>
 8000852:	078d      	lsls	r5, r1, #30
 8000854:	d533      	bpl.n	80008be <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	0694      	lsls	r4, r2, #26
 800085a:	d406      	bmi.n	800086a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	f022 020a 	bic.w	r2, r2, #10
 8000862:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000864:	2201      	movs	r2, #1
 8000866:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <HAL_DMA_IRQHandler+0x120>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d019      	beq.n	80008a4 <HAL_DMA_IRQHandler+0xd4>
 8000870:	3214      	adds	r2, #20
 8000872:	4293      	cmp	r3, r2
 8000874:	d018      	beq.n	80008a8 <HAL_DMA_IRQHandler+0xd8>
 8000876:	3214      	adds	r2, #20
 8000878:	4293      	cmp	r3, r2
 800087a:	d017      	beq.n	80008ac <HAL_DMA_IRQHandler+0xdc>
 800087c:	3214      	adds	r2, #20
 800087e:	4293      	cmp	r3, r2
 8000880:	d017      	beq.n	80008b2 <HAL_DMA_IRQHandler+0xe2>
 8000882:	3214      	adds	r2, #20
 8000884:	4293      	cmp	r3, r2
 8000886:	d017      	beq.n	80008b8 <HAL_DMA_IRQHandler+0xe8>
 8000888:	3214      	adds	r2, #20
 800088a:	4293      	cmp	r3, r2
 800088c:	bf0c      	ite	eq
 800088e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000892:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <HAL_DMA_IRQHandler+0x124>)
 8000898:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800089a:	2300      	movs	r3, #0
 800089c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80008a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008a2:	e7c1      	b.n	8000828 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80008a4:	2302      	movs	r3, #2
 80008a6:	e7f6      	b.n	8000896 <HAL_DMA_IRQHandler+0xc6>
 80008a8:	2320      	movs	r3, #32
 80008aa:	e7f4      	b.n	8000896 <HAL_DMA_IRQHandler+0xc6>
 80008ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b0:	e7f1      	b.n	8000896 <HAL_DMA_IRQHandler+0xc6>
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	e7ee      	b.n	8000896 <HAL_DMA_IRQHandler+0xc6>
 80008b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008bc:	e7eb      	b.n	8000896 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80008be:	2508      	movs	r5, #8
 80008c0:	4095      	lsls	r5, r2
 80008c2:	4225      	tst	r5, r4
 80008c4:	d011      	beq.n	80008ea <HAL_DMA_IRQHandler+0x11a>
 80008c6:	0709      	lsls	r1, r1, #28
 80008c8:	d50f      	bpl.n	80008ea <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	f021 010e 	bic.w	r1, r1, #14
 80008d0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008d2:	2301      	movs	r3, #1
 80008d4:	fa03 f202 	lsl.w	r2, r3, r2
 80008d8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80008da:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80008dc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80008e0:	2300      	movs	r3, #0
 80008e2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80008e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80008e8:	e79e      	b.n	8000828 <HAL_DMA_IRQHandler+0x58>
}
 80008ea:	bc70      	pop	{r4, r5, r6}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40020008 	.word	0x40020008
 80008f4:	40020000 	.word	0x40020000

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008fc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80008fe:	4626      	mov	r6, r4
 8000900:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000902:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000aac <HAL_GPIO_Init+0x1b4>
 8000906:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000ab0 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090a:	680a      	ldr	r2, [r1, #0]
 800090c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000910:	d102      	bne.n	8000918 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000912:	b003      	add	sp, #12
 8000914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000918:	f04f 0801 	mov.w	r8, #1
 800091c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000920:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000924:	4590      	cmp	r8, r2
 8000926:	d17f      	bne.n	8000a28 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000928:	684d      	ldr	r5, [r1, #4]
 800092a:	2d12      	cmp	r5, #18
 800092c:	f000 80aa 	beq.w	8000a84 <HAL_GPIO_Init+0x18c>
 8000930:	f200 8083 	bhi.w	8000a3a <HAL_GPIO_Init+0x142>
 8000934:	2d02      	cmp	r5, #2
 8000936:	f000 80a2 	beq.w	8000a7e <HAL_GPIO_Init+0x186>
 800093a:	d877      	bhi.n	8000a2c <HAL_GPIO_Init+0x134>
 800093c:	2d00      	cmp	r5, #0
 800093e:	f000 8089 	beq.w	8000a54 <HAL_GPIO_Init+0x15c>
 8000942:	2d01      	cmp	r5, #1
 8000944:	f000 8099 	beq.w	8000a7a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000948:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800094c:	2aff      	cmp	r2, #255	; 0xff
 800094e:	bf93      	iteet	ls
 8000950:	4682      	movls	sl, r0
 8000952:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000956:	3d08      	subhi	r5, #8
 8000958:	f8d0 b000 	ldrls.w	fp, [r0]
 800095c:	bf92      	itee	ls
 800095e:	00b5      	lslls	r5, r6, #2
 8000960:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000964:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000966:	fa09 f805 	lsl.w	r8, r9, r5
 800096a:	ea2b 0808 	bic.w	r8, fp, r8
 800096e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000972:	bf88      	it	hi
 8000974:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000978:	ea48 0505 	orr.w	r5, r8, r5
 800097c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000980:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000984:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000988:	d04e      	beq.n	8000a28 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800098a:	4d45      	ldr	r5, [pc, #276]	; (8000aa0 <HAL_GPIO_Init+0x1a8>)
 800098c:	4f44      	ldr	r7, [pc, #272]	; (8000aa0 <HAL_GPIO_Init+0x1a8>)
 800098e:	69ad      	ldr	r5, [r5, #24]
 8000990:	f026 0803 	bic.w	r8, r6, #3
 8000994:	f045 0501 	orr.w	r5, r5, #1
 8000998:	61bd      	str	r5, [r7, #24]
 800099a:	69bd      	ldr	r5, [r7, #24]
 800099c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80009a0:	f005 0501 	and.w	r5, r5, #1
 80009a4:	9501      	str	r5, [sp, #4]
 80009a6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009aa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ae:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80009b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009b8:	fa09 f90b 	lsl.w	r9, r9, fp
 80009bc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009c0:	4d38      	ldr	r5, [pc, #224]	; (8000aa4 <HAL_GPIO_Init+0x1ac>)
 80009c2:	42a8      	cmp	r0, r5
 80009c4:	d063      	beq.n	8000a8e <HAL_GPIO_Init+0x196>
 80009c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009ca:	42a8      	cmp	r0, r5
 80009cc:	d061      	beq.n	8000a92 <HAL_GPIO_Init+0x19a>
 80009ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009d2:	42a8      	cmp	r0, r5
 80009d4:	d05f      	beq.n	8000a96 <HAL_GPIO_Init+0x19e>
 80009d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009da:	42a8      	cmp	r0, r5
 80009dc:	bf0c      	ite	eq
 80009de:	2503      	moveq	r5, #3
 80009e0:	2504      	movne	r5, #4
 80009e2:	fa05 f50b 	lsl.w	r5, r5, fp
 80009e6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80009ea:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80009ee:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80009f4:	bf14      	ite	ne
 80009f6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f8:	4395      	biceq	r5, r2
 80009fa:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80009fc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009fe:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000a02:	bf14      	ite	ne
 8000a04:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a06:	4395      	biceq	r5, r2
 8000a08:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a0a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a0c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a10:	bf14      	ite	ne
 8000a12:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a14:	4395      	biceq	r5, r2
 8000a16:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a18:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a1a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a1e:	bf14      	ite	ne
 8000a20:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a22:	ea25 0202 	biceq.w	r2, r5, r2
 8000a26:	60da      	str	r2, [r3, #12]
	position++;
 8000a28:	3601      	adds	r6, #1
 8000a2a:	e76e      	b.n	800090a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000a2c:	2d03      	cmp	r5, #3
 8000a2e:	d022      	beq.n	8000a76 <HAL_GPIO_Init+0x17e>
 8000a30:	2d11      	cmp	r5, #17
 8000a32:	d189      	bne.n	8000948 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a34:	68cc      	ldr	r4, [r1, #12]
 8000a36:	3404      	adds	r4, #4
          break;
 8000a38:	e786      	b.n	8000948 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000a3a:	4f1b      	ldr	r7, [pc, #108]	; (8000aa8 <HAL_GPIO_Init+0x1b0>)
 8000a3c:	42bd      	cmp	r5, r7
 8000a3e:	d009      	beq.n	8000a54 <HAL_GPIO_Init+0x15c>
 8000a40:	d812      	bhi.n	8000a68 <HAL_GPIO_Init+0x170>
 8000a42:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000ab4 <HAL_GPIO_Init+0x1bc>
 8000a46:	454d      	cmp	r5, r9
 8000a48:	d004      	beq.n	8000a54 <HAL_GPIO_Init+0x15c>
 8000a4a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000a4e:	454d      	cmp	r5, r9
 8000a50:	f47f af7a 	bne.w	8000948 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a54:	688c      	ldr	r4, [r1, #8]
 8000a56:	b1c4      	cbz	r4, 8000a8a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a58:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000a5a:	bf0c      	ite	eq
 8000a5c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000a60:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a64:	2408      	movs	r4, #8
 8000a66:	e76f      	b.n	8000948 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000a68:	4575      	cmp	r5, lr
 8000a6a:	d0f3      	beq.n	8000a54 <HAL_GPIO_Init+0x15c>
 8000a6c:	4565      	cmp	r5, ip
 8000a6e:	d0f1      	beq.n	8000a54 <HAL_GPIO_Init+0x15c>
 8000a70:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000ab8 <HAL_GPIO_Init+0x1c0>
 8000a74:	e7eb      	b.n	8000a4e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a76:	2400      	movs	r4, #0
 8000a78:	e766      	b.n	8000948 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a7a:	68cc      	ldr	r4, [r1, #12]
          break;
 8000a7c:	e764      	b.n	8000948 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a7e:	68cc      	ldr	r4, [r1, #12]
 8000a80:	3408      	adds	r4, #8
          break;
 8000a82:	e761      	b.n	8000948 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a84:	68cc      	ldr	r4, [r1, #12]
 8000a86:	340c      	adds	r4, #12
          break;
 8000a88:	e75e      	b.n	8000948 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a8a:	2404      	movs	r4, #4
 8000a8c:	e75c      	b.n	8000948 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a8e:	2500      	movs	r5, #0
 8000a90:	e7a7      	b.n	80009e2 <HAL_GPIO_Init+0xea>
 8000a92:	2501      	movs	r5, #1
 8000a94:	e7a5      	b.n	80009e2 <HAL_GPIO_Init+0xea>
 8000a96:	2502      	movs	r5, #2
 8000a98:	e7a3      	b.n	80009e2 <HAL_GPIO_Init+0xea>
 8000a9a:	bf00      	nop
 8000a9c:	40010400 	.word	0x40010400
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	10210000 	.word	0x10210000
 8000aac:	10310000 	.word	0x10310000
 8000ab0:	10320000 	.word	0x10320000
 8000ab4:	10110000 	.word	0x10110000
 8000ab8:	10220000 	.word	0x10220000

08000abc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000abc:	6883      	ldr	r3, [r0, #8]
 8000abe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000ac0:	bf14      	ite	ne
 8000ac2:	2001      	movne	r0, #1
 8000ac4:	2000      	moveq	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ac8:	b10a      	cbz	r2, 8000ace <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aca:	6101      	str	r1, [r0, #16]
 8000acc:	4770      	bx	lr
 8000ace:	0409      	lsls	r1, r1, #16
 8000ad0:	e7fb      	b.n	8000aca <HAL_GPIO_WritePin+0x2>

08000ad2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ad2:	68c3      	ldr	r3, [r0, #12]
 8000ad4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ad6:	bf14      	ite	ne
 8000ad8:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ada:	6101      	streq	r1, [r0, #16]
 8000adc:	4770      	bx	lr
	...

08000ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	b908      	cbnz	r0, 8000aec <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000ae8:	2001      	movs	r0, #1
 8000aea:	e03c      	b.n	8000b66 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aec:	6803      	ldr	r3, [r0, #0]
 8000aee:	07db      	lsls	r3, r3, #31
 8000af0:	d410      	bmi.n	8000b14 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000af2:	682b      	ldr	r3, [r5, #0]
 8000af4:	079f      	lsls	r7, r3, #30
 8000af6:	d45d      	bmi.n	8000bb4 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	0719      	lsls	r1, r3, #28
 8000afc:	f100 8094 	bmi.w	8000c28 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	075a      	lsls	r2, r3, #29
 8000b04:	f100 80be 	bmi.w	8000c84 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b08:	69e8      	ldr	r0, [r5, #28]
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	f040 812c 	bne.w	8000d68 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000b10:	2000      	movs	r0, #0
 8000b12:	e028      	b.n	8000b66 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b14:	4c8f      	ldr	r4, [pc, #572]	; (8000d54 <HAL_RCC_OscConfig+0x274>)
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d007      	beq.n	8000b30 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b20:	6863      	ldr	r3, [r4, #4]
 8000b22:	f003 030c 	and.w	r3, r3, #12
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d109      	bne.n	8000b3e <HAL_RCC_OscConfig+0x5e>
 8000b2a:	6863      	ldr	r3, [r4, #4]
 8000b2c:	03de      	lsls	r6, r3, #15
 8000b2e:	d506      	bpl.n	8000b3e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	039c      	lsls	r4, r3, #14
 8000b34:	d5dd      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x12>
 8000b36:	686b      	ldr	r3, [r5, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1da      	bne.n	8000af2 <HAL_RCC_OscConfig+0x12>
 8000b3c:	e7d4      	b.n	8000ae8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3e:	686b      	ldr	r3, [r5, #4]
 8000b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b44:	d112      	bne.n	8000b6c <HAL_RCC_OscConfig+0x8c>
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fb1b 	bl	8000188 <HAL_GetTick>
 8000b52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	0398      	lsls	r0, r3, #14
 8000b58:	d4cb      	bmi.n	8000af2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b5a:	f7ff fb15 	bl	8000188 <HAL_GetTick>
 8000b5e:	1b80      	subs	r0, r0, r6
 8000b60:	2864      	cmp	r0, #100	; 0x64
 8000b62:	d9f7      	bls.n	8000b54 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000b64:	2003      	movs	r0, #3
}
 8000b66:	b002      	add	sp, #8
 8000b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6c:	b99b      	cbnz	r3, 8000b96 <HAL_RCC_OscConfig+0xb6>
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b74:	6023      	str	r3, [r4, #0]
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b7e:	f7ff fb03 	bl	8000188 <HAL_GetTick>
 8000b82:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b84:	6823      	ldr	r3, [r4, #0]
 8000b86:	0399      	lsls	r1, r3, #14
 8000b88:	d5b3      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b8a:	f7ff fafd 	bl	8000188 <HAL_GetTick>
 8000b8e:	1b80      	subs	r0, r0, r6
 8000b90:	2864      	cmp	r0, #100	; 0x64
 8000b92:	d9f7      	bls.n	8000b84 <HAL_RCC_OscConfig+0xa4>
 8000b94:	e7e6      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	d103      	bne.n	8000ba6 <HAL_RCC_OscConfig+0xc6>
 8000b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba2:	6023      	str	r3, [r4, #0]
 8000ba4:	e7cf      	b.n	8000b46 <HAL_RCC_OscConfig+0x66>
 8000ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000baa:	6023      	str	r3, [r4, #0]
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb2:	e7cb      	b.n	8000b4c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bb4:	4c67      	ldr	r4, [pc, #412]	; (8000d54 <HAL_RCC_OscConfig+0x274>)
 8000bb6:	6863      	ldr	r3, [r4, #4]
 8000bb8:	f013 0f0c 	tst.w	r3, #12
 8000bbc:	d007      	beq.n	8000bce <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bbe:	6863      	ldr	r3, [r4, #4]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d110      	bne.n	8000bea <HAL_RCC_OscConfig+0x10a>
 8000bc8:	6863      	ldr	r3, [r4, #4]
 8000bca:	03da      	lsls	r2, r3, #15
 8000bcc:	d40d      	bmi.n	8000bea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	079b      	lsls	r3, r3, #30
 8000bd2:	d502      	bpl.n	8000bda <HAL_RCC_OscConfig+0xfa>
 8000bd4:	692b      	ldr	r3, [r5, #16]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d186      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	696a      	ldr	r2, [r5, #20]
 8000bde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000be2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000be6:	6023      	str	r3, [r4, #0]
 8000be8:	e786      	b.n	8000af8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bea:	692a      	ldr	r2, [r5, #16]
 8000bec:	4b5a      	ldr	r3, [pc, #360]	; (8000d58 <HAL_RCC_OscConfig+0x278>)
 8000bee:	b16a      	cbz	r2, 8000c0c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fac8 	bl	8000188 <HAL_GetTick>
 8000bf8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	079f      	lsls	r7, r3, #30
 8000bfe:	d4ec      	bmi.n	8000bda <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c00:	f7ff fac2 	bl	8000188 <HAL_GetTick>
 8000c04:	1b80      	subs	r0, r0, r6
 8000c06:	2802      	cmp	r0, #2
 8000c08:	d9f7      	bls.n	8000bfa <HAL_RCC_OscConfig+0x11a>
 8000c0a:	e7ab      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000c0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fabb 	bl	8000188 <HAL_GetTick>
 8000c12:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	0798      	lsls	r0, r3, #30
 8000c18:	f57f af6e 	bpl.w	8000af8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fab4 	bl	8000188 <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCC_OscConfig+0x134>
 8000c26:	e79d      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c28:	69aa      	ldr	r2, [r5, #24]
 8000c2a:	4c4a      	ldr	r4, [pc, #296]	; (8000d54 <HAL_RCC_OscConfig+0x274>)
 8000c2c:	4b4b      	ldr	r3, [pc, #300]	; (8000d5c <HAL_RCC_OscConfig+0x27c>)
 8000c2e:	b1da      	cbz	r2, 8000c68 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c34:	f7ff faa8 	bl	8000188 <HAL_GetTick>
 8000c38:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c3c:	079b      	lsls	r3, r3, #30
 8000c3e:	d50d      	bpl.n	8000c5c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c44:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <HAL_RCC_OscConfig+0x280>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c4c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000c4e:	bf00      	nop
  }
  while (Delay --);
 8000c50:	9b01      	ldr	r3, [sp, #4]
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	9201      	str	r2, [sp, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f9      	bne.n	8000c4e <HAL_RCC_OscConfig+0x16e>
 8000c5a:	e751      	b.n	8000b00 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fa94 	bl	8000188 <HAL_GetTick>
 8000c60:	1b80      	subs	r0, r0, r6
 8000c62:	2802      	cmp	r0, #2
 8000c64:	d9e9      	bls.n	8000c3a <HAL_RCC_OscConfig+0x15a>
 8000c66:	e77d      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000c68:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c6a:	f7ff fa8d 	bl	8000188 <HAL_GetTick>
 8000c6e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c72:	079f      	lsls	r7, r3, #30
 8000c74:	f57f af44 	bpl.w	8000b00 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c78:	f7ff fa86 	bl	8000188 <HAL_GetTick>
 8000c7c:	1b80      	subs	r0, r0, r6
 8000c7e:	2802      	cmp	r0, #2
 8000c80:	d9f6      	bls.n	8000c70 <HAL_RCC_OscConfig+0x190>
 8000c82:	e76f      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c84:	4c33      	ldr	r4, [pc, #204]	; (8000d54 <HAL_RCC_OscConfig+0x274>)
 8000c86:	69e3      	ldr	r3, [r4, #28]
 8000c88:	00d8      	lsls	r0, r3, #3
 8000c8a:	d424      	bmi.n	8000cd6 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000c8c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	69e3      	ldr	r3, [r4, #28]
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	61e3      	str	r3, [r4, #28]
 8000c96:	69e3      	ldr	r3, [r4, #28]
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca0:	4e30      	ldr	r6, [pc, #192]	; (8000d64 <HAL_RCC_OscConfig+0x284>)
 8000ca2:	6833      	ldr	r3, [r6, #0]
 8000ca4:	05d9      	lsls	r1, r3, #23
 8000ca6:	d518      	bpl.n	8000cda <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca8:	68eb      	ldr	r3, [r5, #12]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d126      	bne.n	8000cfc <HAL_RCC_OscConfig+0x21c>
 8000cae:	6a23      	ldr	r3, [r4, #32]
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000cb6:	f7ff fa67 	bl	8000188 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cba:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cbe:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc0:	6a23      	ldr	r3, [r4, #32]
 8000cc2:	079b      	lsls	r3, r3, #30
 8000cc4:	d53f      	bpl.n	8000d46 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000cc6:	2f00      	cmp	r7, #0
 8000cc8:	f43f af1e 	beq.w	8000b08 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ccc:	69e3      	ldr	r3, [r4, #28]
 8000cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	61e3      	str	r3, [r4, #28]
 8000cd4:	e718      	b.n	8000b08 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000cd6:	2700      	movs	r7, #0
 8000cd8:	e7e2      	b.n	8000ca0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cda:	6833      	ldr	r3, [r6, #0]
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ce2:	f7ff fa51 	bl	8000188 <HAL_GetTick>
 8000ce6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce8:	6833      	ldr	r3, [r6, #0]
 8000cea:	05da      	lsls	r2, r3, #23
 8000cec:	d4dc      	bmi.n	8000ca8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cee:	f7ff fa4b 	bl	8000188 <HAL_GetTick>
 8000cf2:	eba0 0008 	sub.w	r0, r0, r8
 8000cf6:	2864      	cmp	r0, #100	; 0x64
 8000cf8:	d9f6      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x208>
 8000cfa:	e733      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cfc:	b9ab      	cbnz	r3, 8000d2a <HAL_RCC_OscConfig+0x24a>
 8000cfe:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d00:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d04:	f023 0301 	bic.w	r3, r3, #1
 8000d08:	6223      	str	r3, [r4, #32]
 8000d0a:	6a23      	ldr	r3, [r4, #32]
 8000d0c:	f023 0304 	bic.w	r3, r3, #4
 8000d10:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d12:	f7ff fa39 	bl	8000188 <HAL_GetTick>
 8000d16:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d18:	6a23      	ldr	r3, [r4, #32]
 8000d1a:	0798      	lsls	r0, r3, #30
 8000d1c:	d5d3      	bpl.n	8000cc6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fa33 	bl	8000188 <HAL_GetTick>
 8000d22:	1b80      	subs	r0, r0, r6
 8000d24:	4540      	cmp	r0, r8
 8000d26:	d9f7      	bls.n	8000d18 <HAL_RCC_OscConfig+0x238>
 8000d28:	e71c      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	6a23      	ldr	r3, [r4, #32]
 8000d2e:	d103      	bne.n	8000d38 <HAL_RCC_OscConfig+0x258>
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6223      	str	r3, [r4, #32]
 8000d36:	e7ba      	b.n	8000cae <HAL_RCC_OscConfig+0x1ce>
 8000d38:	f023 0301 	bic.w	r3, r3, #1
 8000d3c:	6223      	str	r3, [r4, #32]
 8000d3e:	6a23      	ldr	r3, [r4, #32]
 8000d40:	f023 0304 	bic.w	r3, r3, #4
 8000d44:	e7b6      	b.n	8000cb4 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d46:	f7ff fa1f 	bl	8000188 <HAL_GetTick>
 8000d4a:	eba0 0008 	sub.w	r0, r0, r8
 8000d4e:	42b0      	cmp	r0, r6
 8000d50:	d9b6      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x1e0>
 8000d52:	e707      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
 8000d54:	40021000 	.word	0x40021000
 8000d58:	42420000 	.word	0x42420000
 8000d5c:	42420480 	.word	0x42420480
 8000d60:	200000ac 	.word	0x200000ac
 8000d64:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <HAL_RCC_OscConfig+0x334>)
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	461c      	mov	r4, r3
 8000d6e:	f002 020c 	and.w	r2, r2, #12
 8000d72:	2a08      	cmp	r2, #8
 8000d74:	d03d      	beq.n	8000df2 <HAL_RCC_OscConfig+0x312>
 8000d76:	2300      	movs	r3, #0
 8000d78:	4e27      	ldr	r6, [pc, #156]	; (8000e18 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d7c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7e:	d12b      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000d80:	f7ff fa02 	bl	8000188 <HAL_GetTick>
 8000d84:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	0199      	lsls	r1, r3, #6
 8000d8a:	d41f      	bmi.n	8000dcc <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d8c:	6a2b      	ldr	r3, [r5, #32]
 8000d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d92:	d105      	bne.n	8000da0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d94:	6862      	ldr	r2, [r4, #4]
 8000d96:	68a9      	ldr	r1, [r5, #8]
 8000d98:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000da0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000da2:	6862      	ldr	r2, [r4, #4]
 8000da4:	430b      	orrs	r3, r1
 8000da6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000daa:	4313      	orrs	r3, r2
 8000dac:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000dae:	2301      	movs	r3, #1
 8000db0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000db2:	f7ff f9e9 	bl	8000188 <HAL_GetTick>
 8000db6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	019a      	lsls	r2, r3, #6
 8000dbc:	f53f aea8 	bmi.w	8000b10 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dc0:	f7ff f9e2 	bl	8000188 <HAL_GetTick>
 8000dc4:	1b40      	subs	r0, r0, r5
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	d9f6      	bls.n	8000db8 <HAL_RCC_OscConfig+0x2d8>
 8000dca:	e6cb      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dcc:	f7ff f9dc 	bl	8000188 <HAL_GetTick>
 8000dd0:	1bc0      	subs	r0, r0, r7
 8000dd2:	2802      	cmp	r0, #2
 8000dd4:	d9d7      	bls.n	8000d86 <HAL_RCC_OscConfig+0x2a6>
 8000dd6:	e6c5      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000dd8:	f7ff f9d6 	bl	8000188 <HAL_GetTick>
 8000ddc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	f57f ae95 	bpl.w	8000b10 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000de6:	f7ff f9cf 	bl	8000188 <HAL_GetTick>
 8000dea:	1b40      	subs	r0, r0, r5
 8000dec:	2802      	cmp	r0, #2
 8000dee:	d9f6      	bls.n	8000dde <HAL_RCC_OscConfig+0x2fe>
 8000df0:	e6b8      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000df2:	2801      	cmp	r0, #1
 8000df4:	f43f aeb7 	beq.w	8000b66 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000df8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dfa:	6a2b      	ldr	r3, [r5, #32]
 8000dfc:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f47f ae71 	bne.w	8000ae8 <HAL_RCC_OscConfig+0x8>
 8000e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e08:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000e0c:	1ac0      	subs	r0, r0, r3
 8000e0e:	bf18      	it	ne
 8000e10:	2001      	movne	r0, #1
 8000e12:	e6a8      	b.n	8000b66 <HAL_RCC_OscConfig+0x86>
 8000e14:	40021000 	.word	0x40021000
 8000e18:	42420060 	.word	0x42420060

08000e1c <HAL_RCC_GetSysClockFreq>:
{
 8000e1c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000e20:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e22:	ac02      	add	r4, sp, #8
 8000e24:	f103 0510 	add.w	r5, r3, #16
 8000e28:	4622      	mov	r2, r4
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	6859      	ldr	r1, [r3, #4]
 8000e2e:	3308      	adds	r3, #8
 8000e30:	c203      	stmia	r2!, {r0, r1}
 8000e32:	42ab      	cmp	r3, r5
 8000e34:	4614      	mov	r4, r2
 8000e36:	d1f7      	bne.n	8000e28 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000e3e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000e40:	4911      	ldr	r1, [pc, #68]	; (8000e88 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e42:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000e46:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e48:	f003 020c 	and.w	r2, r3, #12
 8000e4c:	2a08      	cmp	r2, #8
 8000e4e:	d117      	bne.n	8000e80 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e50:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000e54:	a806      	add	r0, sp, #24
 8000e56:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e58:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e5a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e5e:	d50c      	bpl.n	8000e7a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e60:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e64:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e68:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e6a:	aa06      	add	r2, sp, #24
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e72:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000e76:	b007      	add	sp, #28
 8000e78:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_RCC_GetSysClockFreq+0x74>)
 8000e7c:	4350      	muls	r0, r2
 8000e7e:	e7fa      	b.n	8000e76 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000e82:	e7f8      	b.n	8000e76 <HAL_RCC_GetSysClockFreq+0x5a>
 8000e84:	080026d4 	.word	0x080026d4
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	007a1200 	.word	0x007a1200
 8000e90:	003d0900 	.word	0x003d0900

08000e94 <HAL_RCC_ClockConfig>:
{
 8000e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e98:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	b910      	cbnz	r0, 8000ea4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ea4:	4a45      	ldr	r2, [pc, #276]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
 8000ea6:	6813      	ldr	r3, [r2, #0]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d329      	bcc.n	8000f04 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eb0:	6821      	ldr	r1, [r4, #0]
 8000eb2:	078e      	lsls	r6, r1, #30
 8000eb4:	d431      	bmi.n	8000f1a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb6:	07ca      	lsls	r2, r1, #31
 8000eb8:	d444      	bmi.n	8000f44 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000eba:	4a40      	ldr	r2, [pc, #256]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
 8000ebc:	6813      	ldr	r3, [r2, #0]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	429d      	cmp	r5, r3
 8000ec4:	d367      	bcc.n	8000f96 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	4d3d      	ldr	r5, [pc, #244]	; (8000fc0 <HAL_RCC_ClockConfig+0x12c>)
 8000eca:	f012 0f04 	tst.w	r2, #4
 8000ece:	d16e      	bne.n	8000fae <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed0:	0713      	lsls	r3, r2, #28
 8000ed2:	d506      	bpl.n	8000ee2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ed4:	686b      	ldr	r3, [r5, #4]
 8000ed6:	6922      	ldr	r2, [r4, #16]
 8000ed8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000edc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ee0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ee2:	f7ff ff9b 	bl	8000e1c <HAL_RCC_GetSysClockFreq>
 8000ee6:	686b      	ldr	r3, [r5, #4]
 8000ee8:	4a36      	ldr	r2, [pc, #216]	; (8000fc4 <HAL_RCC_ClockConfig+0x130>)
 8000eea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	40d8      	lsrs	r0, r3
 8000ef2:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <HAL_RCC_ClockConfig+0x134>)
 8000ef4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000ef6:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <HAL_RCC_ClockConfig+0x138>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	f001 fafb 	bl	80024f4 <HAL_InitTick>
  return HAL_OK;
 8000efe:	2000      	movs	r0, #0
 8000f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f04:	6813      	ldr	r3, [r2, #0]
 8000f06:	f023 0307 	bic.w	r3, r3, #7
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	4299      	cmp	r1, r3
 8000f16:	d1c2      	bne.n	8000e9e <HAL_RCC_ClockConfig+0xa>
 8000f18:	e7ca      	b.n	8000eb0 <HAL_RCC_ClockConfig+0x1c>
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f1c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f20:	bf1e      	ittt	ne
 8000f22:	685a      	ldrne	r2, [r3, #4]
 8000f24:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000f28:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f2a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f2c:	bf42      	ittt	mi
 8000f2e:	685a      	ldrmi	r2, [r3, #4]
 8000f30:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000f34:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	68a0      	ldr	r0, [r4, #8]
 8000f3a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f3e:	4302      	orrs	r2, r0
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	e7b8      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f44:	6862      	ldr	r2, [r4, #4]
 8000f46:	4e1e      	ldr	r6, [pc, #120]	; (8000fc0 <HAL_RCC_ClockConfig+0x12c>)
 8000f48:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f4c:	d11b      	bne.n	8000f86 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f52:	d0a4      	beq.n	8000e9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f54:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f56:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f5a:	f023 0303 	bic.w	r3, r3, #3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000f62:	f7ff f911 	bl	8000188 <HAL_GetTick>
 8000f66:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f68:	6873      	ldr	r3, [r6, #4]
 8000f6a:	6862      	ldr	r2, [r4, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f74:	d0a1      	beq.n	8000eba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f76:	f7ff f907 	bl	8000188 <HAL_GetTick>
 8000f7a:	1bc0      	subs	r0, r0, r7
 8000f7c:	4540      	cmp	r0, r8
 8000f7e:	d9f3      	bls.n	8000f68 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000f80:	2003      	movs	r0, #3
}
 8000f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f86:	2a02      	cmp	r2, #2
 8000f88:	d102      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f8e:	e7e0      	b.n	8000f52 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	f013 0f02 	tst.w	r3, #2
 8000f94:	e7dd      	b.n	8000f52 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	f023 0307 	bic.w	r3, r3, #7
 8000f9c:	432b      	orrs	r3, r5
 8000f9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa0:	6813      	ldr	r3, [r2, #0]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	429d      	cmp	r5, r3
 8000fa8:	f47f af79 	bne.w	8000e9e <HAL_RCC_ClockConfig+0xa>
 8000fac:	e78b      	b.n	8000ec6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fae:	686b      	ldr	r3, [r5, #4]
 8000fb0:	68e1      	ldr	r1, [r4, #12]
 8000fb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	606b      	str	r3, [r5, #4]
 8000fba:	e789      	b.n	8000ed0 <HAL_RCC_ClockConfig+0x3c>
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	080026e4 	.word	0x080026e4
 8000fc8:	200000ac 	.word	0x200000ac
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fde:	6810      	ldr	r0, [r2, #0]
}
 8000fe0:	40d8      	lsrs	r0, r3
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	080026f4 	.word	0x080026f4
 8000fec:	200000ac 	.word	0x200000ac

08000ff0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000ffa:	5cd3      	ldrb	r3, [r2, r3]
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ffe:	6810      	ldr	r0, [r2, #0]
}
 8001000:	40d8      	lsrs	r0, r3
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000
 8001008:	080026f4 	.word	0x080026f4
 800100c:	200000ac 	.word	0x200000ac

08001010 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001010:	230f      	movs	r3, #15
 8001012:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_RCC_GetClockConfig+0x34>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001024:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800102c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001036:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_RCC_GetClockConfig+0x38>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	600b      	str	r3, [r1, #0]
 8001042:	4770      	bx	lr
 8001044:	40021000 	.word	0x40021000
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800104c:	6803      	ldr	r3, [r0, #0]
{
 800104e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001052:	07d9      	lsls	r1, r3, #31
{
 8001054:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001056:	d520      	bpl.n	800109a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001058:	4c35      	ldr	r4, [pc, #212]	; (8001130 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800105a:	69e3      	ldr	r3, [r4, #28]
 800105c:	00da      	lsls	r2, r3, #3
 800105e:	d432      	bmi.n	80010c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001060:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	69e3      	ldr	r3, [r4, #28]
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	61e3      	str	r3, [r4, #28]
 800106a:	69e3      	ldr	r3, [r4, #28]
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001074:	4e2f      	ldr	r6, [pc, #188]	; (8001134 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001076:	6833      	ldr	r3, [r6, #0]
 8001078:	05db      	lsls	r3, r3, #23
 800107a:	d526      	bpl.n	80010ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800107c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800107e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001082:	d136      	bne.n	80010f2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001084:	6a23      	ldr	r3, [r4, #32]
 8001086:	686a      	ldr	r2, [r5, #4]
 8001088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800108c:	4313      	orrs	r3, r2
 800108e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001090:	b11f      	cbz	r7, 800109a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001092:	69e3      	ldr	r3, [r4, #28]
 8001094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001098:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800109a:	6828      	ldr	r0, [r5, #0]
 800109c:	0783      	lsls	r3, r0, #30
 800109e:	d506      	bpl.n	80010ae <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80010a0:	4a23      	ldr	r2, [pc, #140]	; (8001130 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80010a2:	68a9      	ldr	r1, [r5, #8]
 80010a4:	6853      	ldr	r3, [r2, #4]
 80010a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010aa:	430b      	orrs	r3, r1
 80010ac:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80010ae:	f010 0010 	ands.w	r0, r0, #16
 80010b2:	d01b      	beq.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80010b4:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80010b6:	68e9      	ldr	r1, [r5, #12]
 80010b8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80010ba:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80010bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6053      	str	r3, [r2, #4]
 80010c4:	e012      	b.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80010c6:	2700      	movs	r7, #0
 80010c8:	e7d4      	b.n	8001074 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ca:	6833      	ldr	r3, [r6, #0]
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010d2:	f7ff f859 	bl	8000188 <HAL_GetTick>
 80010d6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d8:	6833      	ldr	r3, [r6, #0]
 80010da:	05d8      	lsls	r0, r3, #23
 80010dc:	d4ce      	bmi.n	800107c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010de:	f7ff f853 	bl	8000188 <HAL_GetTick>
 80010e2:	eba0 0008 	sub.w	r0, r0, r8
 80010e6:	2864      	cmp	r0, #100	; 0x64
 80010e8:	d9f6      	bls.n	80010d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80010ea:	2003      	movs	r0, #3
}
 80010ec:	b002      	add	sp, #8
 80010ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010f2:	686a      	ldr	r2, [r5, #4]
 80010f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d0c3      	beq.n	8001084 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80010fc:	2001      	movs	r0, #1
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001100:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001102:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001104:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800110a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800110c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800110e:	07d9      	lsls	r1, r3, #31
 8001110:	d5b8      	bpl.n	8001084 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001112:	f7ff f839 	bl	8000188 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800111a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111c:	6a23      	ldr	r3, [r4, #32]
 800111e:	079a      	lsls	r2, r3, #30
 8001120:	d4b0      	bmi.n	8001084 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001122:	f7ff f831 	bl	8000188 <HAL_GetTick>
 8001126:	1b80      	subs	r0, r0, r6
 8001128:	4540      	cmp	r0, r8
 800112a:	d9f7      	bls.n	800111c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800112c:	e7dd      	b.n	80010ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	40007000 	.word	0x40007000
 8001138:	42420440 	.word	0x42420440

0800113c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800113c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800113e:	4604      	mov	r4, r0
 8001140:	2800      	cmp	r0, #0
 8001142:	d034      	beq.n	80011ae <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001148:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800114c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001150:	b91b      	cbnz	r3, 800115a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001152:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001156:	f001 f883 	bl	8002260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800115a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800115c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800115e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001162:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001164:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800116a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800116c:	6863      	ldr	r3, [r4, #4]
 800116e:	69a1      	ldr	r1, [r4, #24]
 8001170:	4303      	orrs	r3, r0
 8001172:	68e0      	ldr	r0, [r4, #12]
 8001174:	4303      	orrs	r3, r0
 8001176:	6920      	ldr	r0, [r4, #16]
 8001178:	4303      	orrs	r3, r0
 800117a:	6960      	ldr	r0, [r4, #20]
 800117c:	4303      	orrs	r3, r0
 800117e:	69e0      	ldr	r0, [r4, #28]
 8001180:	4303      	orrs	r3, r0
 8001182:	6a20      	ldr	r0, [r4, #32]
 8001184:	4303      	orrs	r3, r0
 8001186:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001188:	4303      	orrs	r3, r0
 800118a:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800118e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001190:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001192:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001196:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001198:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800119a:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800119c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800119e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011a2:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80011a4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011a6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80011a8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80011ac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011ae:	2001      	movs	r0, #1
}
 80011b0:	bd10      	pop	{r4, pc}
	...

080011b4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011b4:	6a03      	ldr	r3, [r0, #32]
{
 80011b6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80011c2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80011c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80011ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80011cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80011ce:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80011d2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80011d4:	4d0a      	ldr	r5, [pc, #40]	; (8001200 <TIM_OC1_SetConfig+0x4c>)
 80011d6:	42a8      	cmp	r0, r5
 80011d8:	d10b      	bne.n	80011f2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80011da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80011dc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80011e0:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011e2:	698e      	ldr	r6, [r1, #24]
 80011e4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011e6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80011ea:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80011ec:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80011f0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011f2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011f4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011f6:	684a      	ldr	r2, [r1, #4]
 80011f8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011fa:	6203      	str	r3, [r0, #32]
 80011fc:	bd70      	pop	{r4, r5, r6, pc}
 80011fe:	bf00      	nop
 8001200:	40012c00 	.word	0x40012c00

08001204 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001204:	6a03      	ldr	r3, [r0, #32]
{
 8001206:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800120c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800120e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001210:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001212:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001214:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001216:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800121a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800121c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800121e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001222:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001226:	4d0b      	ldr	r5, [pc, #44]	; (8001254 <TIM_OC3_SetConfig+0x50>)
 8001228:	42a8      	cmp	r0, r5
 800122a:	d10d      	bne.n	8001248 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800122c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800122e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001232:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001236:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001238:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800123a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800123e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001244:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001248:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800124a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800124c:	684a      	ldr	r2, [r1, #4]
 800124e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001250:	6203      	str	r3, [r0, #32]
 8001252:	bd70      	pop	{r4, r5, r6, pc}
 8001254:	40012c00 	.word	0x40012c00

08001258 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001258:	6a03      	ldr	r3, [r0, #32]
{
 800125a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800125c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001260:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001262:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001264:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001266:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001268:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800126a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800126e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001272:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001274:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001278:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800127c:	4d06      	ldr	r5, [pc, #24]	; (8001298 <TIM_OC4_SetConfig+0x40>)
 800127e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001280:	bf02      	ittt	eq
 8001282:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001284:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001288:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800128c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800128e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001290:	684a      	ldr	r2, [r1, #4]
 8001292:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001294:	6203      	str	r3, [r0, #32]
 8001296:	bd30      	pop	{r4, r5, pc}
 8001298:	40012c00 	.word	0x40012c00

0800129c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800129c:	6803      	ldr	r3, [r0, #0]
}
 800129e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012ae:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80012b0:	bf1e      	ittt	ne
 80012b2:	681a      	ldrne	r2, [r3, #0]
 80012b4:	f042 0201 	orrne.w	r2, r2, #1
 80012b8:	601a      	strne	r2, [r3, #0]
}
 80012ba:	4770      	bx	lr

080012bc <HAL_TIM_PWM_MspInit>:
 80012bc:	4770      	bx	lr

080012be <HAL_TIM_OnePulse_MspInit>:
 80012be:	4770      	bx	lr

080012c0 <HAL_TIM_OC_DelayElapsedCallback>:
 80012c0:	4770      	bx	lr

080012c2 <HAL_TIM_IC_CaptureCallback>:
 80012c2:	4770      	bx	lr

080012c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80012c4:	4770      	bx	lr

080012c6 <HAL_TIM_TriggerCallback>:
 80012c6:	4770      	bx	lr

080012c8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012c8:	6803      	ldr	r3, [r0, #0]
{
 80012ca:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012cc:	691a      	ldr	r2, [r3, #16]
{
 80012ce:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012d0:	0791      	lsls	r1, r2, #30
 80012d2:	d50e      	bpl.n	80012f2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	0792      	lsls	r2, r2, #30
 80012d8:	d50b      	bpl.n	80012f2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012da:	f06f 0202 	mvn.w	r2, #2
 80012de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012e0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012e2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012e4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012e6:	079b      	lsls	r3, r3, #30
 80012e8:	d077      	beq.n	80013da <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80012ea:	f7ff ffea 	bl	80012c2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ee:	2300      	movs	r3, #0
 80012f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	0750      	lsls	r0, r2, #29
 80012f8:	d510      	bpl.n	800131c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	0751      	lsls	r1, r2, #29
 80012fe:	d50d      	bpl.n	800131c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001300:	f06f 0204 	mvn.w	r2, #4
 8001304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001306:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001308:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800130a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800130c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001310:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001312:	d068      	beq.n	80013e6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001314:	f7ff ffd5 	bl	80012c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001318:	2300      	movs	r3, #0
 800131a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	0712      	lsls	r2, r2, #28
 8001322:	d50f      	bpl.n	8001344 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	0710      	lsls	r0, r2, #28
 8001328:	d50c      	bpl.n	8001344 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800132a:	f06f 0208 	mvn.w	r2, #8
 800132e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001330:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001332:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001334:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001336:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001338:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800133a:	d05a      	beq.n	80013f2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800133c:	f7ff ffc1 	bl	80012c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001340:	2300      	movs	r3, #0
 8001342:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	06d2      	lsls	r2, r2, #27
 800134a:	d510      	bpl.n	800136e <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	06d0      	lsls	r0, r2, #27
 8001350:	d50d      	bpl.n	800136e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001352:	f06f 0210 	mvn.w	r2, #16
 8001356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001358:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800135a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800135c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800135e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001362:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001364:	d04b      	beq.n	80013fe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001366:	f7ff ffac 	bl	80012c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800136a:	2300      	movs	r3, #0
 800136c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	07d1      	lsls	r1, r2, #31
 8001374:	d508      	bpl.n	8001388 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	07d2      	lsls	r2, r2, #31
 800137a:	d505      	bpl.n	8001388 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800137c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001380:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001382:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001384:	f000 fed8 	bl	8002138 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	0610      	lsls	r0, r2, #24
 800138e:	d508      	bpl.n	80013a2 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	0611      	lsls	r1, r2, #24
 8001394:	d505      	bpl.n	80013a2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001396:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800139a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800139c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800139e:	f000 fa3a 	bl	8001816 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	691a      	ldr	r2, [r3, #16]
 80013a6:	0652      	lsls	r2, r2, #25
 80013a8:	d508      	bpl.n	80013bc <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	0650      	lsls	r0, r2, #25
 80013ae:	d505      	bpl.n	80013bc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80013b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80013b8:	f7ff ff85 	bl	80012c6 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	0691      	lsls	r1, r2, #26
 80013c2:	d522      	bpl.n	800140a <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	0692      	lsls	r2, r2, #26
 80013c8:	d51f      	bpl.n	800140a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013ca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80013ce:	4620      	mov	r0, r4
}
 80013d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80013d6:	f000 ba1d 	b.w	8001814 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013da:	f7ff ff71 	bl	80012c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff ff70 	bl	80012c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80013e4:	e783      	b.n	80012ee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013e6:	f7ff ff6b 	bl	80012c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff ff6a 	bl	80012c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80013f0:	e792      	b.n	8001318 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013f2:	f7ff ff65 	bl	80012c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff ff64 	bl	80012c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80013fc:	e7a0      	b.n	8001340 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013fe:	f7ff ff5f 	bl	80012c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff ff5e 	bl	80012c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001408:	e7af      	b.n	800136a <HAL_TIM_IRQHandler+0xa2>
 800140a:	bd10      	pop	{r4, pc}

0800140c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800140e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001410:	4290      	cmp	r0, r2
 8001412:	d00a      	beq.n	800142a <TIM_Base_SetConfig+0x1e>
 8001414:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001418:	d007      	beq.n	800142a <TIM_Base_SetConfig+0x1e>
 800141a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800141e:	4290      	cmp	r0, r2
 8001420:	d003      	beq.n	800142a <TIM_Base_SetConfig+0x1e>
 8001422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001426:	4290      	cmp	r0, r2
 8001428:	d115      	bne.n	8001456 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800142a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800142c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001430:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001432:	4a11      	ldr	r2, [pc, #68]	; (8001478 <TIM_Base_SetConfig+0x6c>)
 8001434:	4290      	cmp	r0, r2
 8001436:	d00a      	beq.n	800144e <TIM_Base_SetConfig+0x42>
 8001438:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800143c:	d007      	beq.n	800144e <TIM_Base_SetConfig+0x42>
 800143e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001442:	4290      	cmp	r0, r2
 8001444:	d003      	beq.n	800144e <TIM_Base_SetConfig+0x42>
 8001446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144a:	4290      	cmp	r0, r2
 800144c:	d103      	bne.n	8001456 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800144e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001454:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001456:	694a      	ldr	r2, [r1, #20]
 8001458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800145c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800145e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001460:	688b      	ldr	r3, [r1, #8]
 8001462:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001464:	680b      	ldr	r3, [r1, #0]
 8001466:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <TIM_Base_SetConfig+0x6c>)
 800146a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800146c:	bf04      	itt	eq
 800146e:	690b      	ldreq	r3, [r1, #16]
 8001470:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001472:	2301      	movs	r3, #1
 8001474:	6143      	str	r3, [r0, #20]
 8001476:	4770      	bx	lr
 8001478:	40012c00 	.word	0x40012c00

0800147c <HAL_TIM_Base_Init>:
{
 800147c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800147e:	4604      	mov	r4, r0
 8001480:	b1a0      	cbz	r0, 80014ac <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001482:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001486:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800148a:	b91b      	cbnz	r3, 8001494 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800148c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001490:	f000 ff5a 	bl	8002348 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001494:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001496:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001498:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800149c:	1d21      	adds	r1, r4, #4
 800149e:	f7ff ffb5 	bl	800140c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80014a2:	2301      	movs	r3, #1
  return HAL_OK;
 80014a4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80014a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
}
 80014ae:	bd10      	pop	{r4, pc}

080014b0 <HAL_TIM_PWM_Init>:
{
 80014b0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80014b2:	4604      	mov	r4, r0
 80014b4:	b1a0      	cbz	r0, 80014e0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80014b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014be:	b91b      	cbnz	r3, 80014c8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80014c4:	f7ff fefa 	bl	80012bc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80014c8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014ca:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80014cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014d0:	1d21      	adds	r1, r4, #4
 80014d2:	f7ff ff9b 	bl	800140c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80014d6:	2301      	movs	r3, #1
  return HAL_OK;
 80014d8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80014da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
}
 80014e2:	bd10      	pop	{r4, pc}

080014e4 <HAL_TIM_OnePulse_Init>:
{
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	460d      	mov	r5, r1
  if (htim == NULL)
 80014e8:	4604      	mov	r4, r0
 80014ea:	b1e0      	cbz	r0, 8001526 <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 80014ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014f4:	b91b      	cbnz	r3, 80014fe <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 80014f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80014fa:	f7ff fee0 	bl	80012be <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80014fe:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001500:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001502:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	f7ff ff80 	bl	800140c <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800150c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800150e:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f022 0208 	bic.w	r2, r2, #8
 8001516:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8001518:	6819      	ldr	r1, [r3, #0]
 800151a:	4329      	orrs	r1, r5
 800151c:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800151e:	2301      	movs	r3, #1
 8001520:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001524:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
}
 8001528:	bd38      	pop	{r3, r4, r5, pc}
	...

0800152c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800152c:	6a03      	ldr	r3, [r0, #32]
{
 800152e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001530:	f023 0310 	bic.w	r3, r3, #16
 8001534:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001536:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001538:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800153a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800153c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800153e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001542:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001546:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001548:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800154c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001550:	4d0b      	ldr	r5, [pc, #44]	; (8001580 <TIM_OC2_SetConfig+0x54>)
 8001552:	42a8      	cmp	r0, r5
 8001554:	d10d      	bne.n	8001572 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001556:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800155c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001560:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001562:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001564:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001568:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800156a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800156e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001572:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001574:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001576:	684a      	ldr	r2, [r1, #4]
 8001578:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800157a:	6203      	str	r3, [r0, #32]
 800157c:	bd70      	pop	{r4, r5, r6, pc}
 800157e:	bf00      	nop
 8001580:	40012c00 	.word	0x40012c00

08001584 <HAL_TIM_PWM_ConfigChannel>:
{
 8001584:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001586:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800158a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800158c:	2b01      	cmp	r3, #1
 800158e:	f04f 0002 	mov.w	r0, #2
 8001592:	d025      	beq.n	80015e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001594:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001596:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800159a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800159e:	2a0c      	cmp	r2, #12
 80015a0:	d818      	bhi.n	80015d4 <HAL_TIM_PWM_ConfigChannel+0x50>
 80015a2:	e8df f002 	tbb	[pc, r2]
 80015a6:	1707      	.short	0x1707
 80015a8:	171e1717 	.word	0x171e1717
 80015ac:	172f1717 	.word	0x172f1717
 80015b0:	1717      	.short	0x1717
 80015b2:	40          	.byte	0x40
 80015b3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015b4:	6820      	ldr	r0, [r4, #0]
 80015b6:	f7ff fdfd 	bl	80011b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015ba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015bc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	f042 0208 	orr.w	r2, r2, #8
 80015c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	f022 0204 	bic.w	r2, r2, #4
 80015cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015d2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80015d4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80015d6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80015d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80015dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80015e0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80015e2:	6820      	ldr	r0, [r4, #0]
 80015e4:	f7ff ffa2 	bl	800152c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015ec:	699a      	ldr	r2, [r3, #24]
 80015ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001602:	e7e6      	b.n	80015d2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001604:	6820      	ldr	r0, [r4, #0]
 8001606:	f7ff fdfd 	bl	8001204 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800160a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800160c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800160e:	69da      	ldr	r2, [r3, #28]
 8001610:	f042 0208 	orr.w	r2, r2, #8
 8001614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	f022 0204 	bic.w	r2, r2, #4
 800161c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800161e:	69da      	ldr	r2, [r3, #28]
 8001620:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001622:	61da      	str	r2, [r3, #28]
      break;
 8001624:	e7d6      	b.n	80015d4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001626:	6820      	ldr	r0, [r4, #0]
 8001628:	f7ff fe16 	bl	8001258 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800162c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800162e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001630:	69da      	ldr	r2, [r3, #28]
 8001632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001636:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800163e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001646:	e7ec      	b.n	8001622 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001648:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800164a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800164c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800164e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001652:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001656:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001658:	6083      	str	r3, [r0, #8]
 800165a:	bd10      	pop	{r4, pc}

0800165c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800165c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001660:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001662:	2b01      	cmp	r3, #1
{
 8001664:	4604      	mov	r4, r0
 8001666:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800166a:	d019      	beq.n	80016a0 <HAL_TIM_ConfigClockSource+0x44>
 800166c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800166e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001672:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001674:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001678:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800167a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800167e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001682:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001684:	680b      	ldr	r3, [r1, #0]
 8001686:	2b40      	cmp	r3, #64	; 0x40
 8001688:	d065      	beq.n	8001756 <HAL_TIM_ConfigClockSource+0xfa>
 800168a:	d815      	bhi.n	80016b8 <HAL_TIM_ConfigClockSource+0x5c>
 800168c:	2b10      	cmp	r3, #16
 800168e:	d00c      	beq.n	80016aa <HAL_TIM_ConfigClockSource+0x4e>
 8001690:	d807      	bhi.n	80016a2 <HAL_TIM_ConfigClockSource+0x46>
 8001692:	b153      	cbz	r3, 80016aa <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001694:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001696:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001698:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800169c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d001      	beq.n	80016aa <HAL_TIM_ConfigClockSource+0x4e>
 80016a6:	2b30      	cmp	r3, #48	; 0x30
 80016a8:	d1f4      	bne.n	8001694 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80016aa:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016ac:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80016b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016b4:	4313      	orrs	r3, r2
 80016b6:	e01a      	b.n	80016ee <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80016b8:	2b60      	cmp	r3, #96	; 0x60
 80016ba:	d034      	beq.n	8001726 <HAL_TIM_ConfigClockSource+0xca>
 80016bc:	d819      	bhi.n	80016f2 <HAL_TIM_ConfigClockSource+0x96>
 80016be:	2b50      	cmp	r3, #80	; 0x50
 80016c0:	d1e8      	bne.n	8001694 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016c2:	684a      	ldr	r2, [r1, #4]
 80016c4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80016c6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016c8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016ca:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016ce:	f025 0501 	bic.w	r5, r5, #1
 80016d2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016d4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80016d6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016dc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80016e0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80016e2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80016e4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80016e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016ea:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80016ee:	6083      	str	r3, [r0, #8]
 80016f0:	e7d0      	b.n	8001694 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80016f2:	2b70      	cmp	r3, #112	; 0x70
 80016f4:	d00c      	beq.n	8001710 <HAL_TIM_ConfigClockSource+0xb4>
 80016f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016fa:	d1cb      	bne.n	8001694 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80016fc:	68cb      	ldr	r3, [r1, #12]
 80016fe:	684a      	ldr	r2, [r1, #4]
 8001700:	6889      	ldr	r1, [r1, #8]
 8001702:	f7ff ffa1 	bl	8001648 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001706:	6822      	ldr	r2, [r4, #0]
 8001708:	6893      	ldr	r3, [r2, #8]
 800170a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170e:	e008      	b.n	8001722 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001710:	68cb      	ldr	r3, [r1, #12]
 8001712:	684a      	ldr	r2, [r1, #4]
 8001714:	6889      	ldr	r1, [r1, #8]
 8001716:	f7ff ff97 	bl	8001648 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800171a:	6822      	ldr	r2, [r4, #0]
 800171c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800171e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001722:	6093      	str	r3, [r2, #8]
      break;
 8001724:	e7b6      	b.n	8001694 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001726:	684d      	ldr	r5, [r1, #4]
 8001728:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800172a:	6a01      	ldr	r1, [r0, #32]
 800172c:	f021 0110 	bic.w	r1, r1, #16
 8001730:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001732:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001734:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001736:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800173a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800173e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001742:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001746:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001748:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800174a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800174c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001750:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001754:	e7cb      	b.n	80016ee <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001756:	684a      	ldr	r2, [r1, #4]
 8001758:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800175a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800175c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800175e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001762:	f025 0501 	bic.w	r5, r5, #1
 8001766:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001768:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800176a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800176c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001770:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001774:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001776:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001778:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800177a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800177e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001782:	e7b4      	b.n	80016ee <HAL_TIM_ConfigClockSource+0x92>

08001784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001784:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001786:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001788:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800178a:	f001 011f 	and.w	r1, r1, #31
 800178e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001790:	ea23 0304 	bic.w	r3, r3, r4
 8001794:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001796:	6a03      	ldr	r3, [r0, #32]
 8001798:	408a      	lsls	r2, r1
 800179a:	431a      	orrs	r2, r3
 800179c:	6202      	str	r2, [r0, #32]
 800179e:	bd10      	pop	{r4, pc}

080017a0 <HAL_TIM_PWM_Start>:
{
 80017a0:	b510      	push	{r4, lr}
 80017a2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017a4:	2201      	movs	r2, #1
 80017a6:	6800      	ldr	r0, [r0, #0]
 80017a8:	f7ff ffec 	bl	8001784 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_TIM_PWM_Start+0x34>)
}
 80017b0:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017b2:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80017b4:	bf02      	ittt	eq
 80017b6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80017b8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80017bc:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017c4:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80017c6:	bf1e      	ittt	ne
 80017c8:	681a      	ldrne	r2, [r3, #0]
 80017ca:	f042 0201 	orrne.w	r2, r2, #1
 80017ce:	601a      	strne	r2, [r3, #0]
}
 80017d0:	bd10      	pop	{r4, pc}
 80017d2:	bf00      	nop
 80017d4:	40012c00 	.word	0x40012c00

080017d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80017dc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f04f 0302 	mov.w	r3, #2
 80017e4:	d014      	beq.n	8001810 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017e6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80017ec:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017ee:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017f0:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80017f2:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80017f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80017f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80017fc:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017fe:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001800:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001802:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001804:	2301      	movs	r3, #1
 8001806:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800180a:	2300      	movs	r3, #0
 800180c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001810:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001812:	bd30      	pop	{r4, r5, pc}

08001814 <HAL_TIMEx_CommutCallback>:
 8001814:	4770      	bx	lr

08001816 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001816:	4770      	bx	lr

08001818 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001818:	6803      	ldr	r3, [r0, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001820:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800182a:	2320      	movs	r3, #32
 800182c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001830:	4770      	bx	lr
	...

08001834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001834:	b538      	push	{r3, r4, r5, lr}
 8001836:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001838:	6803      	ldr	r3, [r0, #0]
 800183a:	68c1      	ldr	r1, [r0, #12]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	2419      	movs	r4, #25
 8001840:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001844:	430a      	orrs	r2, r1
 8001846:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001848:	6882      	ldr	r2, [r0, #8]
 800184a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800184c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800184e:	4302      	orrs	r2, r0
 8001850:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001852:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001856:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800185a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	69a9      	ldr	r1, [r5, #24]
 8001864:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001868:	430a      	orrs	r2, r1
 800186a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <UART_SetConfig+0x70>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d114      	bne.n	800189c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001872:	f7ff fbbd 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001876:	4360      	muls	r0, r4
 8001878:	686c      	ldr	r4, [r5, #4]
 800187a:	2264      	movs	r2, #100	; 0x64
 800187c:	00a4      	lsls	r4, r4, #2
 800187e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001882:	fbb0 f4f2 	udiv	r4, r0, r2
 8001886:	fb02 0314 	mls	r3, r2, r4, r0
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	3332      	adds	r3, #50	; 0x32
 800188e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001892:	6829      	ldr	r1, [r5, #0]
 8001894:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001898:	608b      	str	r3, [r1, #8]
 800189a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800189c:	f7ff fb98 	bl	8000fd0 <HAL_RCC_GetPCLK1Freq>
 80018a0:	e7e9      	b.n	8001876 <UART_SetConfig+0x42>
 80018a2:	bf00      	nop
 80018a4:	40013800 	.word	0x40013800

080018a8 <HAL_UART_Init>:
{
 80018a8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80018aa:	4604      	mov	r4, r0
 80018ac:	b340      	cbz	r0, 8001900 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80018ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80018b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018b6:	b91b      	cbnz	r3, 80018c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80018b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80018bc:	f000 fda2 	bl	8002404 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80018c0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80018c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80018c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80018c8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80018ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80018cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80018d2:	f7ff ffaf 	bl	8001834 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018e8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018f0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80018f2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80018fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
}
 8001902:	bd10      	pop	{r4, pc}

08001904 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001904:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001908:	2b20      	cmp	r3, #32
 800190a:	d118      	bne.n	800193e <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800190c:	b1a9      	cbz	r1, 800193a <HAL_UART_Transmit_IT+0x36>
 800190e:	b1a2      	cbz	r2, 800193a <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001910:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001914:	2b01      	cmp	r3, #1
 8001916:	d012      	beq.n	800193e <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001918:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 800191a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800191c:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800191e:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8001920:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001922:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001924:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001926:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800192a:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 800192c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001934:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001936:	4618      	mov	r0, r3
 8001938:	4770      	bx	lr
      return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
 800193c:	4770      	bx	lr
    return HAL_BUSY;
 800193e:	2002      	movs	r0, #2
}
 8001940:	4770      	bx	lr

08001942 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001942:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001946:	2b20      	cmp	r3, #32
 8001948:	d120      	bne.n	800198c <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800194a:	b1e9      	cbz	r1, 8001988 <HAL_UART_Receive_IT+0x46>
 800194c:	b1e2      	cbz	r2, 8001988 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 800194e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001952:	2b01      	cmp	r3, #1
 8001954:	d01a      	beq.n	800198c <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001956:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001958:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800195a:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800195c:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800195e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001960:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001964:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001966:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001968:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800196a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800196e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001972:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001974:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8001976:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001978:	f041 0101 	orr.w	r1, r1, #1
 800197c:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800197e:	68d1      	ldr	r1, [r2, #12]
 8001980:	f041 0120 	orr.w	r1, r1, #32
 8001984:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001986:	4770      	bx	lr
      return HAL_ERROR;
 8001988:	2001      	movs	r0, #1
 800198a:	4770      	bx	lr
    return HAL_BUSY;
 800198c:	2002      	movs	r0, #2
}
 800198e:	4770      	bx	lr

08001990 <HAL_UART_TxCpltCallback>:
 8001990:	4770      	bx	lr

08001992 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001992:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001996:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001998:	2b22      	cmp	r3, #34	; 0x22
 800199a:	d136      	bne.n	8001a0a <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800199c:	6883      	ldr	r3, [r0, #8]
 800199e:	6901      	ldr	r1, [r0, #16]
 80019a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a4:	6802      	ldr	r2, [r0, #0]
 80019a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80019a8:	d123      	bne.n	80019f2 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019aa:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80019ac:	b9e9      	cbnz	r1, 80019ea <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019b2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80019b6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80019b8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80019ba:	3c01      	subs	r4, #1
 80019bc:	b2a4      	uxth	r4, r4
 80019be:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80019c0:	b98c      	cbnz	r4, 80019e6 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80019c2:	6803      	ldr	r3, [r0, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	f022 0220 	bic.w	r2, r2, #32
 80019ca:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d2:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80019dc:	2320      	movs	r3, #32
 80019de:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80019e2:	f000 f8bd 	bl	8001b60 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80019e6:	2000      	movs	r0, #0
}
 80019e8:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f823 2b01 	strh.w	r2, [r3], #1
 80019f0:	e7e1      	b.n	80019b6 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80019f2:	b921      	cbnz	r1, 80019fe <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80019f4:	1c59      	adds	r1, r3, #1
 80019f6:	6852      	ldr	r2, [r2, #4]
 80019f8:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e7dc      	b.n	80019b8 <UART_Receive_IT+0x26>
 80019fe:	6852      	ldr	r2, [r2, #4]
 8001a00:	1c59      	adds	r1, r3, #1
 8001a02:	6281      	str	r1, [r0, #40]	; 0x28
 8001a04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a08:	e7f7      	b.n	80019fa <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	bd10      	pop	{r4, pc}

08001a0e <HAL_UART_ErrorCallback>:
 8001a0e:	4770      	bx	lr

08001a10 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a10:	6803      	ldr	r3, [r0, #0]
{
 8001a12:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a14:	681a      	ldr	r2, [r3, #0]
{
 8001a16:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001a18:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a1a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a1c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001a1e:	d107      	bne.n	8001a30 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a20:	0696      	lsls	r6, r2, #26
 8001a22:	d55a      	bpl.n	8001ada <HAL_UART_IRQHandler+0xca>
 8001a24:	068d      	lsls	r5, r1, #26
 8001a26:	d558      	bpl.n	8001ada <HAL_UART_IRQHandler+0xca>
}
 8001a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001a2c:	f7ff bfb1 	b.w	8001992 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a30:	f015 0501 	ands.w	r5, r5, #1
 8001a34:	d102      	bne.n	8001a3c <HAL_UART_IRQHandler+0x2c>
 8001a36:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001a3a:	d04e      	beq.n	8001ada <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a3c:	07d3      	lsls	r3, r2, #31
 8001a3e:	d505      	bpl.n	8001a4c <HAL_UART_IRQHandler+0x3c>
 8001a40:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a42:	bf42      	ittt	mi
 8001a44:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001a46:	f043 0301 	orrmi.w	r3, r3, #1
 8001a4a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a4c:	0750      	lsls	r0, r2, #29
 8001a4e:	d504      	bpl.n	8001a5a <HAL_UART_IRQHandler+0x4a>
 8001a50:	b11d      	cbz	r5, 8001a5a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a5a:	0793      	lsls	r3, r2, #30
 8001a5c:	d504      	bpl.n	8001a68 <HAL_UART_IRQHandler+0x58>
 8001a5e:	b11d      	cbz	r5, 8001a68 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a68:	0716      	lsls	r6, r2, #28
 8001a6a:	d504      	bpl.n	8001a76 <HAL_UART_IRQHandler+0x66>
 8001a6c:	b11d      	cbz	r5, 8001a76 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d066      	beq.n	8001b4a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a7c:	0695      	lsls	r5, r2, #26
 8001a7e:	d504      	bpl.n	8001a8a <HAL_UART_IRQHandler+0x7a>
 8001a80:	0688      	lsls	r0, r1, #26
 8001a82:	d502      	bpl.n	8001a8a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff ff84 	bl	8001992 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a8a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001a8c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a8e:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001a92:	0711      	lsls	r1, r2, #28
 8001a94:	d402      	bmi.n	8001a9c <HAL_UART_IRQHandler+0x8c>
 8001a96:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001a9a:	d01a      	beq.n	8001ad2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001a9c:	f7ff febc 	bl	8001818 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	0652      	lsls	r2, r2, #25
 8001aa6:	d510      	bpl.n	8001aca <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001aa8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001aaa:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001ab2:	b150      	cbz	r0, 8001aca <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_UART_IRQHandler+0x13c>)
 8001ab6:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ab8:	f7fe fe42 	bl	8000740 <HAL_DMA_Abort_IT>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d044      	beq.n	8001b4a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ac0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ac6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ac8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff ff9f 	bl	8001a0e <HAL_UART_ErrorCallback>
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001ad2:	f7ff ff9c 	bl	8001a0e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ada:	0616      	lsls	r6, r2, #24
 8001adc:	d527      	bpl.n	8001b2e <HAL_UART_IRQHandler+0x11e>
 8001ade:	060d      	lsls	r5, r1, #24
 8001ae0:	d525      	bpl.n	8001b2e <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ae2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001ae6:	2a21      	cmp	r2, #33	; 0x21
 8001ae8:	d12f      	bne.n	8001b4a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001aea:	68a2      	ldr	r2, [r4, #8]
 8001aec:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001af0:	6a22      	ldr	r2, [r4, #32]
 8001af2:	d117      	bne.n	8001b24 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001af4:	8811      	ldrh	r1, [r2, #0]
 8001af6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001afa:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001afc:	6921      	ldr	r1, [r4, #16]
 8001afe:	b979      	cbnz	r1, 8001b20 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001b00:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001b02:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001b04:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001b06:	3a01      	subs	r2, #1
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001b0c:	b9ea      	cbnz	r2, 8001b4a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b14:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001b20:	3201      	adds	r2, #1
 8001b22:	e7ee      	b.n	8001b02 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001b24:	1c51      	adds	r1, r2, #1
 8001b26:	6221      	str	r1, [r4, #32]
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	e7ea      	b.n	8001b04 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b2e:	0650      	lsls	r0, r2, #25
 8001b30:	d50b      	bpl.n	8001b4a <HAL_UART_IRQHandler+0x13a>
 8001b32:	064a      	lsls	r2, r1, #25
 8001b34:	d509      	bpl.n	8001b4a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b36:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001b38:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001b40:	2320      	movs	r3, #32
 8001b42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001b46:	f7ff ff23 	bl	8001990 <HAL_UART_TxCpltCallback>
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
 8001b4c:	08001b51 	.word	0x08001b51

08001b50 <UART_DMAAbortOnError>:
{
 8001b50:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001b52:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b54:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001b56:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001b58:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001b5a:	f7ff ff58 	bl	8001a0e <HAL_UART_ErrorCallback>
 8001b5e:	bd08      	pop	{r3, pc}

08001b60 <HAL_UART_RxCpltCallback>:
uint8_t serial1_in_buff[MAX_COMMAND_SIZE];
uint8_t serial1_in_buff_count = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){


	 if ( huart->Instance == USART2 ){
 8001b60:	6802      	ldr	r2, [r0, #0]
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_UART_RxCpltCallback+0x28>)
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d10e      	bne.n	8001b86 <HAL_UART_RxCpltCallback+0x26>

			if(serial1_in_buff_count<MAX_COMMAND_SIZE){
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_UART_RxCpltCallback+0x2c>)
 8001b6a:	7813      	ldrb	r3, [r2, #0]
 8001b6c:	2bc7      	cmp	r3, #199	; 0xc7
 8001b6e:	d805      	bhi.n	8001b7c <HAL_UART_RxCpltCallback+0x1c>

				mth_data[serial1_in_buff_count]=uart1_rx_buffer[0];
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <HAL_UART_RxCpltCallback+0x30>)
 8001b72:	7808      	ldrb	r0, [r1, #0]
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <HAL_UART_RxCpltCallback+0x34>)
 8001b76:	54c8      	strb	r0, [r1, r3]
				serial1_in_buff_count++;
 8001b78:	3301      	adds	r3, #1
 8001b7a:	7013      	strb	r3, [r2, #0]



				}

			HAL_UART_Receive_IT(&huart2,uart1_rx_buffer,1);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4904      	ldr	r1, [pc, #16]	; (8001b90 <HAL_UART_RxCpltCallback+0x30>)
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_UART_RxCpltCallback+0x38>)
 8001b82:	f7ff bede 	b.w	8001942 <HAL_UART_Receive_IT>
 8001b86:	4770      	bx	lr
 8001b88:	40004400 	.word	0x40004400
 8001b8c:	200001a0 	.word	0x200001a0
 8001b90:	20000220 	.word	0x20000220
 8001b94:	200000d8 	.word	0x200000d8
 8001b98:	20000cbc 	.word	0x20000cbc

08001b9c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9c:	2228      	movs	r2, #40	; 0x28
{
 8001b9e:	b570      	push	{r4, r5, r6, lr}
 8001ba0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba2:	eb0d 0002 	add.w	r0, sp, r2
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f000 fd80 	bl	80026ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bae:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb0:	eb0d 0002 	add.w	r0, sp, r2
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f000 fd79 	bl	80026ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bba:	4632      	mov	r2, r6
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	a801      	add	r0, sp, #4
 8001bc0:	f000 fd74 	bl	80026ac <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bc4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc6:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001bc8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bcc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001bce:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd0:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd4:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd6:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd8:	f7fe ff82 	bl	8000ae0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bdc:	230f      	movs	r3, #15
 8001bde:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be0:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001be2:	4629      	mov	r1, r5
 8001be4:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be8:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bea:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bec:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bee:	f7ff f951 	bl	8000e94 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001bf2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bf8:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001bfa:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfc:	f7ff fa26 	bl	800104c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001c00:	b014      	add	sp, #80	; 0x50
 8001c02:	bd70      	pop	{r4, r5, r6, pc}

08001c04 <CalcMTHChecksum>:

uint8_t CalcMTHChecksum(void){

	uint16_t mth_checksum=0;

	for(int i=0;i<98;i++)mth_checksum+=mth_data[i];
 8001c04:	2200      	movs	r2, #0
	uint16_t mth_checksum=0;
 8001c06:	4613      	mov	r3, r2
	for(int i=0;i<98;i++)mth_checksum+=mth_data[i];
 8001c08:	4906      	ldr	r1, [pc, #24]	; (8001c24 <CalcMTHChecksum+0x20>)
 8001c0a:	5c50      	ldrb	r0, [r2, r1]
 8001c0c:	3201      	adds	r2, #1
 8001c0e:	4403      	add	r3, r0
 8001c10:	2a62      	cmp	r2, #98	; 0x62
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	d1f9      	bne.n	8001c0a <CalcMTHChecksum+0x6>


  if(mth_checksum==(mth_data[98]|(mth_data[99]<<8))) return 1;
 8001c16:	f8b1 0062 	ldrh.w	r0, [r1, #98]	; 0x62
  else return 0;

}
 8001c1a:	1ac3      	subs	r3, r0, r3
 8001c1c:	4258      	negs	r0, r3
 8001c1e:	4158      	adcs	r0, r3
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200000d8 	.word	0x200000d8

08001c28 <get_gear>:

}


uint8_t get_gear()
{
 8001c28:	b508      	push	{r3, lr}
  if(HAL_GPIO_ReadPin(FWD_IN_GPIO_Port, FWD_IN_Pin))
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <get_gear+0x14>)
 8001c2e:	f7fe ff45 	bl	8000abc <HAL_GPIO_ReadPin>
 8001c32:	2800      	cmp	r0, #0
  }
  else
  {
  return(REVERSE);
  }
}
 8001c34:	bf14      	ite	ne
 8001c36:	2003      	movne	r0, #3
 8001c38:	2001      	moveq	r0, #1
 8001c3a:	bd08      	pop	{r3, pc}
 8001c3c:	40010c00 	.word	0x40010c00

08001c40 <get_torque>:

uint16_t get_torque(uint8_t gear)
{
 8001c40:	b510      	push	{r4, lr}
 8001c42:	4604      	mov	r4, r0
  //accelerator pedal mapping to torque values here
  uint16_t ThrotVal=HAL_ADC_GetValue(&hadc1);
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <get_torque+0x34>)
 8001c46:	f7fe fab7 	bl	80001b8 <HAL_ADC_GetValue>
 8001c4a:	b280      	uxth	r0, r0
  if (ThrotVal<80) ThrotVal=75;//dead zone at start of throttle travel
 8001c4c:	284f      	cmp	r0, #79	; 0x4f
 8001c4e:	bf98      	it	ls
 8001c50:	204b      	movls	r0, #75	; 0x4b
 if(gear==DRIVE) ThrotVal = map(ThrotVal, 75, 4096, 0, 1000);
 8001c52:	2c03      	cmp	r4, #3
 8001c54:	d109      	bne.n	8001c6a <get_torque+0x2a>
  return ThrotVal; //return torque
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	384b      	subs	r0, #75	; 0x4b
 8001c5c:	4358      	muls	r0, r3
 8001c5e:	f640 73b5 	movw	r3, #4021	; 0xfb5
 8001c62:	fb90 f0f3 	sdiv	r0, r0, r3
 if(gear==REVERSE) ThrotVal = map(ThrotVal, 75, 4096, 0, -1000);
 8001c66:	b280      	uxth	r0, r0
}
 8001c68:	bd10      	pop	{r4, pc}
 if(gear==REVERSE) ThrotVal = map(ThrotVal, 75, 4096, 0, -1000);
 8001c6a:	2c01      	cmp	r4, #1
 8001c6c:	d1fc      	bne.n	8001c68 <get_torque+0x28>
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c6e:	384b      	subs	r0, #75	; 0x4b
 8001c70:	4b01      	ldr	r3, [pc, #4]	; (8001c78 <get_torque+0x38>)
 8001c72:	e7f3      	b.n	8001c5c <get_torque+0x1c>
 8001c74:	200002e8 	.word	0x200002e8
 8001c78:	fffffc18 	.word	0xfffffc18

08001c7c <main>:
{
 8001c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	2610      	movs	r6, #16
{
 8001c82:	b093      	sub	sp, #76	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c84:	4dbb      	ldr	r5, [pc, #748]	; (8001f74 <main+0x2f8>)
  HAL_Init();
 8001c86:	f7fe fa61 	bl	800014c <HAL_Init>
  SystemClock_Config();
 8001c8a:	f7ff ff87 	bl	8001b9c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8e:	4632      	mov	r2, r6
 8001c90:	2100      	movs	r1, #0
 8001c92:	a80b      	add	r0, sp, #44	; 0x2c
 8001c94:	f000 fd0a 	bl	80026ac <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c98:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9c:	4333      	orrs	r3, r6
 8001c9e:	61ab      	str	r3, [r5, #24]
 8001ca0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	4033      	ands	r3, r6
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001cae:	48b2      	ldr	r0, [pc, #712]	; (8001f78 <main+0x2fc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	61ab      	str	r3, [r5, #24]
 8001cb6:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	9303      	str	r3, [sp, #12]
 8001cc0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	61ab      	str	r3, [r5, #24]
 8001cce:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	9304      	str	r3, [sp, #16]
 8001cd8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001cda:	f7fe fef5 	bl	8000ac8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, s_Pin|UART1_SYNC_Pin, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2121      	movs	r1, #33	; 0x21
 8001ce2:	48a6      	ldr	r0, [pc, #664]	; (8001f7c <main+0x300>)
 8001ce4:	f7fe fef0 	bl	8000ac8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f24f 0140 	movw	r1, #61504	; 0xf040
 8001cee:	48a4      	ldr	r0, [pc, #656]	; (8001f80 <main+0x304>)
 8001cf0:	f7fe feea 	bl	8000ac8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	a90b      	add	r1, sp, #44	; 0x2c
 8001cfa:	489f      	ldr	r0, [pc, #636]	; (8001f78 <main+0x2fc>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001cfc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f7fe fdf7 	bl	80008f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = s_Pin|UART1_SYNC_Pin;
 8001d0a:	2321      	movs	r3, #33	; 0x21
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	a90b      	add	r1, sp, #44	; 0x2c
 8001d0e:	489b      	ldr	r0, [pc, #620]	; (8001f7c <main+0x300>)
  GPIO_InitStruct.Pin = s_Pin|UART1_SYNC_Pin;
 8001d10:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f7fe fded 	bl	80008f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(z_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	a90b      	add	r1, sp, #44	; 0x2c
 8001d20:	4896      	ldr	r0, [pc, #600]	; (8001f7c <main+0x300>)
  GPIO_InitStruct.Pin = z_Pin;
 8001d22:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d24:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(z_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f7fe fde6 	bl	80008f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8001d2c:	f24f 0340 	movw	r3, #61504	; 0xf040
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	a90b      	add	r1, sp, #44	; 0x2c
 8001d32:	4893      	ldr	r0, [pc, #588]	; (8001f80 <main+0x304>)
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8001d34:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f7fe fddb 	bl	80008f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FWD_IN_Pin|REV_IN_Pin|START_IN_Pin;
 8001d42:	f44f 7360 	mov.w	r3, #896	; 0x380
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d46:	f04f 0a0c 	mov.w	sl, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	a90b      	add	r1, sp, #44	; 0x2c
 8001d4c:	488c      	ldr	r0, [pc, #560]	; (8001f80 <main+0x304>)
  GPIO_InitStruct.Pin = FWD_IN_Pin|REV_IN_Pin|START_IN_Pin;
 8001d4e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d50:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f7fe fdcf 	bl	80008f8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d5a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d5c:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d5e:	ea43 0308 	orr.w	r3, r3, r8
 8001d62:	616b      	str	r3, [r5, #20]
 8001d64:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d66:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d68:	ea03 0308 	and.w	r3, r3, r8
 8001d6c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d6e:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d70:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d72:	f7fe fc73 	bl	800065c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d76:	200c      	movs	r0, #12
 8001d78:	f7fe fca4 	bl	80006c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	4621      	mov	r1, r4
 8001d80:	200d      	movs	r0, #13
 8001d82:	f7fe fc6b 	bl	800065c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d86:	200d      	movs	r0, #13
 8001d88:	f7fe fc9c 	bl	80006c4 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 500000;
 8001d8c:	f8df b234 	ldr.w	fp, [pc, #564]	; 8001fc4 <main+0x348>
  huart1.Instance = USART1;
 8001d90:	487c      	ldr	r0, [pc, #496]	; (8001f84 <main+0x308>)
  huart1.Init.BaudRate = 500000;
 8001d92:	4b7d      	ldr	r3, [pc, #500]	; (8001f88 <main+0x30c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d94:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 500000;
 8001d96:	e880 0808 	stmia.w	r0, {r3, fp}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d9a:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d9c:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d9e:	f8c0 a014 	str.w	sl, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da4:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da6:	f7ff fd7f 	bl	80018a8 <HAL_UART_Init>
  hcan.Instance = CAN1;
 8001daa:	4878      	ldr	r0, [pc, #480]	; (8001f8c <main+0x310>)
 8001dac:	4b78      	ldr	r3, [pc, #480]	; (8001f90 <main+0x314>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001dae:	6084      	str	r4, [r0, #8]
  hcan.Init.Prescaler = 16;
 8001db0:	e880 0048 	stmia.w	r0, {r3, r6}
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001db4:	60c4      	str	r4, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001db6:	6104      	str	r4, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001db8:	6144      	str	r4, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001dba:	7604      	strb	r4, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001dbc:	7644      	strb	r4, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001dbe:	7684      	strb	r4, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001dc0:	76c4      	strb	r4, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001dc2:	7704      	strb	r4, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001dc4:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001dc6:	f7fe fbbb 	bl	8000540 <HAL_CAN_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	4632      	mov	r2, r6
 8001dcc:	4621      	mov	r1, r4
 8001dce:	a80b      	add	r0, sp, #44	; 0x2c
 8001dd0:	f000 fc6c 	bl	80026ac <memset>
  htim3.Init.Prescaler = 20000;
 8001dd4:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim3.Instance = TIM3;
 8001dd8:	4d6e      	ldr	r5, [pc, #440]	; (8001f94 <main+0x318>)
  htim3.Init.Prescaler = 20000;
 8001dda:	4a6f      	ldr	r2, [pc, #444]	; (8001f98 <main+0x31c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ddc:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  htim3.Init.Prescaler = 20000;
 8001de0:	e885 000c 	stmia.w	r5, {r2, r3}
  htim3.Init.Period = 1000;
 8001de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001de8:	4628      	mov	r0, r5
  htim3.Init.Period = 1000;
 8001dea:	60eb      	str	r3, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dee:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df0:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	9407      	str	r4, [sp, #28]
 8001df4:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001df6:	f7ff fb41 	bl	800147c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dfa:	a90b      	add	r1, sp, #44	; 0x2c
 8001dfc:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfe:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e02:	f7ff fc2b 	bl	800165c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001e06:	2108      	movs	r1, #8
 8001e08:	4628      	mov	r0, r5
  huart2.Instance = USART2;
 8001e0a:	4f64      	ldr	r7, [pc, #400]	; (8001f9c <main+0x320>)
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001e0c:	f7ff fb6a 	bl	80014e4 <HAL_TIM_OnePulse_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e10:	a907      	add	r1, sp, #28
 8001e12:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e14:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e18:	f7ff fcde 	bl	80017d8 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 8001e1c:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <main+0x324>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1e:	4638      	mov	r0, r7
  huart2.Init.BaudRate = 500000;
 8001e20:	e887 0808 	stmia.w	r7, {r3, fp}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e24:	60bc      	str	r4, [r7, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e26:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e28:	613c      	str	r4, [r7, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e2a:	f8c7 a014 	str.w	sl, [r7, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e32:	f7ff fd39 	bl	80018a8 <HAL_UART_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e36:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8001e3a:	485a      	ldr	r0, [pc, #360]	; (8001fa4 <main+0x328>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e3c:	495a      	ldr	r1, [pc, #360]	; (8001fa8 <main+0x32c>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e3e:	f8c0 8014 	str.w	r8, [r0, #20]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e42:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e4a:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e4c:	2318      	movs	r3, #24
 8001e4e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	6203      	str	r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 8001e54:	230a      	movs	r3, #10
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e56:	6084      	str	r4, [r0, #8]
  hspi1.Init.CRCPolynomial = 10;
 8001e58:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e5a:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5c:	6104      	str	r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e5e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e60:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e62:	f7ff f96b 	bl	800113c <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	4632      	mov	r2, r6
 8001e68:	4621      	mov	r1, r4
 8001e6a:	a807      	add	r0, sp, #28
 8001e6c:	f000 fc1e 	bl	80026ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e70:	221c      	movs	r2, #28
 8001e72:	4621      	mov	r1, r4
 8001e74:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e76:	9405      	str	r4, [sp, #20]
 8001e78:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7a:	f000 fc17 	bl	80026ac <memset>
  htim2.Instance = TIM2;
 8001e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e82:	4d4a      	ldr	r5, [pc, #296]	; (8001fac <main+0x330>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e84:	2620      	movs	r6, #32
  htim2.Init.Prescaler = 0;
 8001e86:	e885 0018 	stmia.w	r5, {r3, r4}
  htim2.Init.Period = 63;
 8001e8a:	233f      	movs	r3, #63	; 0x3f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e8c:	4628      	mov	r0, r5
  htim2.Init.Period = 63;
 8001e8e:	60eb      	str	r3, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e92:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e96:	f7ff faf1 	bl	800147c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e9a:	a907      	add	r1, sp, #28
 8001e9c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9e:	f8cd 901c 	str.w	r9, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ea2:	f7ff fbdb 	bl	800165c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f7ff fb02 	bl	80014b0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eac:	a905      	add	r1, sp, #20
 8001eae:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eb0:	9605      	str	r6, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb2:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb4:	f7ff fc90 	bl	80017d8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eba:	2208      	movs	r2, #8
 8001ebc:	a90b      	add	r1, sp, #44	; 0x2c
 8001ebe:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec0:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 32;
 8001ec2:	960c      	str	r6, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec4:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec6:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ec8:	f7ff fb5c 	bl	8001584 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8001ecc:	4628      	mov	r0, r5
 8001ece:	f000 fa69 	bl	80023a4 <HAL_TIM_MspPostInit>
  hadc1.Instance = ADC1;
 8001ed2:	4e37      	ldr	r6, [pc, #220]	; (8001fb0 <main+0x334>)
 8001ed4:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <main+0x338>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ed6:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 8001ed8:	6033      	str	r3, [r6, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eda:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 8001ede:	f8c6 8010 	str.w	r8, [r6, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ee2:	61f3      	str	r3, [r6, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ee4:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ee6:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ee8:	7534      	strb	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eea:	6074      	str	r4, [r6, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001eec:	940b      	str	r4, [sp, #44]	; 0x2c
 8001eee:	940c      	str	r4, [sp, #48]	; 0x30
 8001ef0:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ef2:	f7fe faa5 	bl	8000440 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8001ef6:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef8:	a90b      	add	r1, sp, #44	; 0x2c
 8001efa:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_4;
 8001efc:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001efe:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f02:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f04:	f7fe f95c 	bl	80001c0 <HAL_ADC_ConfigChannel>
  HAL_UART_Receive_IT(&huart2,uart1_rx_buffer,1);
 8001f08:	4642      	mov	r2, r8
 8001f0a:	492b      	ldr	r1, [pc, #172]	; (8001fb8 <main+0x33c>)
 8001f0c:	4638      	mov	r0, r7
 8001f0e:	f7ff fd18 	bl	8001942 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 8001f12:	4630      	mov	r0, r6
 8001f14:	f7fe fa10 	bl	8000338 <HAL_ADC_Start>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 8001f18:	682a      	ldr	r2, [r5, #0]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001f1a:	2108      	movs	r1, #8
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 8001f1c:	69d3      	ldr	r3, [r2, #28]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001f1e:	4628      	mov	r0, r5
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 8001f20:	f043 0308 	orr.w	r3, r3, #8
 8001f24:	61d3      	str	r3, [r2, #28]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001f26:	f7ff fc3b 	bl	80017a0 <HAL_TIM_PWM_Start>
		  HAL_UART_Transmit_IT(&huart2, htm_data, 80);
 8001f2a:	4d24      	ldr	r5, [pc, #144]	; (8001fbc <main+0x340>)
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,1);
 8001f2c:	4642      	mov	r2, r8
 8001f2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f32:	4813      	ldr	r0, [pc, #76]	; (8001f80 <main+0x304>)
 8001f34:	f7fe fdc8 	bl	8000ac8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001f38:	20c8      	movs	r0, #200	; 0xc8
 8001f3a:	f7fe f92b 	bl	8000194 <HAL_Delay>
	  serial1_in_buff_count=0;
 8001f3e:	46a0      	mov	r8, r4
 8001f40:	462e      	mov	r6, r5
 8001f42:	4f1f      	ldr	r7, [pc, #124]	; (8001fc0 <main+0x344>)
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <main+0x304>)
	  serial1_in_buff_count=0;
 8001f4a:	f887 8000 	strb.w	r8, [r7]
	  if(inv_status==0){
 8001f4e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001fc8 <main+0x34c>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001f52:	f7fe fdbe 	bl	8000ad2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7fe f91c 	bl	8000194 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001f5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f60:	4807      	ldr	r0, [pc, #28]	; (8001f80 <main+0x304>)
 8001f62:	f7fe fdb6 	bl	8000ad2 <HAL_GPIO_TogglePin>
	  if(inv_status==0){
 8001f66:	f899 3000 	ldrb.w	r3, [r9]
		  HAL_UART_Transmit_IT(&huart2, htm_data, 80);
 8001f6a:	2250      	movs	r2, #80	; 0x50
	  if(inv_status==0){
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 80ab 	bne.w	80020c8 <main+0x44c>
 8001f72:	e02b      	b.n	8001fcc <main+0x350>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40011000 	.word	0x40011000
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	20000318 	.word	0x20000318
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	200001ac 	.word	0x200001ac
 8001f90:	40006400 	.word	0x40006400
 8001f94:	200001e0 	.word	0x200001e0
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	20000cbc 	.word	0x20000cbc
 8001fa0:	40004400 	.word	0x40004400
 8001fa4:	20000b5c 	.word	0x20000b5c
 8001fa8:	40013000 	.word	0x40013000
 8001fac:	20000bb4 	.word	0x20000bb4
 8001fb0:	200002e8 	.word	0x200002e8
 8001fb4:	40012400 	.word	0x40012400
 8001fb8:	20000220 	.word	0x20000220
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	200001a0 	.word	0x200001a0
 8001fc4:	0007a120 	.word	0x0007a120
 8001fc8:	200000a8 	.word	0x200000a8
		  HAL_UART_Transmit_IT(&huart2, htm_data, 80);
 8001fcc:	4629      	mov	r1, r5
 8001fce:	484f      	ldr	r0, [pc, #316]	; (800210c <main+0x490>)
 8001fd0:	f7ff fc98 	bl	8001904 <HAL_UART_Transmit_IT>
	  HAL_Delay(4);
 8001fd4:	2004      	movs	r0, #4
 8001fd6:	f7fe f8dd 	bl	8000194 <HAL_Delay>
	  if(CalcMTHChecksum()==0){
 8001fda:	f7ff fe13 	bl	8001c04 <CalcMTHChecksum>
 8001fde:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8002128 <main+0x4ac>
 8001fe2:	f8df a148 	ldr.w	sl, [pc, #328]	; 800212c <main+0x4b0>
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d17d      	bne.n	80020e6 <main+0x46a>
	  	  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1 );
 8001fea:	2201      	movs	r2, #1
 8001fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff0:	4847      	ldr	r0, [pc, #284]	; (8002110 <main+0x494>)
 8001ff2:	f7fe fd69 	bl	8000ac8 <HAL_GPIO_WritePin>
	    gear=get_gear();
 8001ff6:	f7ff fe17 	bl	8001c28 <get_gear>
 8001ffa:	f8df b134 	ldr.w	fp, [pc, #308]	; 8002130 <main+0x4b4>
 8001ffe:	f88b 0000 	strb.w	r0, [fp]
	    mg2_torque=get_torque(gear); // -3500 (reverse) to 3500 (forward)
 8002002:	f7ff fe1d 	bl	8001c40 <get_torque>
	    mg1_torque=((mg2_torque*5)/4);
 8002006:	2304      	movs	r3, #4
	    mg2_torque=get_torque(gear); // -3500 (reverse) to 3500 (forward)
 8002008:	4942      	ldr	r1, [pc, #264]	; (8002114 <main+0x498>)
 800200a:	b200      	sxth	r0, r0
 800200c:	8008      	strh	r0, [r1, #0]
	    mg1_torque=((mg2_torque*5)/4);
 800200e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002012:	fb90 f0f3 	sdiv	r0, r0, r3
	    if((mg2_speed>MG2MAXSPEED)||(mg2_speed<-MG2MAXSPEED))mg2_torque=0;
 8002016:	f644 6e20 	movw	lr, #20000	; 0x4e20
	    mg1_torque=((mg2_torque*5)/4);
 800201a:	4a3f      	ldr	r2, [pc, #252]	; (8002118 <main+0x49c>)
	    if((mg2_speed>MG2MAXSPEED)||(mg2_speed<-MG2MAXSPEED))mg2_torque=0;
 800201c:	f8ba 3000 	ldrh.w	r3, [sl]
	    mg1_torque=((mg2_torque*5)/4);
 8002020:	8010      	strh	r0, [r2, #0]
	    if((mg2_speed>MG2MAXSPEED)||(mg2_speed<-MG2MAXSPEED))mg2_torque=0;
 8002022:	f503 501c 	add.w	r0, r3, #9984	; 0x2700
 8002026:	3010      	adds	r0, #16
 8002028:	b280      	uxth	r0, r0
 800202a:	4570      	cmp	r0, lr
	    if(gear==REVERSE)mg1_torque=0;
 800202c:	f89b 0000 	ldrb.w	r0, [fp]
	    if((mg2_speed>MG2MAXSPEED)||(mg2_speed<-MG2MAXSPEED))mg2_torque=0;
 8002030:	bf88      	it	hi
 8002032:	800c      	strhhi	r4, [r1, #0]
	    if(gear==REVERSE)mg1_torque=0;
 8002034:	2801      	cmp	r0, #1
	    speedSum=mg2_speed+mg1_speed;
 8002036:	f8b9 0000 	ldrh.w	r0, [r9]
	    if(gear==REVERSE)mg1_torque=0;
 800203a:	bf08      	it	eq
 800203c:	8014      	strheq	r4, [r2, #0]
	    speedSum=mg2_speed+mg1_speed;
 800203e:	4403      	add	r3, r0
	    speedSum/=113;
 8002040:	2071      	movs	r0, #113	; 0x71
 8002042:	b21b      	sxth	r3, r3
 8002044:	fb93 f3f0 	sdiv	r3, r3, r0
	    htm_data[0]=(uint8_t)speedSum;
 8002048:	702b      	strb	r3, [r5, #0]
	    htm_data[75]=(mg1_torque*4)&0xFF;
 800204a:	f9b2 3000 	ldrsh.w	r3, [r2]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	0090      	lsls	r0, r2, #2
 8002052:	f885 004b 	strb.w	r0, [r5, #75]	; 0x4b
	    htm_data[76]=((mg1_torque*4)>>8);
 8002056:	1198      	asrs	r0, r3, #6
	    htm_data[6]=((mg1_torque*-1)>>8);
 8002058:	425b      	negs	r3, r3
 800205a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	    htm_data[5]=(mg1_torque*-1)&0xFF;  //negative is forward
 800205e:	4252      	negs	r2, r2
	    htm_data[6]=((mg1_torque*-1)>>8);
 8002060:	71ab      	strb	r3, [r5, #6]
	    htm_data[12]=htm_data[6];
 8002062:	732b      	strb	r3, [r5, #12]
	    htm_data[26]=(mg2_torque)&0xFF; //positive is forward
 8002064:	f9b1 3000 	ldrsh.w	r3, [r1]
	    htm_data[5]=(mg1_torque*-1)&0xFF;  //negative is forward
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	716a      	strb	r2, [r5, #5]
	    htm_data[11]=htm_data[5];
 800206c:	72ea      	strb	r2, [r5, #11]
	    htm_data[26]=(mg2_torque)&0xFF; //positive is forward
 800206e:	b2da      	uxtb	r2, r3
	    htm_data[27]=((mg2_torque)>>8);
 8002070:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002074:	76eb      	strb	r3, [r5, #27]
	    htm_data[33]=htm_data[27];
 8002076:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 800207a:	2300      	movs	r3, #0
	    htm_data[26]=(mg2_torque)&0xFF; //positive is forward
 800207c:	76aa      	strb	r2, [r5, #26]
	    htm_data[32]=htm_data[26];
 800207e:	f885 2020 	strb.w	r2, [r5, #32]
	    for(int i=0;i<78;i++)htm_checksum+=htm_data[i];
 8002082:	461a      	mov	r2, r3
	    htm_data[76]=((mg1_torque*4)>>8);
 8002084:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
	    for(int i=0;i<78;i++)htm_checksum+=htm_data[i];
 8002088:	5cb1      	ldrb	r1, [r6, r2]
 800208a:	3201      	adds	r2, #1
 800208c:	440b      	add	r3, r1
 800208e:	2a4e      	cmp	r2, #78	; 0x4e
 8002090:	b29b      	uxth	r3, r3
 8002092:	d1f9      	bne.n	8002088 <main+0x40c>
 8002094:	4a21      	ldr	r2, [pc, #132]	; (800211c <main+0x4a0>)
	    htm_data[78]=htm_checksum&0xFF;
 8002096:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 800209a:	8013      	strh	r3, [r2, #0]
	    htm_data[79]=htm_checksum>>8;
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
	  if(counter>100){
 80020a2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8002134 <main+0x4b8>
	  mth_data[98]=0;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <main+0x4a4>)
 80020a8:	f883 4062 	strb.w	r4, [r3, #98]	; 0x62
	  mth_data[99]=0;
 80020ac:	f883 4063 	strb.w	r4, [r3, #99]	; 0x63
	  if(counter>100){
 80020b0:	f8b9 3000 	ldrh.w	r3, [r9]
 80020b4:	2b64      	cmp	r3, #100	; 0x64
 80020b6:	d925      	bls.n	8002104 <main+0x488>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin );
 80020b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020bc:	4814      	ldr	r0, [pc, #80]	; (8002110 <main+0x494>)
 80020be:	f7fe fd08 	bl	8000ad2 <HAL_GPIO_TogglePin>
		  counter = 0;
 80020c2:	f8a9 4000 	strh.w	r4, [r9]
 80020c6:	e73d      	b.n	8001f44 <main+0x2c8>
		  HAL_UART_Transmit_IT(&huart2, htm_data_setup, 80);
 80020c8:	4916      	ldr	r1, [pc, #88]	; (8002124 <main+0x4a8>)
 80020ca:	4810      	ldr	r0, [pc, #64]	; (800210c <main+0x490>)
 80020cc:	f7ff fc1a 	bl	8001904 <HAL_UART_Transmit_IT>
		  if(mth_data[1]!=0)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <main+0x4a4>)
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f43f af7d 	beq.w	8001fd4 <main+0x358>
			  	 inv_status--;
 80020da:	f899 3000 	ldrb.w	r3, [r9]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f889 3000 	strb.w	r3, [r9]
 80020e4:	e776      	b.n	8001fd4 <main+0x358>
	  	  	mg1_speed=mth_data[6]|mth_data[7]<<8;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <main+0x4a4>)
 80020e8:	79d9      	ldrb	r1, [r3, #7]
 80020ea:	799a      	ldrb	r2, [r3, #6]
 80020ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020f0:	f8a9 2000 	strh.w	r2, [r9]
	  	  	mg2_speed=mth_data[31]|mth_data[32]<<8;
 80020f4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80020f8:	7fdb      	ldrb	r3, [r3, #31]
 80020fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020fe:	f8aa 3000 	strh.w	r3, [sl]
 8002102:	e778      	b.n	8001ff6 <main+0x37a>
		  counter++;
 8002104:	3301      	adds	r3, #1
 8002106:	f8a9 3000 	strh.w	r3, [r9]
 800210a:	e71b      	b.n	8001f44 <main+0x2c8>
 800210c:	20000cbc 	.word	0x20000cbc
 8002110:	40010c00 	.word	0x40010c00
 8002114:	200000d6 	.word	0x200000d6
 8002118:	200000d2 	.word	0x200000d2
 800211c:	200000ce 	.word	0x200000ce
 8002120:	200000d8 	.word	0x200000d8
 8002124:	20000058 	.word	0x20000058
 8002128:	200000d0 	.word	0x200000d0
 800212c:	200000d4 	.word	0x200000d4
 8002130:	200000cc 	.word	0x200000cc
 8002134:	20000358 	.word	0x20000358

08002138 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002138:	6802      	ldr	r2, [r0, #0]
 800213a:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800213c:	429a      	cmp	r2, r3
 800213e:	d101      	bne.n	8002144 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002140:	f7fe b816 	b.w	8000170 <HAL_IncTick>
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40012c00 	.word	0x40012c00

0800214c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800214c:	4770      	bx	lr
	...

08002150 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_MspInit+0x3c>)
{
 8002152:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	619a      	str	r2, [r3, #24]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	f002 0201 	and.w	r2, r2, #1
 8002162:	9200      	str	r2, [sp, #0]
 8002164:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800216c:	61da      	str	r2, [r3, #28]
 800216e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800217a:	6853      	ldr	r3, [r2, #4]
 800217c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002180:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002186:	b002      	add	sp, #8
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	40010000 	.word	0x40010000

08002194 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002194:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	2410      	movs	r4, #16
{
 8002198:	4605      	mov	r5, r0
 800219a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	4622      	mov	r2, r4
 800219e:	2100      	movs	r1, #0
 80021a0:	a802      	add	r0, sp, #8
 80021a2:	f000 fa83 	bl	80026ac <memset>
  if(hadc->Instance==ADC1)
 80021a6:	682a      	ldr	r2, [r5, #0]
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_ADC_MspInit+0x54>)
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11a      	bne.n	80021e4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ae:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80021b2:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	619a      	str	r2, [r3, #24]
 80021bc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	480b      	ldr	r0, [pc, #44]	; (80021ec <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021c0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	f042 0204 	orr.w	r2, r2, #4
 80021ce:	619a      	str	r2, [r3, #24]
 80021d0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021d2:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021dc:	2303      	movs	r3, #3
 80021de:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f7fe fb8a 	bl	80008f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021e4:	b007      	add	sp, #28
 80021e6:	bd30      	pop	{r4, r5, pc}
 80021e8:	40012400 	.word	0x40012400
 80021ec:	40010800 	.word	0x40010800

080021f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021f0:	b510      	push	{r4, lr}
 80021f2:	4604      	mov	r4, r0
 80021f4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	2210      	movs	r2, #16
 80021f8:	2100      	movs	r1, #0
 80021fa:	a802      	add	r0, sp, #8
 80021fc:	f000 fa56 	bl	80026ac <memset>
  if(hcan->Instance==CAN1)
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_CAN_MspInit+0x68>)
 8002204:	429a      	cmp	r2, r3
 8002206:	d125      	bne.n	8002254 <HAL_CAN_MspInit+0x64>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002208:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800220c:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002210:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002214:	61da      	str	r2, [r3, #28]
 8002216:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	4810      	ldr	r0, [pc, #64]	; (800225c <HAL_CAN_MspInit+0x6c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800221a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800221e:	9200      	str	r2, [sp, #0]
 8002220:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	f042 0204 	orr.w	r2, r2, #4
 8002228:	619a      	str	r2, [r3, #24]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002234:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002238:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f7fe fb5d 	bl	80008f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002248:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	a902      	add	r1, sp, #8
 800224c:	4803      	ldr	r0, [pc, #12]	; (800225c <HAL_CAN_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800224e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f7fe fb52 	bl	80008f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002254:	b006      	add	sp, #24
 8002256:	bd10      	pop	{r4, pc}
 8002258:	40006400 	.word	0x40006400
 800225c:	40010800 	.word	0x40010800

08002260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002260:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002262:	2410      	movs	r4, #16
{
 8002264:	4606      	mov	r6, r0
 8002266:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	4622      	mov	r2, r4
 800226a:	2100      	movs	r1, #0
 800226c:	a802      	add	r0, sp, #8
 800226e:	f000 fa1d 	bl	80026ac <memset>
  if(hspi->Instance==SPI1)
 8002272:	6832      	ldr	r2, [r6, #0]
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_SPI_MspInit+0xcc>)
 8002276:	429a      	cmp	r2, r3
 8002278:	d155      	bne.n	8002326 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800227a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800227e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002280:	2500      	movs	r5, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002282:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002286:	619a      	str	r2, [r3, #24]
 8002288:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800228c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002290:	9200      	str	r2, [sp, #0]
 8002292:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	4826      	ldr	r0, [pc, #152]	; (8002330 <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002298:	f042 0208 	orr.w	r2, r2, #8
 800229c:	619a      	str	r2, [r3, #24]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80022a8:	2328      	movs	r3, #40	; 0x28
 80022aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b4:	f7fe fb20 	bl	80008f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	481d      	ldr	r0, [pc, #116]	; (8002330 <HAL_SPI_MspInit+0xd0>)
 80022ba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022bc:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022be:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f7fe fb19 	bl	80008f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_SPI_MspInit+0xd4>)

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80022c8:	4c1b      	ldr	r4, [pc, #108]	; (8002338 <HAL_SPI_MspInit+0xd8>)
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80022ca:	6853      	ldr	r3, [r2, #4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80022cc:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80022ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6053      	str	r3, [r2, #4]
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_SPI_MspInit+0xdc>)
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022da:	60a5      	str	r5, [r4, #8]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022dc:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e0:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e2:	6125      	str	r5, [r4, #16]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e4:	60e3      	str	r3, [r4, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022e6:	6165      	str	r5, [r4, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80022e8:	61a5      	str	r5, [r4, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022ea:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80022ec:	f7fe f9f8 	bl	80006e0 <HAL_DMA_Init>
 80022f0:	b108      	cbz	r0, 80022f6 <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 80022f2:	f7ff ff2b 	bl	800214c <Error_Handler>

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022f6:	f04f 0c10 	mov.w	ip, #16
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_SPI_MspInit+0xe0>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80022fc:	64f4      	str	r4, [r6, #76]	; 0x4c
 80022fe:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002300:	4c10      	ldr	r4, [pc, #64]	; (8002344 <HAL_SPI_MspInit+0xe4>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002302:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002304:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002308:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800230a:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800230c:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800230e:	60e2      	str	r2, [r4, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002310:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002312:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002314:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002316:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002318:	f7fe f9e2 	bl	80006e0 <HAL_DMA_Init>
 800231c:	b108      	cbz	r0, 8002322 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 800231e:	f7ff ff15 	bl	800214c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002322:	64b4      	str	r4, [r6, #72]	; 0x48
 8002324:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002326:	b006      	add	sp, #24
 8002328:	bd70      	pop	{r4, r5, r6, pc}
 800232a:	bf00      	nop
 800232c:	40013000 	.word	0x40013000
 8002330:	40010c00 	.word	0x40010c00
 8002334:	40010000 	.word	0x40010000
 8002338:	20000cfc 	.word	0x20000cfc
 800233c:	4002001c 	.word	0x4002001c
 8002340:	40020030 	.word	0x40020030
 8002344:	20000d44 	.word	0x20000d44

08002348 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002348:	6803      	ldr	r3, [r0, #0]
{
 800234a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002350:	d115      	bne.n	800237e <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002352:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002356:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002358:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002360:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002362:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002364:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800236e:	f7fe f975 	bl	800065c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002372:	201c      	movs	r0, #28
 8002374:	f7fe f9a6 	bl	80006c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002378:	b003      	add	sp, #12
 800237a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_TIM_Base_MspInit+0x54>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d1f9      	bne.n	8002378 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_TIM_Base_MspInit+0x58>)
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	f042 0202 	orr.w	r2, r2, #2
 800238c:	61da      	str	r2, [r3, #28]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	9b01      	ldr	r3, [sp, #4]
}
 8002398:	e7ee      	b.n	8002378 <HAL_TIM_Base_MspInit+0x30>
 800239a:	bf00      	nop
 800239c:	40000400 	.word	0x40000400
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4604      	mov	r4, r0
 80023a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023aa:	2210      	movs	r2, #16
 80023ac:	2100      	movs	r1, #0
 80023ae:	a802      	add	r0, sp, #8
 80023b0:	f000 f97c 	bl	80026ac <memset>
  if(htim->Instance==TIM2)
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ba:	d11d      	bne.n	80023f8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023bc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80023c0:	699a      	ldr	r2, [r3, #24]
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = pclk_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(pclk_GPIO_Port, &GPIO_InitStruct);
 80023c2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c4:	f042 0208 	orr.w	r2, r2, #8
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(pclk_GPIO_Port, &GPIO_InitStruct);
 80023cc:	480b      	ldr	r0, [pc, #44]	; (80023fc <HAL_TIM_MspPostInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = pclk_Pin;
 80023d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(pclk_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f7fe fa89 	bl	80008f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <HAL_TIM_MspPostInit+0x5c>)
 80023e8:	6853      	ldr	r3, [r2, #4]
 80023ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023f8:	b006      	add	sp, #24
 80023fa:	bd10      	pop	{r4, pc}
 80023fc:	40010c00 	.word	0x40010c00
 8002400:	40010000 	.word	0x40010000

08002404 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	2210      	movs	r2, #16
{
 8002406:	b510      	push	{r4, lr}
 8002408:	4604      	mov	r4, r0
 800240a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	eb0d 0002 	add.w	r0, sp, r2
 8002410:	2100      	movs	r1, #0
 8002412:	f000 f94b 	bl	80026ac <memset>
  if(huart->Instance==USART1)
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_UART_MspInit+0xe0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d131      	bne.n	8002482 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800241e:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <HAL_UART_MspInit+0xe4>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8002422:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	4831      	ldr	r0, [pc, #196]	; (80024ec <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800242a:	619a      	str	r2, [r3, #24]
 800242c:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242e:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002430:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002434:	9200      	str	r2, [sp, #0]
 8002436:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	f042 0204 	orr.w	r2, r2, #4
 800243e:	619a      	str	r2, [r3, #24]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800244a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	f7fe fa4e 	bl	80008f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	a904      	add	r1, sp, #16
 8002462:	4822      	ldr	r0, [pc, #136]	; (80024ec <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002464:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002466:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f7fe fa45 	bl	80008f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800246e:	2025      	movs	r0, #37	; 0x25
 8002470:	4622      	mov	r2, r4
 8002472:	4621      	mov	r1, r4
 8002474:	f7fe f8f2 	bl	800065c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002478:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800247a:	f7fe f923 	bl	80006c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800247e:	b008      	add	sp, #32
 8002480:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_UART_MspInit+0xec>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d1fa      	bne.n	800247e <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800248c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	4817      	ldr	r0, [pc, #92]	; (80024ec <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002490:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002494:	61da      	str	r2, [r3, #28]
 8002496:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002498:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 800249a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800249e:	9202      	str	r2, [sp, #8]
 80024a0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	f042 0204 	orr.w	r2, r2, #4
 80024a8:	619a      	str	r2, [r3, #24]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	9303      	str	r3, [sp, #12]
 80024b2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024b4:	2304      	movs	r3, #4
 80024b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f7fe fa1a 	bl	80008f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024c4:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	a904      	add	r1, sp, #16
 80024c8:	4808      	ldr	r0, [pc, #32]	; (80024ec <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024cc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f7fe fa12 	bl	80008f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024d4:	2026      	movs	r0, #38	; 0x26
 80024d6:	4622      	mov	r2, r4
 80024d8:	4621      	mov	r1, r4
 80024da:	f7fe f8bf 	bl	800065c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024de:	2026      	movs	r0, #38	; 0x26
 80024e0:	e7cb      	b.n	800247a <HAL_UART_MspInit+0x76>
 80024e2:	bf00      	nop
 80024e4:	40013800 	.word	0x40013800
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010800 	.word	0x40010800
 80024f0:	40004400 	.word	0x40004400

080024f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80024f6:	4601      	mov	r1, r0
{
 80024f8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80024fa:	2200      	movs	r2, #0
 80024fc:	2019      	movs	r0, #25
 80024fe:	f7fe f8ad 	bl	800065c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8002502:	2019      	movs	r0, #25
 8002504:	f7fe f8de 	bl	80006c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002508:	4b14      	ldr	r3, [pc, #80]	; (800255c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800250a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 800250c:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800250e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002514:	619a      	str	r2, [r3, #24]
 8002516:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002518:	4c11      	ldr	r4, [pc, #68]	; (8002560 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800251a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002522:	f7fe fd75 	bl	8001010 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002526:	f7fe fd63 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_InitTick+0x70>)
 800252c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800252e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002532:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_InitTick+0x74>)
 8002536:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800253a:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800253c:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800253e:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002540:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002542:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002544:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002546:	f7fe ff99 	bl	800147c <HAL_TIM_Base_Init>
 800254a:	b920      	cbnz	r0, 8002556 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800254c:	4620      	mov	r0, r4
 800254e:	f7fe fea5 	bl	800129c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002552:	b008      	add	sp, #32
 8002554:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002556:	2001      	movs	r0, #1
 8002558:	e7fb      	b.n	8002552 <HAL_InitTick+0x5e>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	20000f40 	.word	0x20000f40
 8002564:	40012c00 	.word	0x40012c00
 8002568:	000f4240 	.word	0x000f4240

0800256c <NMI_Handler>:
 800256c:	4770      	bx	lr

0800256e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256e:	e7fe      	b.n	800256e <HardFault_Handler>

08002570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002570:	e7fe      	b.n	8002570 <MemManage_Handler>

08002572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002572:	e7fe      	b.n	8002572 <BusFault_Handler>

08002574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002574:	e7fe      	b.n	8002574 <UsageFault_Handler>

08002576 <SVC_Handler>:
 8002576:	4770      	bx	lr

08002578 <DebugMon_Handler>:
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	4770      	bx	lr

0800257c <DMA1_Channel2_IRQHandler>:
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	dma_complete=1;
 800257c:	2201      	movs	r2, #1
 800257e:	4b02      	ldr	r3, [pc, #8]	; (8002588 <DMA1_Channel2_IRQHandler+0xc>)
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <DMA1_Channel2_IRQHandler+0x10>)
	dma_complete=1;
 8002582:	701a      	strb	r2, [r3, #0]
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002584:	f7fe b924 	b.w	80007d0 <HAL_DMA_IRQHandler>
 8002588:	20000d40 	.word	0x20000d40
 800258c:	20000cfc 	.word	0x20000cfc

08002590 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002590:	4801      	ldr	r0, [pc, #4]	; (8002598 <DMA1_Channel3_IRQHandler+0x8>)
 8002592:	f7fe b91d 	b.w	80007d0 <HAL_DMA_IRQHandler>
 8002596:	bf00      	nop
 8002598:	20000d44 	.word	0x20000d44

0800259c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800259c:	4801      	ldr	r0, [pc, #4]	; (80025a4 <TIM1_UP_IRQHandler+0x8>)
 800259e:	f7fe be93 	b.w	80012c8 <HAL_TIM_IRQHandler>
 80025a2:	bf00      	nop
 80025a4:	20000f40 	.word	0x20000f40

080025a8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025a8:	4801      	ldr	r0, [pc, #4]	; (80025b0 <TIM2_IRQHandler+0x8>)
 80025aa:	f7fe be8d 	b.w	80012c8 <HAL_TIM_IRQHandler>
 80025ae:	bf00      	nop
 80025b0:	20000bb4 	.word	0x20000bb4

080025b4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025b4:	4801      	ldr	r0, [pc, #4]	; (80025bc <USART1_IRQHandler+0x8>)
 80025b6:	f7ff ba2b 	b.w	8001a10 <HAL_UART_IRQHandler>
 80025ba:	bf00      	nop
 80025bc:	20000318 	.word	0x20000318

080025c0 <USART2_IRQHandler>:
				}
		//USART_ClearITPendingBit(USART2, USART_IT_TXE);
	}

#endif
	 HAL_UART_IRQHandler(&huart2);
 80025c0:	4801      	ldr	r0, [pc, #4]	; (80025c8 <USART2_IRQHandler+0x8>)
 80025c2:	f7ff ba25 	b.w	8001a10 <HAL_UART_IRQHandler>
 80025c6:	bf00      	nop
 80025c8:	20000cbc 	.word	0x20000cbc

080025cc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <SystemInit+0x40>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <SystemInit+0x44>)
 80025da:	400a      	ands	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80025e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80025f8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80025fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002600:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <SystemInit+0x48>)
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	f8ff0000 	.word	0xf8ff0000
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002618:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800261a:	e003      	b.n	8002624 <LoopCopyDataInit>

0800261c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800261e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002620:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002622:	3104      	adds	r1, #4

08002624 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002624:	480a      	ldr	r0, [pc, #40]	; (8002650 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002628:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800262a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800262c:	d3f6      	bcc.n	800261c <CopyDataInit>
  ldr r2, =_sbss
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002630:	e002      	b.n	8002638 <LoopFillZerobss>

08002632 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002634:	f842 3b04 	str.w	r3, [r2], #4

08002638 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800263a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800263c:	d3f9      	bcc.n	8002632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800263e:	f7ff ffc5 	bl	80025cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002642:	f000 f80f 	bl	8002664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002646:	f7ff fb19 	bl	8001c7c <main>
  bx lr
 800264a:	4770      	bx	lr
  ldr r3, =_sidata
 800264c:	08002704 	.word	0x08002704
  ldr r0, =_sdata
 8002650:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002654:	200000b0 	.word	0x200000b0
  ldr r2, =_sbss
 8002658:	200000b0 	.word	0x200000b0
  ldr r3, = _ebss
 800265c:	20000f80 	.word	0x20000f80

08002660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC1_2_IRQHandler>
	...

08002664 <__libc_init_array>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	2500      	movs	r5, #0
 8002668:	4e0c      	ldr	r6, [pc, #48]	; (800269c <__libc_init_array+0x38>)
 800266a:	4c0d      	ldr	r4, [pc, #52]	; (80026a0 <__libc_init_array+0x3c>)
 800266c:	1ba4      	subs	r4, r4, r6
 800266e:	10a4      	asrs	r4, r4, #2
 8002670:	42a5      	cmp	r5, r4
 8002672:	d109      	bne.n	8002688 <__libc_init_array+0x24>
 8002674:	f000 f822 	bl	80026bc <_init>
 8002678:	2500      	movs	r5, #0
 800267a:	4e0a      	ldr	r6, [pc, #40]	; (80026a4 <__libc_init_array+0x40>)
 800267c:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <__libc_init_array+0x44>)
 800267e:	1ba4      	subs	r4, r4, r6
 8002680:	10a4      	asrs	r4, r4, #2
 8002682:	42a5      	cmp	r5, r4
 8002684:	d105      	bne.n	8002692 <__libc_init_array+0x2e>
 8002686:	bd70      	pop	{r4, r5, r6, pc}
 8002688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800268c:	4798      	blx	r3
 800268e:	3501      	adds	r5, #1
 8002690:	e7ee      	b.n	8002670 <__libc_init_array+0xc>
 8002692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002696:	4798      	blx	r3
 8002698:	3501      	adds	r5, #1
 800269a:	e7f2      	b.n	8002682 <__libc_init_array+0x1e>
 800269c:	080026fc 	.word	0x080026fc
 80026a0:	080026fc 	.word	0x080026fc
 80026a4:	080026fc 	.word	0x080026fc
 80026a8:	08002700 	.word	0x08002700

080026ac <memset>:
 80026ac:	4603      	mov	r3, r0
 80026ae:	4402      	add	r2, r0
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d100      	bne.n	80026b6 <memset+0xa>
 80026b4:	4770      	bx	lr
 80026b6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ba:	e7f9      	b.n	80026b0 <memset+0x4>

080026bc <_init>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr

080026c8 <_fini>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr
