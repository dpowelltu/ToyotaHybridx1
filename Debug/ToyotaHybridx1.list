
ToyotaHybridx1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002084  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002190  08002190  00012190  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080021b8  080021b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080021bc  080021bc  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080021c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e24  2000000c  080021cc  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000e30  080021cc  00020e30  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001274a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029b8  00000000  00000000  0003277f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009adf  00000000  00000000  00035137  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cc8  00000000  00000000  0003ec18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001150  00000000  00000000  0003f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006adc  00000000  00000000  00040a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004b10  00000000  00000000  0004750c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004c01c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002760  00000000  00000000  0004c098  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002178 	.word	0x08002178

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002178 	.word	0x08002178

0800014c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800014c:	4a07      	ldr	r2, [pc, #28]	; (800016c <HAL_Init+0x20>)
{
 800014e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000152:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	f043 0310 	orr.w	r3, r3, #16
 8000158:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015a:	f000 f8a9 	bl	80002b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800015e:	2000      	movs	r0, #0
 8000160:	f001 ff20 	bl	8001fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000164:	f001 fdaa 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000168:	2000      	movs	r0, #0
 800016a:	bd08      	pop	{r3, pc}
 800016c:	40022000 	.word	0x40022000

08000170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000170:	4a03      	ldr	r2, [pc, #12]	; (8000180 <HAL_IncTick+0x10>)
 8000172:	4b04      	ldr	r3, [pc, #16]	; (8000184 <HAL_IncTick+0x14>)
 8000174:	6811      	ldr	r1, [r2, #0]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	440b      	add	r3, r1
 800017a:	6013      	str	r3, [r2, #0]
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	2000022c 	.word	0x2000022c
 8000184:	20000000 	.word	0x20000000

08000188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000188:	4b01      	ldr	r3, [pc, #4]	; (8000190 <HAL_GetTick+0x8>)
 800018a:	6818      	ldr	r0, [r3, #0]
}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	2000022c 	.word	0x2000022c

08000194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000194:	b538      	push	{r3, r4, r5, lr}
 8000196:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000198:	f7ff fff6 	bl	8000188 <HAL_GetTick>
 800019c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800019e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001a0:	bf1e      	ittt	ne
 80001a2:	4b04      	ldrne	r3, [pc, #16]	; (80001b4 <HAL_Delay+0x20>)
 80001a4:	781b      	ldrbne	r3, [r3, #0]
 80001a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001a8:	f7ff ffee 	bl	8000188 <HAL_GetTick>
 80001ac:	1b40      	subs	r0, r0, r5
 80001ae:	4284      	cmp	r4, r0
 80001b0:	d8fa      	bhi.n	80001a8 <HAL_Delay+0x14>
  {
  }
}
 80001b2:	bd38      	pop	{r3, r4, r5, pc}
 80001b4:	20000000 	.word	0x20000000

080001b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80001b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80001ba:	4604      	mov	r4, r0
 80001bc:	2800      	cmp	r0, #0
 80001be:	d06e      	beq.n	800029e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80001c0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80001c4:	b90b      	cbnz	r3, 80001ca <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80001c6:	f001 fd9b 	bl	8001d00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80001ca:	6822      	ldr	r2, [r4, #0]
 80001cc:	6813      	ldr	r3, [r2, #0]
 80001ce:	f023 0302 	bic.w	r3, r3, #2
 80001d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80001d4:	f7ff ffd8 	bl	8000188 <HAL_GetTick>
 80001d8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80001da:	6823      	ldr	r3, [r4, #0]
 80001dc:	685a      	ldr	r2, [r3, #4]
 80001de:	0791      	lsls	r1, r2, #30
 80001e0:	d451      	bmi.n	8000286 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	f042 0201 	orr.w	r2, r2, #1
 80001e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80001ea:	f7ff ffcd 	bl	8000188 <HAL_GetTick>
 80001ee:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80001f0:	6823      	ldr	r3, [r4, #0]
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	07d2      	lsls	r2, r2, #31
 80001f6:	d554      	bpl.n	80002a2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80001f8:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80001fa:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80001fc:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	bf0c      	ite	eq
 8000202:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000206:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800020a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800020c:	7e62      	ldrb	r2, [r4, #25]
 800020e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	bf0c      	ite	eq
 8000214:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000218:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800021c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800021e:	7ea2      	ldrb	r2, [r4, #26]
 8000220:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	bf0c      	ite	eq
 8000226:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800022a:	f022 0220 	bicne.w	r2, r2, #32
 800022e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000230:	7ee2      	ldrb	r2, [r4, #27]
 8000232:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	bf0c      	ite	eq
 8000238:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800023c:	f042 0210 	orrne.w	r2, r2, #16
 8000240:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000242:	7f22      	ldrb	r2, [r4, #28]
 8000244:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	bf0c      	ite	eq
 800024a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800024e:	f022 0208 	bicne.w	r2, r2, #8
 8000252:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000254:	7f62      	ldrb	r2, [r4, #29]
 8000256:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	bf0c      	ite	eq
 800025c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000260:	f022 0204 	bicne.w	r2, r2, #4
 8000264:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000266:	68e1      	ldr	r1, [r4, #12]
 8000268:	68a2      	ldr	r2, [r4, #8]
 800026a:	430a      	orrs	r2, r1
 800026c:	6921      	ldr	r1, [r4, #16]
 800026e:	430a      	orrs	r2, r1
 8000270:	6961      	ldr	r1, [r4, #20]
 8000272:	430a      	orrs	r2, r1
 8000274:	6861      	ldr	r1, [r4, #4]
 8000276:	3901      	subs	r1, #1
 8000278:	430a      	orrs	r2, r1
 800027a:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800027c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800027e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000280:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000284:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000286:	f7ff ff7f 	bl	8000188 <HAL_GetTick>
 800028a:	1b40      	subs	r0, r0, r5
 800028c:	280a      	cmp	r0, #10
 800028e:	d9a4      	bls.n	80001da <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000298:	2305      	movs	r3, #5
 800029a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800029e:	2001      	movs	r0, #1
}
 80002a0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002a2:	f7ff ff71 	bl	8000188 <HAL_GetTick>
 80002a6:	1b40      	subs	r0, r0, r5
 80002a8:	280a      	cmp	r0, #10
 80002aa:	d9a1      	bls.n	80001f0 <HAL_CAN_Init+0x38>
 80002ac:	e7f0      	b.n	8000290 <HAL_CAN_Init+0xd8>
	...

080002b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b0:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002be:	041b      	lsls	r3, r3, #16
 80002c0:	0c1b      	lsrs	r3, r3, #16
 80002c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002cc:	60d3      	str	r3, [r2, #12]
 80002ce:	4770      	bx	lr
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002d6:	b530      	push	{r4, r5, lr}
 80002d8:	68dc      	ldr	r4, [r3, #12]
 80002da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e4:	2b04      	cmp	r3, #4
 80002e6:	bf28      	it	cs
 80002e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f0:	bf98      	it	ls
 80002f2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f4:	fa05 f303 	lsl.w	r3, r5, r3
 80002f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002fc:	bf88      	it	hi
 80002fe:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000300:	4019      	ands	r1, r3
 8000302:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000304:	fa05 f404 	lsl.w	r4, r5, r4
 8000308:	3c01      	subs	r4, #1
 800030a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800030c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800030e:	ea42 0201 	orr.w	r2, r2, r1
 8000312:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	bfa9      	itett	ge
 8000318:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	4b06      	ldrlt	r3, [pc, #24]	; (8000338 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	b2d2      	uxtbge	r2, r2
 8000320:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	bfbb      	ittet	lt
 8000326:	f000 000f 	andlt.w	r0, r0, #15
 800032a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000330:	541a      	strblt	r2, [r3, r0]
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000ed14 	.word	0xe000ed14

0800033c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800033c:	2800      	cmp	r0, #0
 800033e:	db08      	blt.n	8000352 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000340:	2301      	movs	r3, #1
 8000342:	0942      	lsrs	r2, r0, #5
 8000344:	f000 001f 	and.w	r0, r0, #31
 8000348:	fa03 f000 	lsl.w	r0, r3, r0
 800034c:	4b01      	ldr	r3, [pc, #4]	; (8000354 <HAL_NVIC_EnableIRQ+0x18>)
 800034e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000352:	4770      	bx	lr
 8000354:	e000e100 	.word	0xe000e100

08000358 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000358:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800035c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800035e:	2b02      	cmp	r3, #2
 8000360:	d003      	beq.n	800036a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000362:	2304      	movs	r3, #4
 8000364:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000366:	2001      	movs	r0, #1
 8000368:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800036a:	6803      	ldr	r3, [r0, #0]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	f022 020e 	bic.w	r2, r2, #14
 8000372:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	f022 0201 	bic.w	r2, r2, #1
 800037a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800037c:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <HAL_DMA_Abort_IT+0x88>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d01f      	beq.n	80003c2 <HAL_DMA_Abort_IT+0x6a>
 8000382:	3214      	adds	r2, #20
 8000384:	4293      	cmp	r3, r2
 8000386:	d01e      	beq.n	80003c6 <HAL_DMA_Abort_IT+0x6e>
 8000388:	3214      	adds	r2, #20
 800038a:	4293      	cmp	r3, r2
 800038c:	d01d      	beq.n	80003ca <HAL_DMA_Abort_IT+0x72>
 800038e:	3214      	adds	r2, #20
 8000390:	4293      	cmp	r3, r2
 8000392:	d01d      	beq.n	80003d0 <HAL_DMA_Abort_IT+0x78>
 8000394:	3214      	adds	r2, #20
 8000396:	4293      	cmp	r3, r2
 8000398:	d01d      	beq.n	80003d6 <HAL_DMA_Abort_IT+0x7e>
 800039a:	3214      	adds	r2, #20
 800039c:	4293      	cmp	r3, r2
 800039e:	bf0c      	ite	eq
 80003a0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80003a4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80003a8:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80003aa:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003ac:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80003ae:	2301      	movs	r3, #1
 80003b0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80003b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80003b6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80003ba:	b17b      	cbz	r3, 80003dc <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80003bc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80003be:	4620      	mov	r0, r4
 80003c0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003c2:	2301      	movs	r3, #1
 80003c4:	e7f0      	b.n	80003a8 <HAL_DMA_Abort_IT+0x50>
 80003c6:	2310      	movs	r3, #16
 80003c8:	e7ee      	b.n	80003a8 <HAL_DMA_Abort_IT+0x50>
 80003ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ce:	e7eb      	b.n	80003a8 <HAL_DMA_Abort_IT+0x50>
 80003d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d4:	e7e8      	b.n	80003a8 <HAL_DMA_Abort_IT+0x50>
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	e7e5      	b.n	80003a8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80003dc:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80003de:	bd10      	pop	{r4, pc}
 80003e0:	40020008 	.word	0x40020008
 80003e4:	40020000 	.word	0x40020000

080003e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003ec:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80003ee:	4626      	mov	r6, r4
 80003f0:	4b66      	ldr	r3, [pc, #408]	; (800058c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003f2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800059c <HAL_GPIO_Init+0x1b4>
 80003f6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80005a0 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003fa:	680a      	ldr	r2, [r1, #0]
 80003fc:	fa32 f506 	lsrs.w	r5, r2, r6
 8000400:	d102      	bne.n	8000408 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000402:	b003      	add	sp, #12
 8000404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000408:	f04f 0801 	mov.w	r8, #1
 800040c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000410:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000414:	4590      	cmp	r8, r2
 8000416:	d17f      	bne.n	8000518 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000418:	684d      	ldr	r5, [r1, #4]
 800041a:	2d12      	cmp	r5, #18
 800041c:	f000 80aa 	beq.w	8000574 <HAL_GPIO_Init+0x18c>
 8000420:	f200 8083 	bhi.w	800052a <HAL_GPIO_Init+0x142>
 8000424:	2d02      	cmp	r5, #2
 8000426:	f000 80a2 	beq.w	800056e <HAL_GPIO_Init+0x186>
 800042a:	d877      	bhi.n	800051c <HAL_GPIO_Init+0x134>
 800042c:	2d00      	cmp	r5, #0
 800042e:	f000 8089 	beq.w	8000544 <HAL_GPIO_Init+0x15c>
 8000432:	2d01      	cmp	r5, #1
 8000434:	f000 8099 	beq.w	800056a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000438:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800043c:	2aff      	cmp	r2, #255	; 0xff
 800043e:	bf93      	iteet	ls
 8000440:	4682      	movls	sl, r0
 8000442:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000446:	3d08      	subhi	r5, #8
 8000448:	f8d0 b000 	ldrls.w	fp, [r0]
 800044c:	bf92      	itee	ls
 800044e:	00b5      	lslls	r5, r6, #2
 8000450:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000454:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000456:	fa09 f805 	lsl.w	r8, r9, r5
 800045a:	ea2b 0808 	bic.w	r8, fp, r8
 800045e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000462:	bf88      	it	hi
 8000464:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000468:	ea48 0505 	orr.w	r5, r8, r5
 800046c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000470:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000474:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000478:	d04e      	beq.n	8000518 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800047a:	4d45      	ldr	r5, [pc, #276]	; (8000590 <HAL_GPIO_Init+0x1a8>)
 800047c:	4f44      	ldr	r7, [pc, #272]	; (8000590 <HAL_GPIO_Init+0x1a8>)
 800047e:	69ad      	ldr	r5, [r5, #24]
 8000480:	f026 0803 	bic.w	r8, r6, #3
 8000484:	f045 0501 	orr.w	r5, r5, #1
 8000488:	61bd      	str	r5, [r7, #24]
 800048a:	69bd      	ldr	r5, [r7, #24]
 800048c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000490:	f005 0501 	and.w	r5, r5, #1
 8000494:	9501      	str	r5, [sp, #4]
 8000496:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800049a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800049e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80004a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80004a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80004a8:	fa09 f90b 	lsl.w	r9, r9, fp
 80004ac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80004b0:	4d38      	ldr	r5, [pc, #224]	; (8000594 <HAL_GPIO_Init+0x1ac>)
 80004b2:	42a8      	cmp	r0, r5
 80004b4:	d063      	beq.n	800057e <HAL_GPIO_Init+0x196>
 80004b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004ba:	42a8      	cmp	r0, r5
 80004bc:	d061      	beq.n	8000582 <HAL_GPIO_Init+0x19a>
 80004be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004c2:	42a8      	cmp	r0, r5
 80004c4:	d05f      	beq.n	8000586 <HAL_GPIO_Init+0x19e>
 80004c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004ca:	42a8      	cmp	r0, r5
 80004cc:	bf0c      	ite	eq
 80004ce:	2503      	moveq	r5, #3
 80004d0:	2504      	movne	r5, #4
 80004d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80004d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80004da:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80004de:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80004e4:	bf14      	ite	ne
 80004e6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80004e8:	4395      	biceq	r5, r2
 80004ea:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80004ec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80004f2:	bf14      	ite	ne
 80004f4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004f6:	4395      	biceq	r5, r2
 80004f8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80004fa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000500:	bf14      	ite	ne
 8000502:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000504:	4395      	biceq	r5, r2
 8000506:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000508:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800050a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800050e:	bf14      	ite	ne
 8000510:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000512:	ea25 0202 	biceq.w	r2, r5, r2
 8000516:	60da      	str	r2, [r3, #12]
	position++;
 8000518:	3601      	adds	r6, #1
 800051a:	e76e      	b.n	80003fa <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800051c:	2d03      	cmp	r5, #3
 800051e:	d022      	beq.n	8000566 <HAL_GPIO_Init+0x17e>
 8000520:	2d11      	cmp	r5, #17
 8000522:	d189      	bne.n	8000438 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000524:	68cc      	ldr	r4, [r1, #12]
 8000526:	3404      	adds	r4, #4
          break;
 8000528:	e786      	b.n	8000438 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800052a:	4f1b      	ldr	r7, [pc, #108]	; (8000598 <HAL_GPIO_Init+0x1b0>)
 800052c:	42bd      	cmp	r5, r7
 800052e:	d009      	beq.n	8000544 <HAL_GPIO_Init+0x15c>
 8000530:	d812      	bhi.n	8000558 <HAL_GPIO_Init+0x170>
 8000532:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80005a4 <HAL_GPIO_Init+0x1bc>
 8000536:	454d      	cmp	r5, r9
 8000538:	d004      	beq.n	8000544 <HAL_GPIO_Init+0x15c>
 800053a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800053e:	454d      	cmp	r5, r9
 8000540:	f47f af7a 	bne.w	8000438 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000544:	688c      	ldr	r4, [r1, #8]
 8000546:	b1c4      	cbz	r4, 800057a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000548:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800054a:	bf0c      	ite	eq
 800054c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000550:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000554:	2408      	movs	r4, #8
 8000556:	e76f      	b.n	8000438 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000558:	4575      	cmp	r5, lr
 800055a:	d0f3      	beq.n	8000544 <HAL_GPIO_Init+0x15c>
 800055c:	4565      	cmp	r5, ip
 800055e:	d0f1      	beq.n	8000544 <HAL_GPIO_Init+0x15c>
 8000560:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80005a8 <HAL_GPIO_Init+0x1c0>
 8000564:	e7eb      	b.n	800053e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000566:	2400      	movs	r4, #0
 8000568:	e766      	b.n	8000438 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800056a:	68cc      	ldr	r4, [r1, #12]
          break;
 800056c:	e764      	b.n	8000438 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800056e:	68cc      	ldr	r4, [r1, #12]
 8000570:	3408      	adds	r4, #8
          break;
 8000572:	e761      	b.n	8000438 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000574:	68cc      	ldr	r4, [r1, #12]
 8000576:	340c      	adds	r4, #12
          break;
 8000578:	e75e      	b.n	8000438 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800057a:	2404      	movs	r4, #4
 800057c:	e75c      	b.n	8000438 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800057e:	2500      	movs	r5, #0
 8000580:	e7a7      	b.n	80004d2 <HAL_GPIO_Init+0xea>
 8000582:	2501      	movs	r5, #1
 8000584:	e7a5      	b.n	80004d2 <HAL_GPIO_Init+0xea>
 8000586:	2502      	movs	r5, #2
 8000588:	e7a3      	b.n	80004d2 <HAL_GPIO_Init+0xea>
 800058a:	bf00      	nop
 800058c:	40010400 	.word	0x40010400
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800
 8000598:	10210000 	.word	0x10210000
 800059c:	10310000 	.word	0x10310000
 80005a0:	10320000 	.word	0x10320000
 80005a4:	10110000 	.word	0x10110000
 80005a8:	10220000 	.word	0x10220000

080005ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80005ac:	b10a      	cbz	r2, 80005b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005ae:	6101      	str	r1, [r0, #16]
 80005b0:	4770      	bx	lr
 80005b2:	0409      	lsls	r1, r1, #16
 80005b4:	e7fb      	b.n	80005ae <HAL_GPIO_WritePin+0x2>

080005b6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80005b6:	68c3      	ldr	r3, [r0, #12]
 80005b8:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80005ba:	bf14      	ite	ne
 80005bc:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80005be:	6101      	streq	r1, [r0, #16]
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80005c8:	4605      	mov	r5, r0
 80005ca:	b908      	cbnz	r0, 80005d0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80005cc:	2001      	movs	r0, #1
 80005ce:	e03c      	b.n	800064a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005d0:	6803      	ldr	r3, [r0, #0]
 80005d2:	07db      	lsls	r3, r3, #31
 80005d4:	d410      	bmi.n	80005f8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005d6:	682b      	ldr	r3, [r5, #0]
 80005d8:	079f      	lsls	r7, r3, #30
 80005da:	d45d      	bmi.n	8000698 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005dc:	682b      	ldr	r3, [r5, #0]
 80005de:	0719      	lsls	r1, r3, #28
 80005e0:	f100 8094 	bmi.w	800070c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005e4:	682b      	ldr	r3, [r5, #0]
 80005e6:	075a      	lsls	r2, r3, #29
 80005e8:	f100 80be 	bmi.w	8000768 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005ec:	69e8      	ldr	r0, [r5, #28]
 80005ee:	2800      	cmp	r0, #0
 80005f0:	f040 812c 	bne.w	800084c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80005f4:	2000      	movs	r0, #0
 80005f6:	e028      	b.n	800064a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005f8:	4c8f      	ldr	r4, [pc, #572]	; (8000838 <HAL_RCC_OscConfig+0x274>)
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	f003 030c 	and.w	r3, r3, #12
 8000600:	2b04      	cmp	r3, #4
 8000602:	d007      	beq.n	8000614 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000604:	6863      	ldr	r3, [r4, #4]
 8000606:	f003 030c 	and.w	r3, r3, #12
 800060a:	2b08      	cmp	r3, #8
 800060c:	d109      	bne.n	8000622 <HAL_RCC_OscConfig+0x5e>
 800060e:	6863      	ldr	r3, [r4, #4]
 8000610:	03de      	lsls	r6, r3, #15
 8000612:	d506      	bpl.n	8000622 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000614:	6823      	ldr	r3, [r4, #0]
 8000616:	039c      	lsls	r4, r3, #14
 8000618:	d5dd      	bpl.n	80005d6 <HAL_RCC_OscConfig+0x12>
 800061a:	686b      	ldr	r3, [r5, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1da      	bne.n	80005d6 <HAL_RCC_OscConfig+0x12>
 8000620:	e7d4      	b.n	80005cc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000622:	686b      	ldr	r3, [r5, #4]
 8000624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000628:	d112      	bne.n	8000650 <HAL_RCC_OscConfig+0x8c>
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000630:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000632:	f7ff fda9 	bl	8000188 <HAL_GetTick>
 8000636:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000638:	6823      	ldr	r3, [r4, #0]
 800063a:	0398      	lsls	r0, r3, #14
 800063c:	d4cb      	bmi.n	80005d6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800063e:	f7ff fda3 	bl	8000188 <HAL_GetTick>
 8000642:	1b80      	subs	r0, r0, r6
 8000644:	2864      	cmp	r0, #100	; 0x64
 8000646:	d9f7      	bls.n	8000638 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000648:	2003      	movs	r0, #3
}
 800064a:	b002      	add	sp, #8
 800064c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000650:	b99b      	cbnz	r3, 800067a <HAL_RCC_OscConfig+0xb6>
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000658:	6023      	str	r3, [r4, #0]
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000660:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000662:	f7ff fd91 	bl	8000188 <HAL_GetTick>
 8000666:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000668:	6823      	ldr	r3, [r4, #0]
 800066a:	0399      	lsls	r1, r3, #14
 800066c:	d5b3      	bpl.n	80005d6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800066e:	f7ff fd8b 	bl	8000188 <HAL_GetTick>
 8000672:	1b80      	subs	r0, r0, r6
 8000674:	2864      	cmp	r0, #100	; 0x64
 8000676:	d9f7      	bls.n	8000668 <HAL_RCC_OscConfig+0xa4>
 8000678:	e7e6      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800067a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	d103      	bne.n	800068a <HAL_RCC_OscConfig+0xc6>
 8000682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000686:	6023      	str	r3, [r4, #0]
 8000688:	e7cf      	b.n	800062a <HAL_RCC_OscConfig+0x66>
 800068a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800068e:	6023      	str	r3, [r4, #0]
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	e7cb      	b.n	8000630 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000698:	4c67      	ldr	r4, [pc, #412]	; (8000838 <HAL_RCC_OscConfig+0x274>)
 800069a:	6863      	ldr	r3, [r4, #4]
 800069c:	f013 0f0c 	tst.w	r3, #12
 80006a0:	d007      	beq.n	80006b2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006a2:	6863      	ldr	r3, [r4, #4]
 80006a4:	f003 030c 	and.w	r3, r3, #12
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d110      	bne.n	80006ce <HAL_RCC_OscConfig+0x10a>
 80006ac:	6863      	ldr	r3, [r4, #4]
 80006ae:	03da      	lsls	r2, r3, #15
 80006b0:	d40d      	bmi.n	80006ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006b2:	6823      	ldr	r3, [r4, #0]
 80006b4:	079b      	lsls	r3, r3, #30
 80006b6:	d502      	bpl.n	80006be <HAL_RCC_OscConfig+0xfa>
 80006b8:	692b      	ldr	r3, [r5, #16]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d186      	bne.n	80005cc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	696a      	ldr	r2, [r5, #20]
 80006c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80006ca:	6023      	str	r3, [r4, #0]
 80006cc:	e786      	b.n	80005dc <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006ce:	692a      	ldr	r2, [r5, #16]
 80006d0:	4b5a      	ldr	r3, [pc, #360]	; (800083c <HAL_RCC_OscConfig+0x278>)
 80006d2:	b16a      	cbz	r2, 80006f0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006d8:	f7ff fd56 	bl	8000188 <HAL_GetTick>
 80006dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	079f      	lsls	r7, r3, #30
 80006e2:	d4ec      	bmi.n	80006be <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006e4:	f7ff fd50 	bl	8000188 <HAL_GetTick>
 80006e8:	1b80      	subs	r0, r0, r6
 80006ea:	2802      	cmp	r0, #2
 80006ec:	d9f7      	bls.n	80006de <HAL_RCC_OscConfig+0x11a>
 80006ee:	e7ab      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80006f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006f2:	f7ff fd49 	bl	8000188 <HAL_GetTick>
 80006f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006f8:	6823      	ldr	r3, [r4, #0]
 80006fa:	0798      	lsls	r0, r3, #30
 80006fc:	f57f af6e 	bpl.w	80005dc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000700:	f7ff fd42 	bl	8000188 <HAL_GetTick>
 8000704:	1b80      	subs	r0, r0, r6
 8000706:	2802      	cmp	r0, #2
 8000708:	d9f6      	bls.n	80006f8 <HAL_RCC_OscConfig+0x134>
 800070a:	e79d      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800070c:	69aa      	ldr	r2, [r5, #24]
 800070e:	4c4a      	ldr	r4, [pc, #296]	; (8000838 <HAL_RCC_OscConfig+0x274>)
 8000710:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <HAL_RCC_OscConfig+0x27c>)
 8000712:	b1da      	cbz	r2, 800074c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000718:	f7ff fd36 	bl	8000188 <HAL_GetTick>
 800071c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800071e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000720:	079b      	lsls	r3, r3, #30
 8000722:	d50d      	bpl.n	8000740 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000724:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000728:	4b46      	ldr	r3, [pc, #280]	; (8000844 <HAL_RCC_OscConfig+0x280>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000730:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000732:	bf00      	nop
  }
  while (Delay --);
 8000734:	9b01      	ldr	r3, [sp, #4]
 8000736:	1e5a      	subs	r2, r3, #1
 8000738:	9201      	str	r2, [sp, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f9      	bne.n	8000732 <HAL_RCC_OscConfig+0x16e>
 800073e:	e751      	b.n	80005e4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000740:	f7ff fd22 	bl	8000188 <HAL_GetTick>
 8000744:	1b80      	subs	r0, r0, r6
 8000746:	2802      	cmp	r0, #2
 8000748:	d9e9      	bls.n	800071e <HAL_RCC_OscConfig+0x15a>
 800074a:	e77d      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800074c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800074e:	f7ff fd1b 	bl	8000188 <HAL_GetTick>
 8000752:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000756:	079f      	lsls	r7, r3, #30
 8000758:	f57f af44 	bpl.w	80005e4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800075c:	f7ff fd14 	bl	8000188 <HAL_GetTick>
 8000760:	1b80      	subs	r0, r0, r6
 8000762:	2802      	cmp	r0, #2
 8000764:	d9f6      	bls.n	8000754 <HAL_RCC_OscConfig+0x190>
 8000766:	e76f      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000768:	4c33      	ldr	r4, [pc, #204]	; (8000838 <HAL_RCC_OscConfig+0x274>)
 800076a:	69e3      	ldr	r3, [r4, #28]
 800076c:	00d8      	lsls	r0, r3, #3
 800076e:	d424      	bmi.n	80007ba <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000770:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	69e3      	ldr	r3, [r4, #28]
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	61e3      	str	r3, [r4, #28]
 800077a:	69e3      	ldr	r3, [r4, #28]
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000784:	4e30      	ldr	r6, [pc, #192]	; (8000848 <HAL_RCC_OscConfig+0x284>)
 8000786:	6833      	ldr	r3, [r6, #0]
 8000788:	05d9      	lsls	r1, r3, #23
 800078a:	d518      	bpl.n	80007be <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800078c:	68eb      	ldr	r3, [r5, #12]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d126      	bne.n	80007e0 <HAL_RCC_OscConfig+0x21c>
 8000792:	6a23      	ldr	r3, [r4, #32]
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800079a:	f7ff fcf5 	bl	8000188 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800079e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007a2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007a4:	6a23      	ldr	r3, [r4, #32]
 80007a6:	079b      	lsls	r3, r3, #30
 80007a8:	d53f      	bpl.n	800082a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80007aa:	2f00      	cmp	r7, #0
 80007ac:	f43f af1e 	beq.w	80005ec <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007b0:	69e3      	ldr	r3, [r4, #28]
 80007b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007b6:	61e3      	str	r3, [r4, #28]
 80007b8:	e718      	b.n	80005ec <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80007ba:	2700      	movs	r7, #0
 80007bc:	e7e2      	b.n	8000784 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007be:	6833      	ldr	r3, [r6, #0]
 80007c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80007c6:	f7ff fcdf 	bl	8000188 <HAL_GetTick>
 80007ca:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007cc:	6833      	ldr	r3, [r6, #0]
 80007ce:	05da      	lsls	r2, r3, #23
 80007d0:	d4dc      	bmi.n	800078c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007d2:	f7ff fcd9 	bl	8000188 <HAL_GetTick>
 80007d6:	eba0 0008 	sub.w	r0, r0, r8
 80007da:	2864      	cmp	r0, #100	; 0x64
 80007dc:	d9f6      	bls.n	80007cc <HAL_RCC_OscConfig+0x208>
 80007de:	e733      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e0:	b9ab      	cbnz	r3, 800080e <HAL_RCC_OscConfig+0x24a>
 80007e2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007e4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	6223      	str	r3, [r4, #32]
 80007ee:	6a23      	ldr	r3, [r4, #32]
 80007f0:	f023 0304 	bic.w	r3, r3, #4
 80007f4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007f6:	f7ff fcc7 	bl	8000188 <HAL_GetTick>
 80007fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007fc:	6a23      	ldr	r3, [r4, #32]
 80007fe:	0798      	lsls	r0, r3, #30
 8000800:	d5d3      	bpl.n	80007aa <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000802:	f7ff fcc1 	bl	8000188 <HAL_GetTick>
 8000806:	1b80      	subs	r0, r0, r6
 8000808:	4540      	cmp	r0, r8
 800080a:	d9f7      	bls.n	80007fc <HAL_RCC_OscConfig+0x238>
 800080c:	e71c      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800080e:	2b05      	cmp	r3, #5
 8000810:	6a23      	ldr	r3, [r4, #32]
 8000812:	d103      	bne.n	800081c <HAL_RCC_OscConfig+0x258>
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6223      	str	r3, [r4, #32]
 800081a:	e7ba      	b.n	8000792 <HAL_RCC_OscConfig+0x1ce>
 800081c:	f023 0301 	bic.w	r3, r3, #1
 8000820:	6223      	str	r3, [r4, #32]
 8000822:	6a23      	ldr	r3, [r4, #32]
 8000824:	f023 0304 	bic.w	r3, r3, #4
 8000828:	e7b6      	b.n	8000798 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800082a:	f7ff fcad 	bl	8000188 <HAL_GetTick>
 800082e:	eba0 0008 	sub.w	r0, r0, r8
 8000832:	42b0      	cmp	r0, r6
 8000834:	d9b6      	bls.n	80007a4 <HAL_RCC_OscConfig+0x1e0>
 8000836:	e707      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
 8000838:	40021000 	.word	0x40021000
 800083c:	42420000 	.word	0x42420000
 8000840:	42420480 	.word	0x42420480
 8000844:	20000008 	.word	0x20000008
 8000848:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800084c:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <HAL_RCC_OscConfig+0x334>)
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	461c      	mov	r4, r3
 8000852:	f002 020c 	and.w	r2, r2, #12
 8000856:	2a08      	cmp	r2, #8
 8000858:	d03d      	beq.n	80008d6 <HAL_RCC_OscConfig+0x312>
 800085a:	2300      	movs	r3, #0
 800085c:	4e27      	ldr	r6, [pc, #156]	; (80008fc <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800085e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000860:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000862:	d12b      	bne.n	80008bc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000864:	f7ff fc90 	bl	8000188 <HAL_GetTick>
 8000868:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	0199      	lsls	r1, r3, #6
 800086e:	d41f      	bmi.n	80008b0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000870:	6a2b      	ldr	r3, [r5, #32]
 8000872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000876:	d105      	bne.n	8000884 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000878:	6862      	ldr	r2, [r4, #4]
 800087a:	68a9      	ldr	r1, [r5, #8]
 800087c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000880:	430a      	orrs	r2, r1
 8000882:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000884:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000886:	6862      	ldr	r2, [r4, #4]
 8000888:	430b      	orrs	r3, r1
 800088a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800088e:	4313      	orrs	r3, r2
 8000890:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000892:	2301      	movs	r3, #1
 8000894:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000896:	f7ff fc77 	bl	8000188 <HAL_GetTick>
 800089a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	019a      	lsls	r2, r3, #6
 80008a0:	f53f aea8 	bmi.w	80005f4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008a4:	f7ff fc70 	bl	8000188 <HAL_GetTick>
 80008a8:	1b40      	subs	r0, r0, r5
 80008aa:	2802      	cmp	r0, #2
 80008ac:	d9f6      	bls.n	800089c <HAL_RCC_OscConfig+0x2d8>
 80008ae:	e6cb      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008b0:	f7ff fc6a 	bl	8000188 <HAL_GetTick>
 80008b4:	1bc0      	subs	r0, r0, r7
 80008b6:	2802      	cmp	r0, #2
 80008b8:	d9d7      	bls.n	800086a <HAL_RCC_OscConfig+0x2a6>
 80008ba:	e6c5      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80008bc:	f7ff fc64 	bl	8000188 <HAL_GetTick>
 80008c0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008c2:	6823      	ldr	r3, [r4, #0]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	f57f ae95 	bpl.w	80005f4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008ca:	f7ff fc5d 	bl	8000188 <HAL_GetTick>
 80008ce:	1b40      	subs	r0, r0, r5
 80008d0:	2802      	cmp	r0, #2
 80008d2:	d9f6      	bls.n	80008c2 <HAL_RCC_OscConfig+0x2fe>
 80008d4:	e6b8      	b.n	8000648 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80008d6:	2801      	cmp	r0, #1
 80008d8:	f43f aeb7 	beq.w	800064a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80008dc:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80008de:	6a2b      	ldr	r3, [r5, #32]
 80008e0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80008e4:	429a      	cmp	r2, r3
 80008e6:	f47f ae71 	bne.w	80005cc <HAL_RCC_OscConfig+0x8>
 80008ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80008ec:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80008f0:	1ac0      	subs	r0, r0, r3
 80008f2:	bf18      	it	ne
 80008f4:	2001      	movne	r0, #1
 80008f6:	e6a8      	b.n	800064a <HAL_RCC_OscConfig+0x86>
 80008f8:	40021000 	.word	0x40021000
 80008fc:	42420060 	.word	0x42420060

08000900 <HAL_RCC_GetSysClockFreq>:
{
 8000900:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000904:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000906:	ac02      	add	r4, sp, #8
 8000908:	f103 0510 	add.w	r5, r3, #16
 800090c:	4622      	mov	r2, r4
 800090e:	6818      	ldr	r0, [r3, #0]
 8000910:	6859      	ldr	r1, [r3, #4]
 8000912:	3308      	adds	r3, #8
 8000914:	c203      	stmia	r2!, {r0, r1}
 8000916:	42ab      	cmp	r3, r5
 8000918:	4614      	mov	r4, r2
 800091a:	d1f7      	bne.n	800090c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800091c:	2301      	movs	r3, #1
 800091e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000922:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000924:	4911      	ldr	r1, [pc, #68]	; (800096c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000926:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800092a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800092c:	f003 020c 	and.w	r2, r3, #12
 8000930:	2a08      	cmp	r2, #8
 8000932:	d117      	bne.n	8000964 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000934:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000938:	a806      	add	r0, sp, #24
 800093a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800093c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800093e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000942:	d50c      	bpl.n	800095e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000944:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000946:	480a      	ldr	r0, [pc, #40]	; (8000970 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000948:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800094c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800094e:	aa06      	add	r2, sp, #24
 8000950:	4413      	add	r3, r2
 8000952:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000956:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800095a:	b007      	add	sp, #28
 800095c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_RCC_GetSysClockFreq+0x74>)
 8000960:	4350      	muls	r0, r2
 8000962:	e7fa      	b.n	800095a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000966:	e7f8      	b.n	800095a <HAL_RCC_GetSysClockFreq+0x5a>
 8000968:	08002190 	.word	0x08002190
 800096c:	40021000 	.word	0x40021000
 8000970:	007a1200 	.word	0x007a1200
 8000974:	003d0900 	.word	0x003d0900

08000978 <HAL_RCC_ClockConfig>:
{
 8000978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800097c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800097e:	4604      	mov	r4, r0
 8000980:	b910      	cbnz	r0, 8000988 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000982:	2001      	movs	r0, #1
 8000984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000988:	4a45      	ldr	r2, [pc, #276]	; (8000aa0 <HAL_RCC_ClockConfig+0x128>)
 800098a:	6813      	ldr	r3, [r2, #0]
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	428b      	cmp	r3, r1
 8000992:	d329      	bcc.n	80009e8 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000994:	6821      	ldr	r1, [r4, #0]
 8000996:	078e      	lsls	r6, r1, #30
 8000998:	d431      	bmi.n	80009fe <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800099a:	07ca      	lsls	r2, r1, #31
 800099c:	d444      	bmi.n	8000a28 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800099e:	4a40      	ldr	r2, [pc, #256]	; (8000aa0 <HAL_RCC_ClockConfig+0x128>)
 80009a0:	6813      	ldr	r3, [r2, #0]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	429d      	cmp	r5, r3
 80009a8:	d367      	bcc.n	8000a7a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009aa:	6822      	ldr	r2, [r4, #0]
 80009ac:	4d3d      	ldr	r5, [pc, #244]	; (8000aa4 <HAL_RCC_ClockConfig+0x12c>)
 80009ae:	f012 0f04 	tst.w	r2, #4
 80009b2:	d16e      	bne.n	8000a92 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009b4:	0713      	lsls	r3, r2, #28
 80009b6:	d506      	bpl.n	80009c6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80009b8:	686b      	ldr	r3, [r5, #4]
 80009ba:	6922      	ldr	r2, [r4, #16]
 80009bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009c4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80009c6:	f7ff ff9b 	bl	8000900 <HAL_RCC_GetSysClockFreq>
 80009ca:	686b      	ldr	r3, [r5, #4]
 80009cc:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <HAL_RCC_ClockConfig+0x130>)
 80009ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009d2:	5cd3      	ldrb	r3, [r2, r3]
 80009d4:	40d8      	lsrs	r0, r3
 80009d6:	4b35      	ldr	r3, [pc, #212]	; (8000aac <HAL_RCC_ClockConfig+0x134>)
 80009d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80009da:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <HAL_RCC_ClockConfig+0x138>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	f001 fae1 	bl	8001fa4 <HAL_InitTick>
  return HAL_OK;
 80009e2:	2000      	movs	r0, #0
 80009e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009e8:	6813      	ldr	r3, [r2, #0]
 80009ea:	f023 0307 	bic.w	r3, r3, #7
 80009ee:	430b      	orrs	r3, r1
 80009f0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80009f2:	6813      	ldr	r3, [r2, #0]
 80009f4:	f003 0307 	and.w	r3, r3, #7
 80009f8:	4299      	cmp	r1, r3
 80009fa:	d1c2      	bne.n	8000982 <HAL_RCC_ClockConfig+0xa>
 80009fc:	e7ca      	b.n	8000994 <HAL_RCC_ClockConfig+0x1c>
 80009fe:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a00:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a04:	bf1e      	ittt	ne
 8000a06:	685a      	ldrne	r2, [r3, #4]
 8000a08:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000a0c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a0e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a10:	bf42      	ittt	mi
 8000a12:	685a      	ldrmi	r2, [r3, #4]
 8000a14:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000a18:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	68a0      	ldr	r0, [r4, #8]
 8000a1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000a22:	4302      	orrs	r2, r0
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	e7b8      	b.n	800099a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a28:	6862      	ldr	r2, [r4, #4]
 8000a2a:	4e1e      	ldr	r6, [pc, #120]	; (8000aa4 <HAL_RCC_ClockConfig+0x12c>)
 8000a2c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a2e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a30:	d11b      	bne.n	8000a6a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a32:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a36:	d0a4      	beq.n	8000982 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a38:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a3a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a3e:	f023 0303 	bic.w	r3, r3, #3
 8000a42:	4313      	orrs	r3, r2
 8000a44:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a46:	f7ff fb9f 	bl	8000188 <HAL_GetTick>
 8000a4a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a4c:	6873      	ldr	r3, [r6, #4]
 8000a4e:	6862      	ldr	r2, [r4, #4]
 8000a50:	f003 030c 	and.w	r3, r3, #12
 8000a54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000a58:	d0a1      	beq.n	800099e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a5a:	f7ff fb95 	bl	8000188 <HAL_GetTick>
 8000a5e:	1bc0      	subs	r0, r0, r7
 8000a60:	4540      	cmp	r0, r8
 8000a62:	d9f3      	bls.n	8000a4c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000a64:	2003      	movs	r0, #3
}
 8000a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a6a:	2a02      	cmp	r2, #2
 8000a6c:	d102      	bne.n	8000a74 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a72:	e7e0      	b.n	8000a36 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a74:	f013 0f02 	tst.w	r3, #2
 8000a78:	e7dd      	b.n	8000a36 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a7a:	6813      	ldr	r3, [r2, #0]
 8000a7c:	f023 0307 	bic.w	r3, r3, #7
 8000a80:	432b      	orrs	r3, r5
 8000a82:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a84:	6813      	ldr	r3, [r2, #0]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	429d      	cmp	r5, r3
 8000a8c:	f47f af79 	bne.w	8000982 <HAL_RCC_ClockConfig+0xa>
 8000a90:	e78b      	b.n	80009aa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a92:	686b      	ldr	r3, [r5, #4]
 8000a94:	68e1      	ldr	r1, [r4, #12]
 8000a96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	606b      	str	r3, [r5, #4]
 8000a9e:	e789      	b.n	80009b4 <HAL_RCC_ClockConfig+0x3c>
 8000aa0:	40022000 	.word	0x40022000
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	080021a0 	.word	0x080021a0
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000abe:	5cd3      	ldrb	r3, [r2, r3]
 8000ac0:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ac2:	6810      	ldr	r0, [r2, #0]
}
 8000ac4:	40d8      	lsrs	r0, r3
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	080021b0 	.word	0x080021b0
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
 8000ae0:	4a03      	ldr	r2, [pc, #12]	; (8000af0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ae2:	6810      	ldr	r0, [r2, #0]
}
 8000ae4:	40d8      	lsrs	r0, r3
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	080021b0 	.word	0x080021b0
 8000af0:	20000008 	.word	0x20000008

08000af4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000af4:	230f      	movs	r3, #15
 8000af6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_RCC_GetClockConfig+0x34>)
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	f002 0203 	and.w	r2, r2, #3
 8000b00:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000b08:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000b10:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	08db      	lsrs	r3, r3, #3
 8000b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b1a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_RCC_GetClockConfig+0x38>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	600b      	str	r3, [r1, #0]
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40022000 	.word	0x40022000

08000b30 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b32:	4604      	mov	r4, r0
 8000b34:	460e      	mov	r6, r1
 8000b36:	4615      	mov	r5, r2
 8000b38:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000b3a:	6821      	ldr	r1, [r4, #0]
 8000b3c:	688a      	ldr	r2, [r1, #8]
 8000b3e:	ea36 0302 	bics.w	r3, r6, r2
 8000b42:	d001      	beq.n	8000b48 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000b44:	2000      	movs	r0, #0
}
 8000b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000b48:	1c6b      	adds	r3, r5, #1
 8000b4a:	d0f7      	beq.n	8000b3c <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000b4c:	f7ff fb1c 	bl	8000188 <HAL_GetTick>
 8000b50:	1bc0      	subs	r0, r0, r7
 8000b52:	4285      	cmp	r5, r0
 8000b54:	d8f1      	bhi.n	8000b3a <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000b5e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b60:	6862      	ldr	r2, [r4, #4]
 8000b62:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000b66:	d10a      	bne.n	8000b7e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
 8000b68:	68a2      	ldr	r2, [r4, #8]
 8000b6a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000b6e:	d002      	beq.n	8000b76 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000b70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000b74:	d103      	bne.n	8000b7e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b7c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b80:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000b84:	d107      	bne.n	8000b96 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
          SPI_RESET_CRC(hspi);
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b94:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000b96:	2301      	movs	r3, #1
 8000b98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000ba6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000ba6:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	460a      	mov	r2, r1
 8000bac:	2180      	movs	r1, #128	; 0x80
{
 8000bae:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000bb0:	f7ff ffbe 	bl	8000b30 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8000bb4:	b120      	cbz	r0, 8000bc0 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000bb6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000bb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bba:	f043 0320 	orr.w	r3, r3, #32
 8000bbe:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000bc0:	bd10      	pop	{r4, pc}

08000bc2 <HAL_SPI_Init>:
{
 8000bc2:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d034      	beq.n	8000c34 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000bce:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000bd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bd6:	b91b      	cbnz	r3, 8000be0 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000bd8:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000bdc:	f001 f8c8 	bl	8001d70 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000be0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000be2:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000be4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000be8:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000bea:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bf0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000bf2:	6863      	ldr	r3, [r4, #4]
 8000bf4:	69a1      	ldr	r1, [r4, #24]
 8000bf6:	4303      	orrs	r3, r0
 8000bf8:	68e0      	ldr	r0, [r4, #12]
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	6920      	ldr	r0, [r4, #16]
 8000bfe:	4303      	orrs	r3, r0
 8000c00:	6960      	ldr	r0, [r4, #20]
 8000c02:	4303      	orrs	r3, r0
 8000c04:	69e0      	ldr	r0, [r4, #28]
 8000c06:	4303      	orrs	r3, r0
 8000c08:	6a20      	ldr	r0, [r4, #32]
 8000c0a:	4303      	orrs	r3, r0
 8000c0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000c0e:	4303      	orrs	r3, r0
 8000c10:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000c14:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000c16:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000c18:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000c1c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000c1e:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000c20:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000c22:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c28:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000c2a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000c2c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000c2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000c32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c34:	2001      	movs	r0, #1
}
 8000c36:	bd10      	pop	{r4, pc}

08000c38 <HAL_SPI_TransmitReceive>:
{
 8000c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c3c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000c3e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000c42:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000c44:	2b01      	cmp	r3, #1
{
 8000c46:	460d      	mov	r5, r1
 8000c48:	4691      	mov	r9, r2
 8000c4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000c4c:	f000 80e2 	beq.w	8000e14 <HAL_SPI_TransmitReceive+0x1dc>
 8000c50:	2301      	movs	r3, #1
 8000c52:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000c56:	f7ff fa97 	bl	8000188 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000c5a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000c5e:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8000c60:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000c62:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8000c64:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000c66:	d00a      	beq.n	8000c7e <HAL_SPI_TransmitReceive+0x46>
 8000c68:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000c6c:	f040 80d0 	bne.w	8000e10 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000c70:	68a0      	ldr	r0, [r4, #8]
 8000c72:	2800      	cmp	r0, #0
 8000c74:	f040 80cc 	bne.w	8000e10 <HAL_SPI_TransmitReceive+0x1d8>
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	f040 80c9 	bne.w	8000e10 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80c4 	beq.w	8000e0c <HAL_SPI_TransmitReceive+0x1d4>
 8000c84:	f1b9 0f00 	cmp.w	r9, #0
 8000c88:	f000 80c0 	beq.w	8000e0c <HAL_SPI_TransmitReceive+0x1d4>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	f000 80bd 	beq.w	8000e0c <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000c92:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000c96:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000c9a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000c9c:	bf1c      	itt	ne
 8000c9e:	2305      	movne	r3, #5
 8000ca0:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000ca8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000caa:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000cac:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000cae:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000cb0:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000cb2:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000cb4:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000cb6:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000cb8:	bf58      	it	pl
 8000cba:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000cbc:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000cbe:	bf58      	it	pl
 8000cc0:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000cc4:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000cc6:	bf58      	it	pl
 8000cc8:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000cca:	68e2      	ldr	r2, [r4, #12]
 8000ccc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000cd0:	d158      	bne.n	8000d84 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000cd2:	b109      	cbz	r1, 8000cd8 <HAL_SPI_TransmitReceive+0xa0>
 8000cd4:	2e01      	cmp	r6, #1
 8000cd6:	d107      	bne.n	8000ce8 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000cd8:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000cdc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000cde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000ce0:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000ce8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000cea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b9ab      	cbnz	r3, 8000d1c <HAL_SPI_TransmitReceive+0xe4>
 8000cf0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	b993      	cbnz	r3, 8000d1c <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000cf6:	4642      	mov	r2, r8
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f7ff ff53 	bl	8000ba6 <SPI_EndRxTxTransaction>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	f040 8081 	bne.w	8000e08 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d06:	68a3      	ldr	r3, [r4, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d132      	bne.n	8000d72 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	9001      	str	r0, [sp, #4]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	9201      	str	r2, [sp, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	9b01      	ldr	r3, [sp, #4]
 8000d1a:	e02a      	b.n	8000d72 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000d1c:	6822      	ldr	r2, [r4, #0]
 8000d1e:	6893      	ldr	r3, [r2, #8]
 8000d20:	0799      	lsls	r1, r3, #30
 8000d22:	d50d      	bpl.n	8000d40 <HAL_SPI_TransmitReceive+0x108>
 8000d24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b153      	cbz	r3, 8000d40 <HAL_SPI_TransmitReceive+0x108>
 8000d2a:	b14d      	cbz	r5, 8000d40 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8000d2c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d30:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000d34:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d36:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000d38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000d40:	6893      	ldr	r3, [r2, #8]
 8000d42:	07db      	lsls	r3, r3, #31
 8000d44:	d50c      	bpl.n	8000d60 <HAL_SPI_TransmitReceive+0x128>
 8000d46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	b14b      	cbz	r3, 8000d60 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8000d4c:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000d4e:	68d2      	ldr	r2, [r2, #12]
 8000d50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d52:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000d56:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000d58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8000d60:	f7ff fa12 	bl	8000188 <HAL_GetTick>
 8000d64:	eba0 0008 	sub.w	r0, r0, r8
 8000d68:	4287      	cmp	r7, r0
 8000d6a:	d8be      	bhi.n	8000cea <HAL_SPI_TransmitReceive+0xb2>
 8000d6c:	1c7e      	adds	r6, r7, #1
 8000d6e:	d0bc      	beq.n	8000cea <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8000d70:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000d72:	2301      	movs	r3, #1
 8000d74:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000d7e:	b003      	add	sp, #12
 8000d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000d84:	b109      	cbz	r1, 8000d8a <HAL_SPI_TransmitReceive+0x152>
 8000d86:	2e01      	cmp	r6, #1
 8000d88:	d108      	bne.n	8000d9c <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000d8a:	782a      	ldrb	r2, [r5, #0]
 8000d8c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000d8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d90:	3301      	adds	r3, #1
 8000d92:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000d94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d96:	3b01      	subs	r3, #1
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000d9c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	b91b      	cbnz	r3, 8000dac <HAL_SPI_TransmitReceive+0x174>
 8000da4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0a4      	beq.n	8000cf6 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000dac:	6822      	ldr	r2, [r4, #0]
 8000dae:	6893      	ldr	r3, [r2, #8]
 8000db0:	0798      	lsls	r0, r3, #30
 8000db2:	d50e      	bpl.n	8000dd2 <HAL_SPI_TransmitReceive+0x19a>
 8000db4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b15b      	cbz	r3, 8000dd2 <HAL_SPI_TransmitReceive+0x19a>
 8000dba:	b155      	cbz	r5, 8000dd2 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8000dbc:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000dbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8000dc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000dca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000dd2:	6822      	ldr	r2, [r4, #0]
 8000dd4:	6893      	ldr	r3, [r2, #8]
 8000dd6:	07d9      	lsls	r1, r3, #31
 8000dd8:	d50d      	bpl.n	8000df6 <HAL_SPI_TransmitReceive+0x1be>
 8000dda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	b153      	cbz	r3, 8000df6 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8000de0:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000de2:	68d2      	ldr	r2, [r2, #12]
 8000de4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000de6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8000de8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000dea:	3301      	adds	r3, #1
 8000dec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000dee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000df0:	3b01      	subs	r3, #1
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8000df6:	f7ff f9c7 	bl	8000188 <HAL_GetTick>
 8000dfa:	eba0 0008 	sub.w	r0, r0, r8
 8000dfe:	4287      	cmp	r7, r0
 8000e00:	d8cd      	bhi.n	8000d9e <HAL_SPI_TransmitReceive+0x166>
 8000e02:	1c7b      	adds	r3, r7, #1
 8000e04:	d0cb      	beq.n	8000d9e <HAL_SPI_TransmitReceive+0x166>
 8000e06:	e7b3      	b.n	8000d70 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e08:	2320      	movs	r3, #32
 8000e0a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	e7b0      	b.n	8000d72 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8000e10:	2002      	movs	r0, #2
 8000e12:	e7ae      	b.n	8000d72 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8000e14:	2002      	movs	r0, #2
 8000e16:	e7b2      	b.n	8000d7e <HAL_SPI_TransmitReceive+0x146>

08000e18 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e18:	6a03      	ldr	r3, [r0, #32]
{
 8000e1a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e24:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e26:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e2a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e2e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e30:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000e32:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000e36:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000e38:	4d0a      	ldr	r5, [pc, #40]	; (8000e64 <TIM_OC1_SetConfig+0x4c>)
 8000e3a:	42a8      	cmp	r0, r5
 8000e3c:	d10b      	bne.n	8000e56 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000e3e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e40:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000e44:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e46:	698e      	ldr	r6, [r1, #24]
 8000e48:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e4a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e4e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e50:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e54:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e56:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000e58:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000e5a:	684a      	ldr	r2, [r1, #4]
 8000e5c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e5e:	6203      	str	r3, [r0, #32]
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
 8000e62:	bf00      	nop
 8000e64:	40012c00 	.word	0x40012c00

08000e68 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e68:	6a03      	ldr	r3, [r0, #32]
{
 8000e6a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e74:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e76:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e78:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000e7a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e7e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e80:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000e82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e86:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000e8a:	4d0b      	ldr	r5, [pc, #44]	; (8000eb8 <TIM_OC3_SetConfig+0x50>)
 8000e8c:	42a8      	cmp	r0, r5
 8000e8e:	d10d      	bne.n	8000eac <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e90:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e9a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000e9c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000e9e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ea2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ea8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000eac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000eae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000eb0:	684a      	ldr	r2, [r1, #4]
 8000eb2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000eb4:	6203      	str	r3, [r0, #32]
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
 8000eb8:	40012c00 	.word	0x40012c00

08000ebc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000ebc:	6a03      	ldr	r3, [r0, #32]
{
 8000ebe:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ec4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ec6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ec8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000eca:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ecc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000ece:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ed2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000ed6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000edc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ee0:	4d06      	ldr	r5, [pc, #24]	; (8000efc <TIM_OC4_SetConfig+0x40>)
 8000ee2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000ee4:	bf02      	ittt	eq
 8000ee6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000ee8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000eec:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ef0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000ef2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000ef4:	684a      	ldr	r2, [r1, #4]
 8000ef6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ef8:	6203      	str	r3, [r0, #32]
 8000efa:	bd30      	pop	{r4, r5, pc}
 8000efc:	40012c00 	.word	0x40012c00

08000f00 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f00:	6803      	ldr	r3, [r0, #0]
}
 8000f02:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f12:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8000f14:	bf1e      	ittt	ne
 8000f16:	681a      	ldrne	r2, [r3, #0]
 8000f18:	f042 0201 	orrne.w	r2, r2, #1
 8000f1c:	601a      	strne	r2, [r3, #0]
}
 8000f1e:	4770      	bx	lr

08000f20 <HAL_TIM_PWM_MspInit>:
 8000f20:	4770      	bx	lr

08000f22 <HAL_TIM_OnePulse_MspInit>:
 8000f22:	4770      	bx	lr

08000f24 <HAL_TIM_OC_DelayElapsedCallback>:
 8000f24:	4770      	bx	lr

08000f26 <HAL_TIM_IC_CaptureCallback>:
 8000f26:	4770      	bx	lr

08000f28 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000f28:	4770      	bx	lr

08000f2a <HAL_TIM_TriggerCallback>:
 8000f2a:	4770      	bx	lr

08000f2c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f2c:	6803      	ldr	r3, [r0, #0]
{
 8000f2e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f30:	691a      	ldr	r2, [r3, #16]
{
 8000f32:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f34:	0791      	lsls	r1, r2, #30
 8000f36:	d50e      	bpl.n	8000f56 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	0792      	lsls	r2, r2, #30
 8000f3c:	d50b      	bpl.n	8000f56 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f3e:	f06f 0202 	mvn.w	r2, #2
 8000f42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f44:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f46:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f48:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f4a:	079b      	lsls	r3, r3, #30
 8000f4c:	d077      	beq.n	800103e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000f4e:	f7ff ffea 	bl	8000f26 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f52:	2300      	movs	r3, #0
 8000f54:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	0750      	lsls	r0, r2, #29
 8000f5c:	d510      	bpl.n	8000f80 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	0751      	lsls	r1, r2, #29
 8000f62:	d50d      	bpl.n	8000f80 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f64:	f06f 0204 	mvn.w	r2, #4
 8000f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f6a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f6c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f6e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f70:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000f74:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f76:	d068      	beq.n	800104a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f78:	f7ff ffd5 	bl	8000f26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	0712      	lsls	r2, r2, #28
 8000f86:	d50f      	bpl.n	8000fa8 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	0710      	lsls	r0, r2, #28
 8000f8c:	d50c      	bpl.n	8000fa8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f8e:	f06f 0208 	mvn.w	r2, #8
 8000f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f94:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f9a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000f9c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f9e:	d05a      	beq.n	8001056 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fa0:	f7ff ffc1 	bl	8000f26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	06d2      	lsls	r2, r2, #27
 8000fae:	d510      	bpl.n	8000fd2 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	06d0      	lsls	r0, r2, #27
 8000fb4:	d50d      	bpl.n	8000fd2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000fb6:	f06f 0210 	mvn.w	r2, #16
 8000fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fbc:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fbe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fc0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fc2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000fc6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fc8:	d04b      	beq.n	8001062 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fca:	f7ff ffac 	bl	8000f26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	691a      	ldr	r2, [r3, #16]
 8000fd6:	07d1      	lsls	r1, r2, #31
 8000fd8:	d508      	bpl.n	8000fec <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	07d2      	lsls	r2, r2, #31
 8000fde:	d505      	bpl.n	8000fec <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000fe0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fe4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000fe6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fe8:	f000 fe5e 	bl	8001ca8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	0610      	lsls	r0, r2, #24
 8000ff2:	d508      	bpl.n	8001006 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	0611      	lsls	r1, r2, #24
 8000ff8:	d505      	bpl.n	8001006 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000ffa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000ffe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001000:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001002:	f000 fa89 	bl	8001518 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	0652      	lsls	r2, r2, #25
 800100c:	d508      	bpl.n	8001020 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	0650      	lsls	r0, r2, #25
 8001012:	d505      	bpl.n	8001020 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001014:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001018:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800101a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800101c:	f7ff ff85 	bl	8000f2a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	0691      	lsls	r1, r2, #26
 8001026:	d522      	bpl.n	800106e <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	0692      	lsls	r2, r2, #26
 800102c:	d51f      	bpl.n	800106e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800102e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001032:	4620      	mov	r0, r4
}
 8001034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001038:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800103a:	f000 ba6c 	b.w	8001516 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800103e:	f7ff ff71 	bl	8000f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff ff70 	bl	8000f28 <HAL_TIM_PWM_PulseFinishedCallback>
 8001048:	e783      	b.n	8000f52 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800104a:	f7ff ff6b 	bl	8000f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff ff6a 	bl	8000f28 <HAL_TIM_PWM_PulseFinishedCallback>
 8001054:	e792      	b.n	8000f7c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001056:	f7ff ff65 	bl	8000f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800105a:	4620      	mov	r0, r4
 800105c:	f7ff ff64 	bl	8000f28 <HAL_TIM_PWM_PulseFinishedCallback>
 8001060:	e7a0      	b.n	8000fa4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001062:	f7ff ff5f 	bl	8000f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001066:	4620      	mov	r0, r4
 8001068:	f7ff ff5e 	bl	8000f28 <HAL_TIM_PWM_PulseFinishedCallback>
 800106c:	e7af      	b.n	8000fce <HAL_TIM_IRQHandler+0xa2>
 800106e:	bd10      	pop	{r4, pc}

08001070 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001072:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001074:	4290      	cmp	r0, r2
 8001076:	d00a      	beq.n	800108e <TIM_Base_SetConfig+0x1e>
 8001078:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800107c:	d007      	beq.n	800108e <TIM_Base_SetConfig+0x1e>
 800107e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001082:	4290      	cmp	r0, r2
 8001084:	d003      	beq.n	800108e <TIM_Base_SetConfig+0x1e>
 8001086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800108a:	4290      	cmp	r0, r2
 800108c:	d115      	bne.n	80010ba <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800108e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001094:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <TIM_Base_SetConfig+0x6c>)
 8001098:	4290      	cmp	r0, r2
 800109a:	d00a      	beq.n	80010b2 <TIM_Base_SetConfig+0x42>
 800109c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010a0:	d007      	beq.n	80010b2 <TIM_Base_SetConfig+0x42>
 80010a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80010a6:	4290      	cmp	r0, r2
 80010a8:	d003      	beq.n	80010b2 <TIM_Base_SetConfig+0x42>
 80010aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010ae:	4290      	cmp	r0, r2
 80010b0:	d103      	bne.n	80010ba <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010b2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80010b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80010ba:	694a      	ldr	r2, [r1, #20]
 80010bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80010c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010c4:	688b      	ldr	r3, [r1, #8]
 80010c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80010c8:	680b      	ldr	r3, [r1, #0]
 80010ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <TIM_Base_SetConfig+0x6c>)
 80010ce:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80010d0:	bf04      	itt	eq
 80010d2:	690b      	ldreq	r3, [r1, #16]
 80010d4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80010d6:	2301      	movs	r3, #1
 80010d8:	6143      	str	r3, [r0, #20]
 80010da:	4770      	bx	lr
 80010dc:	40012c00 	.word	0x40012c00

080010e0 <HAL_TIM_Base_Init>:
{
 80010e0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80010e2:	4604      	mov	r4, r0
 80010e4:	b1a0      	cbz	r0, 8001110 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80010e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010ee:	b91b      	cbnz	r3, 80010f8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80010f4:	f000 fe7e 	bl	8001df4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80010f8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010fa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80010fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001100:	1d21      	adds	r1, r4, #4
 8001102:	f7ff ffb5 	bl	8001070 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001106:	2301      	movs	r3, #1
  return HAL_OK;
 8001108:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800110a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800110e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001110:	2001      	movs	r0, #1
}
 8001112:	bd10      	pop	{r4, pc}

08001114 <HAL_TIM_PWM_Init>:
{
 8001114:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001116:	4604      	mov	r4, r0
 8001118:	b1a0      	cbz	r0, 8001144 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800111a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800111e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001122:	b91b      	cbnz	r3, 800112c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001124:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001128:	f7ff fefa 	bl	8000f20 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800112c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800112e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001130:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001134:	1d21      	adds	r1, r4, #4
 8001136:	f7ff ff9b 	bl	8001070 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800113a:	2301      	movs	r3, #1
  return HAL_OK;
 800113c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800113e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001142:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001144:	2001      	movs	r0, #1
}
 8001146:	bd10      	pop	{r4, pc}

08001148 <HAL_TIM_OnePulse_Init>:
{
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	460d      	mov	r5, r1
  if (htim == NULL)
 800114c:	4604      	mov	r4, r0
 800114e:	b1e0      	cbz	r0, 800118a <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001150:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001154:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001158:	b91b      	cbnz	r3, 8001162 <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 800115a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800115e:	f7ff fee0 	bl	8000f22 <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001162:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001164:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001166:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800116a:	6820      	ldr	r0, [r4, #0]
 800116c:	f7ff ff80 	bl	8001070 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001170:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8001172:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	f022 0208 	bic.w	r2, r2, #8
 800117a:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800117c:	6819      	ldr	r1, [r3, #0]
 800117e:	4329      	orrs	r1, r5
 8001180:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001182:	2301      	movs	r3, #1
 8001184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001188:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800118a:	2001      	movs	r0, #1
}
 800118c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001190 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001190:	6a03      	ldr	r3, [r0, #32]
{
 8001192:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001194:	f023 0310 	bic.w	r3, r3, #16
 8001198:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800119a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800119c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800119e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80011a2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80011aa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80011ac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80011b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80011b4:	4d0b      	ldr	r5, [pc, #44]	; (80011e4 <TIM_OC2_SetConfig+0x54>)
 80011b6:	42a8      	cmp	r0, r5
 80011b8:	d10d      	bne.n	80011d6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80011ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80011bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80011c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80011c4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80011c6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80011c8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80011cc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80011ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80011d2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80011d6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80011d8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80011da:	684a      	ldr	r2, [r1, #4]
 80011dc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80011de:	6203      	str	r3, [r0, #32]
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
 80011e2:	bf00      	nop
 80011e4:	40012c00 	.word	0x40012c00

080011e8 <HAL_TIM_PWM_ConfigChannel>:
{
 80011e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80011ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80011ee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	f04f 0002 	mov.w	r0, #2
 80011f6:	d025      	beq.n	8001244 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80011f8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80011fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80011fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001202:	2a0c      	cmp	r2, #12
 8001204:	d818      	bhi.n	8001238 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001206:	e8df f002 	tbb	[pc, r2]
 800120a:	1707      	.short	0x1707
 800120c:	171e1717 	.word	0x171e1717
 8001210:	172f1717 	.word	0x172f1717
 8001214:	1717      	.short	0x1717
 8001216:	40          	.byte	0x40
 8001217:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001218:	6820      	ldr	r0, [r4, #0]
 800121a:	f7ff fdfd 	bl	8000e18 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800121e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001220:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	f042 0208 	orr.w	r2, r2, #8
 8001228:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	f022 0204 	bic.w	r2, r2, #4
 8001230:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001232:	699a      	ldr	r2, [r3, #24]
 8001234:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001236:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001238:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800123a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800123c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001240:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001244:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001246:	6820      	ldr	r0, [r4, #0]
 8001248:	f7ff ffa2 	bl	8001190 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800124c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800124e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800125e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001266:	e7e6      	b.n	8001236 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001268:	6820      	ldr	r0, [r4, #0]
 800126a:	f7ff fdfd 	bl	8000e68 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800126e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001270:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001272:	69da      	ldr	r2, [r3, #28]
 8001274:	f042 0208 	orr.w	r2, r2, #8
 8001278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800127a:	69da      	ldr	r2, [r3, #28]
 800127c:	f022 0204 	bic.w	r2, r2, #4
 8001280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001286:	61da      	str	r2, [r3, #28]
      break;
 8001288:	e7d6      	b.n	8001238 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800128a:	6820      	ldr	r0, [r4, #0]
 800128c:	f7ff fe16 	bl	8000ebc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001290:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001292:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001294:	69da      	ldr	r2, [r3, #28]
 8001296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800129a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800129c:	69da      	ldr	r2, [r3, #28]
 800129e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80012a4:	69da      	ldr	r2, [r3, #28]
 80012a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012aa:	e7ec      	b.n	8001286 <HAL_TIM_PWM_ConfigChannel+0x9e>

080012ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80012ac:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80012ae:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012b0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012b6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80012ba:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012bc:	6083      	str	r3, [r0, #8]
 80012be:	bd10      	pop	{r4, pc}

080012c0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80012c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80012c4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80012c6:	2b01      	cmp	r3, #1
{
 80012c8:	4604      	mov	r4, r0
 80012ca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80012ce:	d019      	beq.n	8001304 <HAL_TIM_ConfigClockSource+0x44>
 80012d0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80012d2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80012d6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80012d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80012dc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80012e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80012e6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80012e8:	680b      	ldr	r3, [r1, #0]
 80012ea:	2b40      	cmp	r3, #64	; 0x40
 80012ec:	d065      	beq.n	80013ba <HAL_TIM_ConfigClockSource+0xfa>
 80012ee:	d815      	bhi.n	800131c <HAL_TIM_ConfigClockSource+0x5c>
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d00c      	beq.n	800130e <HAL_TIM_ConfigClockSource+0x4e>
 80012f4:	d807      	bhi.n	8001306 <HAL_TIM_ConfigClockSource+0x46>
 80012f6:	b153      	cbz	r3, 800130e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80012f8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80012fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80012fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001300:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001304:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001306:	2b20      	cmp	r3, #32
 8001308:	d001      	beq.n	800130e <HAL_TIM_ConfigClockSource+0x4e>
 800130a:	2b30      	cmp	r3, #48	; 0x30
 800130c:	d1f4      	bne.n	80012f8 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800130e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001310:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001314:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001318:	4313      	orrs	r3, r2
 800131a:	e01a      	b.n	8001352 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800131c:	2b60      	cmp	r3, #96	; 0x60
 800131e:	d034      	beq.n	800138a <HAL_TIM_ConfigClockSource+0xca>
 8001320:	d819      	bhi.n	8001356 <HAL_TIM_ConfigClockSource+0x96>
 8001322:	2b50      	cmp	r3, #80	; 0x50
 8001324:	d1e8      	bne.n	80012f8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001326:	684a      	ldr	r2, [r1, #4]
 8001328:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800132a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800132c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800132e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001332:	f025 0501 	bic.w	r5, r5, #1
 8001336:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001338:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800133a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800133c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001340:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001344:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001346:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001348:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800134a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800134e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001352:	6083      	str	r3, [r0, #8]
 8001354:	e7d0      	b.n	80012f8 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001356:	2b70      	cmp	r3, #112	; 0x70
 8001358:	d00c      	beq.n	8001374 <HAL_TIM_ConfigClockSource+0xb4>
 800135a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800135e:	d1cb      	bne.n	80012f8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001360:	68cb      	ldr	r3, [r1, #12]
 8001362:	684a      	ldr	r2, [r1, #4]
 8001364:	6889      	ldr	r1, [r1, #8]
 8001366:	f7ff ffa1 	bl	80012ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800136a:	6822      	ldr	r2, [r4, #0]
 800136c:	6893      	ldr	r3, [r2, #8]
 800136e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001372:	e008      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001374:	68cb      	ldr	r3, [r1, #12]
 8001376:	684a      	ldr	r2, [r1, #4]
 8001378:	6889      	ldr	r1, [r1, #8]
 800137a:	f7ff ff97 	bl	80012ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800137e:	6822      	ldr	r2, [r4, #0]
 8001380:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001382:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001386:	6093      	str	r3, [r2, #8]
      break;
 8001388:	e7b6      	b.n	80012f8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800138a:	684d      	ldr	r5, [r1, #4]
 800138c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800138e:	6a01      	ldr	r1, [r0, #32]
 8001390:	f021 0110 	bic.w	r1, r1, #16
 8001394:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001396:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001398:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800139a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800139e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80013a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80013a6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80013aa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80013ac:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80013ae:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80013b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013b4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80013b8:	e7cb      	b.n	8001352 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013ba:	684a      	ldr	r2, [r1, #4]
 80013bc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013be:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013c0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013c2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013c6:	f025 0501 	bic.w	r5, r5, #1
 80013ca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013cc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80013ce:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013d4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013d8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80013da:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80013dc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80013de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013e2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80013e6:	e7b4      	b.n	8001352 <HAL_TIM_ConfigClockSource+0x92>

080013e8 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 80013e8:	6800      	ldr	r0, [r0, #0]
{
 80013ea:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 80013ec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80013ee:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 80013f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80013f4:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80013f6:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80013f8:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80013fc:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 80013fe:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8001400:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8001402:	d01e      	beq.n	8001442 <TIM_SlaveTimer_SetConfig+0x5a>
 8001404:	d803      	bhi.n	800140e <TIM_SlaveTimer_SetConfig+0x26>
 8001406:	2a40      	cmp	r2, #64	; 0x40
 8001408:	d00b      	beq.n	8001422 <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 800140a:	2000      	movs	r0, #0
 800140c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800140e:	2a60      	cmp	r2, #96	; 0x60
 8001410:	d027      	beq.n	8001462 <TIM_SlaveTimer_SetConfig+0x7a>
 8001412:	2a70      	cmp	r2, #112	; 0x70
 8001414:	d1f9      	bne.n	800140a <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 8001416:	690b      	ldr	r3, [r1, #16]
 8001418:	688a      	ldr	r2, [r1, #8]
 800141a:	68c9      	ldr	r1, [r1, #12]
 800141c:	f7ff ff46 	bl	80012ac <TIM_ETR_SetConfig>
 8001420:	e7f3      	b.n	800140a <TIM_SlaveTimer_SetConfig+0x22>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001422:	2c05      	cmp	r4, #5
 8001424:	d030      	beq.n	8001488 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 8001426:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001428:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800142a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001432:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001434:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001438:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800143c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800143e:	6202      	str	r2, [r0, #32]
 8001440:	e7e3      	b.n	800140a <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001442:	688a      	ldr	r2, [r1, #8]
 8001444:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8001446:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001448:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800144a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800144e:	f024 0401 	bic.w	r4, r4, #1
 8001452:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001454:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001456:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800145c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001460:	e7ec      	b.n	800143c <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001462:	688c      	ldr	r4, [r1, #8]
 8001464:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001466:	6a01      	ldr	r1, [r0, #32]
 8001468:	f021 0110 	bic.w	r1, r1, #16
 800146c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800146e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001470:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001472:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800147a:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800147e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001482:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001484:	6203      	str	r3, [r0, #32]
 8001486:	e7c0      	b.n	800140a <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 8001488:	2001      	movs	r0, #1
}
 800148a:	bd38      	pop	{r3, r4, r5, pc}

0800148c <HAL_TIM_SlaveConfigSynchro>:
{
 800148c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800148e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001492:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001494:	2b01      	cmp	r3, #1
 8001496:	f04f 0302 	mov.w	r3, #2
 800149a:	d01c      	beq.n	80014d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
 800149c:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800149e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80014a2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80014a6:	f7ff ff9f 	bl	80013e8 <TIM_SlaveTimer_SetConfig>
 80014aa:	b130      	cbz	r0, 80014ba <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 80014ac:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80014ae:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80014b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80014b6:	4628      	mov	r0, r5
 80014b8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014c2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014ca:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80014cc:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80014d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80014d4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80014d6:	4618      	mov	r0, r3
}
 80014d8:	bd38      	pop	{r3, r4, r5, pc}

080014da <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80014da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80014de:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f04f 0302 	mov.w	r3, #2
 80014e6:	d014      	beq.n	8001512 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80014e8:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80014ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80014ee:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80014f0:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014f2:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014f4:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80014f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80014fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014fe:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001500:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001502:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001504:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001506:	2301      	movs	r3, #1
 8001508:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800150c:	2300      	movs	r3, #0
 800150e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001512:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001514:	bd30      	pop	{r4, r5, pc}

08001516 <HAL_TIMEx_CommutCallback>:
 8001516:	4770      	bx	lr

08001518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001518:	4770      	bx	lr

0800151a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800151a:	6803      	ldr	r3, [r0, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001522:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800152c:	2320      	movs	r3, #32
 800152e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001532:	4770      	bx	lr

08001534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001534:	b538      	push	{r3, r4, r5, lr}
 8001536:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001538:	6803      	ldr	r3, [r0, #0]
 800153a:	68c1      	ldr	r1, [r0, #12]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	2419      	movs	r4, #25
 8001540:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001544:	430a      	orrs	r2, r1
 8001546:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001548:	6882      	ldr	r2, [r0, #8]
 800154a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800154c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800154e:	4302      	orrs	r2, r0
 8001550:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001552:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001556:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800155a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800155c:	430a      	orrs	r2, r1
 800155e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	69a9      	ldr	r1, [r5, #24]
 8001564:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001568:	430a      	orrs	r2, r1
 800156a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <UART_SetConfig+0x70>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d114      	bne.n	800159c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001572:	f7ff faaf 	bl	8000ad4 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001576:	4360      	muls	r0, r4
 8001578:	686c      	ldr	r4, [r5, #4]
 800157a:	2264      	movs	r2, #100	; 0x64
 800157c:	00a4      	lsls	r4, r4, #2
 800157e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001582:	fbb0 f4f2 	udiv	r4, r0, r2
 8001586:	fb02 0314 	mls	r3, r2, r4, r0
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	3332      	adds	r3, #50	; 0x32
 800158e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001592:	6829      	ldr	r1, [r5, #0]
 8001594:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001598:	608b      	str	r3, [r1, #8]
 800159a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800159c:	f7ff fa8a 	bl	8000ab4 <HAL_RCC_GetPCLK1Freq>
 80015a0:	e7e9      	b.n	8001576 <UART_SetConfig+0x42>
 80015a2:	bf00      	nop
 80015a4:	40013800 	.word	0x40013800

080015a8 <HAL_UART_Init>:
{
 80015a8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80015aa:	4604      	mov	r4, r0
 80015ac:	b340      	cbz	r0, 8001600 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80015ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015b6:	b91b      	cbnz	r3, 80015c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80015b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80015bc:	f000 fc6c 	bl	8001e98 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80015c0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80015c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80015c8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80015ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80015cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015d2:	f7ff ffaf 	bl	8001534 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015d8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015e8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015f0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80015f2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80015f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80015fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80015fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001600:	2001      	movs	r0, #1
}
 8001602:	bd10      	pop	{r4, pc}

08001604 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001604:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001608:	2b20      	cmp	r3, #32
 800160a:	d120      	bne.n	800164e <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800160c:	b1e9      	cbz	r1, 800164a <HAL_UART_Receive_IT+0x46>
 800160e:	b1e2      	cbz	r2, 800164a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001610:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001614:	2b01      	cmp	r3, #1
 8001616:	d01a      	beq.n	800164e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001618:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800161a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800161c:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800161e:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001620:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001622:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001626:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001628:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800162a:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800162c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001630:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001634:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001636:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8001638:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800163a:	f041 0101 	orr.w	r1, r1, #1
 800163e:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001640:	68d1      	ldr	r1, [r2, #12]
 8001642:	f041 0120 	orr.w	r1, r1, #32
 8001646:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001648:	4770      	bx	lr
      return HAL_ERROR;
 800164a:	2001      	movs	r0, #1
 800164c:	4770      	bx	lr
    return HAL_BUSY;
 800164e:	2002      	movs	r0, #2
}
 8001650:	4770      	bx	lr

08001652 <HAL_UART_TxCpltCallback>:
 8001652:	4770      	bx	lr

08001654 <HAL_UART_RxCpltCallback>:
 8001654:	4770      	bx	lr

08001656 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001656:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800165a:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800165c:	2b22      	cmp	r3, #34	; 0x22
 800165e:	d136      	bne.n	80016ce <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001660:	6883      	ldr	r3, [r0, #8]
 8001662:	6901      	ldr	r1, [r0, #16]
 8001664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001668:	6802      	ldr	r2, [r0, #0]
 800166a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800166c:	d123      	bne.n	80016b6 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800166e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001670:	b9e9      	cbnz	r1, 80016ae <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001676:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800167a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800167c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800167e:	3c01      	subs	r4, #1
 8001680:	b2a4      	uxth	r4, r4
 8001682:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001684:	b98c      	cbnz	r4, 80016aa <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001686:	6803      	ldr	r3, [r0, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	f022 0220 	bic.w	r2, r2, #32
 800168e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001696:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	f022 0201 	bic.w	r2, r2, #1
 800169e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80016a0:	2320      	movs	r3, #32
 80016a2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80016a6:	f7ff ffd5 	bl	8001654 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80016aa:	2000      	movs	r0, #0
}
 80016ac:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f823 2b01 	strh.w	r2, [r3], #1
 80016b4:	e7e1      	b.n	800167a <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80016b6:	b921      	cbnz	r1, 80016c2 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016b8:	1c59      	adds	r1, r3, #1
 80016ba:	6852      	ldr	r2, [r2, #4]
 80016bc:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	e7dc      	b.n	800167c <UART_Receive_IT+0x26>
 80016c2:	6852      	ldr	r2, [r2, #4]
 80016c4:	1c59      	adds	r1, r3, #1
 80016c6:	6281      	str	r1, [r0, #40]	; 0x28
 80016c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016cc:	e7f7      	b.n	80016be <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80016ce:	2002      	movs	r0, #2
 80016d0:	bd10      	pop	{r4, pc}

080016d2 <HAL_UART_ErrorCallback>:
 80016d2:	4770      	bx	lr

080016d4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016d4:	6803      	ldr	r3, [r0, #0]
{
 80016d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016d8:	681a      	ldr	r2, [r3, #0]
{
 80016da:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80016dc:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016de:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016e0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80016e2:	d107      	bne.n	80016f4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016e4:	0696      	lsls	r6, r2, #26
 80016e6:	d55a      	bpl.n	800179e <HAL_UART_IRQHandler+0xca>
 80016e8:	068d      	lsls	r5, r1, #26
 80016ea:	d558      	bpl.n	800179e <HAL_UART_IRQHandler+0xca>
}
 80016ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80016f0:	f7ff bfb1 	b.w	8001656 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80016f4:	f015 0501 	ands.w	r5, r5, #1
 80016f8:	d102      	bne.n	8001700 <HAL_UART_IRQHandler+0x2c>
 80016fa:	f411 7f90 	tst.w	r1, #288	; 0x120
 80016fe:	d04e      	beq.n	800179e <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001700:	07d3      	lsls	r3, r2, #31
 8001702:	d505      	bpl.n	8001710 <HAL_UART_IRQHandler+0x3c>
 8001704:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001706:	bf42      	ittt	mi
 8001708:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800170a:	f043 0301 	orrmi.w	r3, r3, #1
 800170e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001710:	0750      	lsls	r0, r2, #29
 8001712:	d504      	bpl.n	800171e <HAL_UART_IRQHandler+0x4a>
 8001714:	b11d      	cbz	r5, 800171e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001716:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800171e:	0793      	lsls	r3, r2, #30
 8001720:	d504      	bpl.n	800172c <HAL_UART_IRQHandler+0x58>
 8001722:	b11d      	cbz	r5, 800172c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800172c:	0716      	lsls	r6, r2, #28
 800172e:	d504      	bpl.n	800173a <HAL_UART_IRQHandler+0x66>
 8001730:	b11d      	cbz	r5, 800173a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001732:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800173a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d066      	beq.n	800180e <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001740:	0695      	lsls	r5, r2, #26
 8001742:	d504      	bpl.n	800174e <HAL_UART_IRQHandler+0x7a>
 8001744:	0688      	lsls	r0, r1, #26
 8001746:	d502      	bpl.n	800174e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff ff84 	bl	8001656 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800174e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001750:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001752:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001754:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001756:	0711      	lsls	r1, r2, #28
 8001758:	d402      	bmi.n	8001760 <HAL_UART_IRQHandler+0x8c>
 800175a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800175e:	d01a      	beq.n	8001796 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001760:	f7ff fedb 	bl	800151a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	0652      	lsls	r2, r2, #25
 800176a:	d510      	bpl.n	800178e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800176c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800176e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001774:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001776:	b150      	cbz	r0, 800178e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_UART_IRQHandler+0x13c>)
 800177a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800177c:	f7fe fdec 	bl	8000358 <HAL_DMA_Abort_IT>
 8001780:	2800      	cmp	r0, #0
 8001782:	d044      	beq.n	800180e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001784:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800178a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800178c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff ff9f 	bl	80016d2 <HAL_UART_ErrorCallback>
 8001794:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001796:	f7ff ff9c 	bl	80016d2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800179c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800179e:	0616      	lsls	r6, r2, #24
 80017a0:	d527      	bpl.n	80017f2 <HAL_UART_IRQHandler+0x11e>
 80017a2:	060d      	lsls	r5, r1, #24
 80017a4:	d525      	bpl.n	80017f2 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80017a6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80017aa:	2a21      	cmp	r2, #33	; 0x21
 80017ac:	d12f      	bne.n	800180e <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017ae:	68a2      	ldr	r2, [r4, #8]
 80017b0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80017b4:	6a22      	ldr	r2, [r4, #32]
 80017b6:	d117      	bne.n	80017e8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80017b8:	8811      	ldrh	r1, [r2, #0]
 80017ba:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80017be:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80017c0:	6921      	ldr	r1, [r4, #16]
 80017c2:	b979      	cbnz	r1, 80017e4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80017c4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80017c6:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80017c8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80017ca:	3a01      	subs	r2, #1
 80017cc:	b292      	uxth	r2, r2
 80017ce:	84e2      	strh	r2, [r4, #38]	; 0x26
 80017d0:	b9ea      	cbnz	r2, 800180e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80017e4:	3201      	adds	r2, #1
 80017e6:	e7ee      	b.n	80017c6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80017e8:	1c51      	adds	r1, r2, #1
 80017ea:	6221      	str	r1, [r4, #32]
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	e7ea      	b.n	80017c8 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80017f2:	0650      	lsls	r0, r2, #25
 80017f4:	d50b      	bpl.n	800180e <HAL_UART_IRQHandler+0x13a>
 80017f6:	064a      	lsls	r2, r1, #25
 80017f8:	d509      	bpl.n	800180e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80017fa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80017fc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80017fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001802:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001804:	2320      	movs	r3, #32
 8001806:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800180a:	f7ff ff22 	bl	8001652 <HAL_UART_TxCpltCallback>
 800180e:	bd70      	pop	{r4, r5, r6, pc}
 8001810:	08001815 	.word	0x08001815

08001814 <UART_DMAAbortOnError>:
{
 8001814:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001816:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001818:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800181a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800181c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800181e:	f7ff ff58 	bl	80016d2 <HAL_UART_ErrorCallback>
 8001822:	bd08      	pop	{r3, pc}

08001824 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001824:	b570      	push	{r4, r5, r6, lr}
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001826:	4605      	mov	r5, r0
 8001828:	2800      	cmp	r0, #0
 800182a:	d062      	beq.n	80018f2 <HAL_USART_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800182c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001830:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001834:	b91b      	cbnz	r3, 800183e <HAL_USART_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8001836:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800183a:	f000 fb71 	bl	8001f20 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800183e:	2302      	movs	r3, #2
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8001840:	682a      	ldr	r2, [r5, #0]
  husart->State = HAL_USART_STATE_BUSY;
 8001842:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8001846:	68d3      	ldr	r3, [r2, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001848:	69e8      	ldr	r0, [r5, #28]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800184a:	f023 030c 	bic.w	r3, r3, #12
 800184e:	60d3      	str	r3, [r2, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001850:	69ab      	ldr	r3, [r5, #24]
  tmpreg = husart->Instance->CR2;
 8001852:	6911      	ldr	r1, [r2, #16]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001854:	4303      	orrs	r3, r0
 8001856:	6a28      	ldr	r0, [r5, #32]
 8001858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800185c:	4303      	orrs	r3, r0
 800185e:	68e8      	ldr	r0, [r5, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8001860:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001864:	4303      	orrs	r3, r0
 8001866:	430b      	orrs	r3, r1
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8001868:	6113      	str	r3, [r2, #16]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 800186a:	6928      	ldr	r0, [r5, #16]
 800186c:	68ab      	ldr	r3, [r5, #8]
  tmpreg = husart->Instance->CR1;
 800186e:	68d1      	ldr	r1, [r2, #12]
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8001870:	4303      	orrs	r3, r0
 8001872:	6968      	ldr	r0, [r5, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8001874:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001878:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 800187c:	4303      	orrs	r3, r0
 800187e:	430b      	orrs	r3, r1

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8001880:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8001882:	6953      	ldr	r3, [r2, #20]
 8001884:	2419      	movs	r4, #25
 8001886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800188a:	6153      	str	r3, [r2, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_USART_Init+0xd4>)
 800188e:	429a      	cmp	r2, r3
 8001890:	d12c      	bne.n	80018ec <HAL_USART_Init+0xc8>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001892:	f7ff f91f 	bl	8000ad4 <HAL_RCC_GetPCLK2Freq>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001896:	4360      	muls	r0, r4
 8001898:	686c      	ldr	r4, [r5, #4]
 800189a:	682a      	ldr	r2, [r5, #0]
 800189c:	00a4      	lsls	r4, r4, #2
 800189e:	fbb0 f0f4 	udiv	r0, r0, r4
 80018a2:	2464      	movs	r4, #100	; 0x64
 80018a4:	fbb0 f6f4 	udiv	r6, r0, r4
 80018a8:	fb04 0316 	mls	r3, r4, r6, r0
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	3332      	adds	r3, #50	; 0x32
 80018b0:	fbb3 f3f4 	udiv	r3, r3, r4
 80018b4:	f003 010f 	and.w	r1, r3, #15
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80018be:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80018c2:	440b      	add	r3, r1
 80018c4:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80018c6:	682b      	ldr	r3, [r5, #0]
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80018c8:	2000      	movs	r0, #0
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018d8:	615a      	str	r2, [r3, #20]
  __HAL_USART_ENABLE(husart);
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018e0:	60da      	str	r2, [r3, #12]
  husart->State = HAL_USART_STATE_READY;
 80018e2:	2301      	movs	r3, #1
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80018e4:	6428      	str	r0, [r5, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80018e6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80018ec:	f7ff f8e2 	bl	8000ab4 <HAL_RCC_GetPCLK1Freq>
 80018f0:	e7d1      	b.n	8001896 <HAL_USART_Init+0x72>
    return HAL_ERROR;
 80018f2:	2001      	movs	r0, #1
}
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
 80018f6:	bf00      	nop
 80018f8:	40013800 	.word	0x40013800

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b500      	push	{lr}
 80018fe:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001900:	2228      	movs	r2, #40	; 0x28
 8001902:	2100      	movs	r1, #0
 8001904:	a806      	add	r0, sp, #24
 8001906:	f000 fc2f 	bl	8002168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190a:	2214      	movs	r2, #20
 800190c:	2100      	movs	r1, #0
 800190e:	a801      	add	r0, sp, #4
 8001910:	f000 fc2a 	bl	8002168 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001914:	2302      	movs	r3, #2
 8001916:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001918:	2301      	movs	r3, #1
 800191a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001920:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001922:	f7fe fe4f 	bl	80005c4 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001926:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001928:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800192a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800192e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001930:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001932:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001934:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001936:	f7ff f81f 	bl	8000978 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800193a:	b011      	add	sp, #68	; 0x44
 800193c:	f85d fb04 	ldr.w	pc, [sp], #4

08001940 <PackHTMData>:
#define SetBit(A,k)     ( A[(k)/8] |= (1 << ((k)%8)) )
#define ClearBit(A,k)   ( A[(k)/8] &= ~(1 << ((k)%8)) )
#define TestBit(A,k)    ( A[(k)/8] & (1 << ((k)%8)) )


uint16_t PackHTMData(uint8_t *data_in, uint8_t *data_out, uint16_t len){
 8001940:	4684      	mov	ip, r0

	// prepare the out buffer, which is 20% bigger due to start and stop bits :-
	uint16_t out_len = len + len / 5;
 8001942:	2005      	movs	r0, #5
 8001944:	fbb2 f0f0 	udiv	r0, r2, r0
uint16_t PackHTMData(uint8_t *data_in, uint8_t *data_out, uint16_t len){
 8001948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t bit_count=0;
	uint8_t mask;


	for(int i =0 ; i < out_len; i++){
 800194c:	460b      	mov	r3, r1
		data_out[i]=0xff;
 800194e:	25ff      	movs	r5, #255	; 0xff
	uint16_t out_len = len + len / 5;
 8001950:	4410      	add	r0, r2
 8001952:	b280      	uxth	r0, r0
	for(int i =0 ; i < out_len; i++){
 8001954:	1a5c      	subs	r4, r3, r1
 8001956:	42a0      	cmp	r0, r4
 8001958:	dc07      	bgt.n	800196a <PackHTMData+0x2a>
 800195a:	2600      	movs	r6, #0
	}


	 for(int i =0 ; i<len; i++){
	         ClearBit(data_out, bit_count);
 800195c:	f04f 0e01 	mov.w	lr, #1
 8001960:	4633      	mov	r3, r6
	 for(int i =0 ; i<len; i++){
 8001962:	4296      	cmp	r6, r2
 8001964:	db04      	blt.n	8001970 <PackHTMData+0x30>
	         SetBit(data_out, bit_count);
	         bit_count++;
	    }

	return out_len;
}
 8001966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		data_out[i]=0xff;
 800196a:	f803 5b01 	strb.w	r5, [r3], #1
 800196e:	e7f1      	b.n	8001954 <PackHTMData+0x14>
	         ClearBit(data_out, bit_count);
 8001970:	08dc      	lsrs	r4, r3, #3
 8001972:	f003 0507 	and.w	r5, r3, #7
 8001976:	fa0e f705 	lsl.w	r7, lr, r5
 800197a:	5d0d      	ldrb	r5, [r1, r4]
 800197c:	f103 080a 	add.w	r8, r3, #10
 8001980:	ea25 0507 	bic.w	r5, r5, r7
	         mask = 1;
 8001984:	2701      	movs	r7, #1
	         ClearBit(data_out, bit_count);
 8001986:	550d      	strb	r5, [r1, r4]
 8001988:	1c9d      	adds	r5, r3, #2
 800198a:	b2ad      	uxth	r5, r5
 800198c:	fa1f f888 	uxth.w	r8, r8
	             if(mask & data_in[i]){
 8001990:	f81c 9006 	ldrb.w	r9, [ip, r6]
 8001994:	1e6c      	subs	r4, r5, #1
 8001996:	b2a4      	uxth	r4, r4
 8001998:	ea17 0f09 	tst.w	r7, r9
 800199c:	ea4f 09d4 	mov.w	r9, r4, lsr #3
	                SetBit(data_out, bit_count);
 80019a0:	fa1f f989 	uxth.w	r9, r9
 80019a4:	f811 a009 	ldrb.w	sl, [r1, r9]
 80019a8:	f004 0407 	and.w	r4, r4, #7
 80019ac:	f105 0501 	add.w	r5, r5, #1
 80019b0:	fa0e f404 	lsl.w	r4, lr, r4
 80019b4:	b2ad      	uxth	r5, r5
 80019b6:	bf14      	ite	ne
 80019b8:	ea44 040a 	orrne.w	r4, r4, sl
	                ClearBit(data_out, bit_count);
 80019bc:	ea2a 0404 	biceq.w	r4, sl, r4
	             mask<<=1;
 80019c0:	007f      	lsls	r7, r7, #1
	         for(int bit =0; bit < 8; bit++){
 80019c2:	45a8      	cmp	r8, r5
	                ClearBit(data_out, bit_count);
 80019c4:	f801 4009 	strb.w	r4, [r1, r9]
	             mask<<=1;
 80019c8:	b2ff      	uxtb	r7, r7
	         for(int bit =0; bit < 8; bit++){
 80019ca:	d1e1      	bne.n	8001990 <PackHTMData+0x50>
 80019cc:	3309      	adds	r3, #9
 80019ce:	b29b      	uxth	r3, r3
	         SetBit(data_out, bit_count);
 80019d0:	08dc      	lsrs	r4, r3, #3
 80019d2:	5d0d      	ldrb	r5, [r1, r4]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	fa0e f303 	lsl.w	r3, lr, r3
 80019dc:	432b      	orrs	r3, r5
 80019de:	550b      	strb	r3, [r1, r4]
	 for(int i =0 ; i<len; i++){
 80019e0:	3601      	adds	r6, #1
 80019e2:	4643      	mov	r3, r8
 80019e4:	e7bd      	b.n	8001962 <PackHTMData+0x22>
	...

080019e8 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f04f 0910 	mov.w	r9, #16
{
 80019ec:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80019f0:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 80019f2:	f7fe fbab 	bl	800014c <HAL_Init>
  SystemClock_Config();
 80019f6:	f7ff ff81 	bl	80018fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	464a      	mov	r2, r9
 80019fc:	2100      	movs	r1, #0
 80019fe:	a811      	add	r0, sp, #68	; 0x44
 8001a00:	f000 fbb2 	bl	8002168 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	4b96      	ldr	r3, [pc, #600]	; (8001c60 <main+0x278>)
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001a0c:	4895      	ldr	r0, [pc, #596]	; (8001c64 <main+0x27c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	ea42 0209 	orr.w	r2, r2, r9
 8001a12:	619a      	str	r2, [r3, #24]
 8001a14:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a18:	ea02 0209 	and.w	r2, r2, r9
 8001a1c:	9203      	str	r2, [sp, #12]
 8001a1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a24:	f042 0204 	orr.w	r2, r2, #4
 8001a28:	619a      	str	r2, [r3, #24]
 8001a2a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	f002 0204 	and.w	r2, r2, #4
 8001a34:	9204      	str	r2, [sp, #16]
 8001a36:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	699a      	ldr	r2, [r3, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a3a:	f04f 0a0c 	mov.w	sl, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	f042 0208 	orr.w	r2, r2, #8
 8001a42:	619a      	str	r2, [r3, #24]
 8001a44:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	9305      	str	r3, [sp, #20]
 8001a4e:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001a50:	f7fe fdac 	bl	80005ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, s_Pin|UART1_SYNC_Pin, GPIO_PIN_RESET);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2121      	movs	r1, #33	; 0x21
 8001a58:	4883      	ldr	r0, [pc, #524]	; (8001c68 <main+0x280>)
 8001a5a:	f7fe fda7 	bl	80005ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|HTM_SYNC_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001a64:	4881      	ldr	r0, [pc, #516]	; (8001c6c <main+0x284>)
 8001a66:	f7fe fda1 	bl	80005ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	a911      	add	r1, sp, #68	; 0x44
 8001a70:	487c      	ldr	r0, [pc, #496]	; (8001c64 <main+0x27c>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001a72:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f7fe fcb4 	bl	80003e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = s_Pin|UART1_SYNC_Pin;
 8001a80:	2321      	movs	r3, #33	; 0x21
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	a911      	add	r1, sp, #68	; 0x44
 8001a84:	4878      	ldr	r0, [pc, #480]	; (8001c68 <main+0x280>)
  GPIO_InitStruct.Pin = s_Pin|UART1_SYNC_Pin;
 8001a86:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f7fe fcaa 	bl	80003e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(z_GPIO_Port, &GPIO_InitStruct);
 8001a94:	a911      	add	r1, sp, #68	; 0x44
 8001a96:	4874      	ldr	r0, [pc, #464]	; (8001c68 <main+0x280>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = z_Pin;
 8001a9c:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(z_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f7fe fca3 	bl	80003e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RED_LED_Pin|HTM_SYNC_Pin;
 8001aa2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	a911      	add	r1, sp, #68	; 0x44
 8001aa8:	4870      	ldr	r0, [pc, #448]	; (8001c6c <main+0x284>)
  GPIO_InitStruct.Pin = RED_LED_Pin|HTM_SYNC_Pin;
 8001aaa:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f7fe fc98 	bl	80003e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = START_IN_Pin|FWD_IN_Pin|REV_IN_Pin|BRAKE_IN_Pin;
 8001ab8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	a911      	add	r1, sp, #68	; 0x44
 8001abe:	486b      	ldr	r0, [pc, #428]	; (8001c6c <main+0x284>)
  GPIO_InitStruct.Pin = START_IN_Pin|FWD_IN_Pin|REV_IN_Pin|BRAKE_IN_Pin;
 8001ac0:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac2:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f7fe fc8f 	bl	80003e8 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8001aca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001ace:	4e68      	ldr	r6, [pc, #416]	; (8001c70 <main+0x288>)
  huart1.Init.BaudRate = 115200;
 8001ad0:	4a68      	ldr	r2, [pc, #416]	; (8001c74 <main+0x28c>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad2:	4630      	mov	r0, r6
  huart1.Init.BaudRate = 115200;
 8001ad4:	e886 000c 	stmia.w	r6, {r2, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad8:	60b4      	str	r4, [r6, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ada:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001adc:	6134      	str	r4, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	61f4      	str	r4, [r6, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae2:	f8c6 a014 	str.w	sl, [r6, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae6:	f7ff fd5f 	bl	80015a8 <HAL_UART_Init>
  hcan.Instance = CAN1;
 8001aea:	4863      	ldr	r0, [pc, #396]	; (8001c78 <main+0x290>)
 8001aec:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <main+0x294>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001aee:	6084      	str	r4, [r0, #8]
  hcan.Init.Prescaler = 16;
 8001af0:	e880 0208 	stmia.w	r0, {r3, r9}
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001af4:	60c4      	str	r4, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001af6:	6104      	str	r4, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001af8:	6144      	str	r4, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001afa:	7604      	strb	r4, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001afc:	7644      	strb	r4, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001afe:	7684      	strb	r4, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001b00:	76c4      	strb	r4, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b02:	7704      	strb	r4, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b04:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b06:	f7fe fb57 	bl	80001b8 <HAL_CAN_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	464a      	mov	r2, r9
 8001b0e:	a808      	add	r0, sp, #32
 8001b10:	f000 fb2a 	bl	8002168 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b14:	4621      	mov	r1, r4
 8001b16:	2214      	movs	r2, #20
 8001b18:	a80c      	add	r0, sp, #48	; 0x30
 8001b1a:	f000 fb25 	bl	8002168 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1e:	221c      	movs	r2, #28
 8001b20:	4621      	mov	r1, r4
 8001b22:	a811      	add	r0, sp, #68	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	9406      	str	r4, [sp, #24]
 8001b26:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b28:	f000 fb1e 	bl	8002168 <memset>
  htim3.Init.Prescaler = 20000;
 8001b2c:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim3.Instance = TIM3;
 8001b30:	4d53      	ldr	r5, [pc, #332]	; (8001c80 <main+0x298>)
  htim3.Init.Prescaler = 20000;
 8001b32:	4954      	ldr	r1, [pc, #336]	; (8001c84 <main+0x29c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b34:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 20000;
 8001b36:	e885 000a 	stmia.w	r5, {r1, r3}
  htim3.Init.Period = 1000;
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 1000;
 8001b40:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b46:	f7ff facb 	bl	80010e0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b4e:	a908      	add	r1, sp, #32
 8001b50:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b52:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b54:	f7ff fbb4 	bl	80012c0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b58:	4628      	mov	r0, r5
 8001b5a:	f7ff fadb 	bl	8001114 <HAL_TIM_PWM_Init>
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001b5e:	2108      	movs	r1, #8
 8001b60:	4628      	mov	r0, r5
 8001b62:	f7ff faf1 	bl	8001148 <HAL_TIM_OnePulse_Init>
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001b66:	f04f 0b60 	mov.w	fp, #96	; 0x60
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001b6a:	2306      	movs	r3, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001b6c:	a90c      	add	r1, sp, #48	; 0x30
 8001b6e:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001b70:	930c      	str	r3, [sp, #48]	; 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001b72:	940e      	str	r4, [sp, #56]	; 0x38
  sSlaveConfig.TriggerFilter = 0;
 8001b74:	9410      	str	r4, [sp, #64]	; 0x40
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001b76:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001b7a:	f7ff fc87 	bl	800148c <HAL_TIM_SlaveConfigSynchro>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7e:	a906      	add	r1, sp, #24
 8001b80:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b86:	f7ff fca8 	bl	80014da <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 4000;
 8001b8a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8e:	4622      	mov	r2, r4
 8001b90:	a911      	add	r1, sp, #68	; 0x44
 8001b92:	4628      	mov	r0, r5
  sConfigOC.Pulse = 4000;
 8001b94:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b96:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b98:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9e:	f7ff fb23 	bl	80011e8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f000 f952 	bl	8001e4c <HAL_TIM_MspPostInit>
  husart2.Init.BaudRate = 500000;
 8001ba8:	4d37      	ldr	r5, [pc, #220]	; (8001c88 <main+0x2a0>)
  husart2.Instance = USART2;
 8001baa:	4838      	ldr	r0, [pc, #224]	; (8001c8c <main+0x2a4>)
  husart2.Init.BaudRate = 500000;
 8001bac:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <main+0x2a8>)
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001bae:	6084      	str	r4, [r0, #8]
  husart2.Init.BaudRate = 500000;
 8001bb0:	e880 0028 	stmia.w	r0, {r3, r5}
  husart2.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8001bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001bb8:	60c4      	str	r4, [r0, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001bba:	6104      	str	r4, [r0, #16]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001bbc:	6184      	str	r4, [r0, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001bbe:	61c4      	str	r4, [r0, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8001bc0:	6203      	str	r3, [r0, #32]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001bc2:	f8c0 a014 	str.w	sl, [r0, #20]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001bc6:	f7ff fe2d 	bl	8001824 <HAL_USART_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bca:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Instance = SPI1;
 8001bce:	4831      	ldr	r0, [pc, #196]	; (8001c94 <main+0x2ac>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bd0:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <main+0x2b0>)
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001bd2:	2580      	movs	r5, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bd4:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bdc:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bde:	2318      	movs	r3, #24
 8001be0:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001be2:	230a      	movs	r3, #10
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001be4:	6084      	str	r4, [r0, #8]
  hspi1.Init.CRCPolynomial = 10;
 8001be6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001be8:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bea:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001bec:	6205      	str	r5, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bee:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bf2:	6107      	str	r7, [r0, #16]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bf4:	f7fe ffe5 	bl	8000bc2 <HAL_SPI_Init>
  HAL_UART_Receive_IT(&huart1,uart1_rx_buffer,1);
 8001bf8:	4642      	mov	r2, r8
 8001bfa:	4928      	ldr	r1, [pc, #160]	; (8001c9c <main+0x2b4>)
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f7ff fd01 	bl	8001604 <HAL_UART_Receive_IT>
  uint8_t data[10]={1,2,4,8,16,32,64,128 };
 8001c02:	2304      	movs	r3, #4
 8001c04:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8001c08:	2320      	movs	r3, #32
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8001c10:	2340      	movs	r3, #64	; 0x40
  PackHTMData(data,txDat,8);
 8001c12:	4923      	ldr	r1, [pc, #140]	; (8001ca0 <main+0x2b8>)
 8001c14:	a811      	add	r0, sp, #68	; 0x44
  uint8_t data[10]={1,2,4,8,16,32,64,128 };
 8001c16:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 8001c1a:	f88d 504b 	strb.w	r5, [sp, #75]	; 0x4b
 8001c1e:	f88d 8044 	strb.w	r8, [sp, #68]	; 0x44
 8001c22:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
 8001c26:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8001c2a:	f88d 9048 	strb.w	r9, [sp, #72]	; 0x48
 8001c2e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
  PackHTMData(data,txDat,8);
 8001c32:	f7ff fe85 	bl	8001940 <PackHTMData>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin );
 8001c36:	4e0d      	ldr	r6, [pc, #52]	; (8001c6c <main+0x284>)
	  HAL_SPI_TransmitReceive(&hspi1, &txDat, &rxDat, 10, 50);
 8001c38:	4d1a      	ldr	r5, [pc, #104]	; (8001ca4 <main+0x2bc>)
 8001c3a:	4c19      	ldr	r4, [pc, #100]	; (8001ca0 <main+0x2b8>)
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin );
 8001c3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c40:	4630      	mov	r0, r6
 8001c42:	f7fe fcb8 	bl	80005b6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001c46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c4a:	f7fe faa3 	bl	8000194 <HAL_Delay>
	  HAL_SPI_TransmitReceive(&hspi1, &txDat, &rxDat, 10, 50);
 8001c4e:	2332      	movs	r3, #50	; 0x32
 8001c50:	462a      	mov	r2, r5
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	4621      	mov	r1, r4
 8001c56:	230a      	movs	r3, #10
 8001c58:	480e      	ldr	r0, [pc, #56]	; (8001c94 <main+0x2ac>)
 8001c5a:	f7fe ffed 	bl	8000c38 <HAL_SPI_TransmitReceive>
 8001c5e:	e7ed      	b.n	8001c3c <main+0x254>
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40011000 	.word	0x40011000
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	200002f8 	.word	0x200002f8
 8001c74:	40013800 	.word	0x40013800
 8001c78:	20000280 	.word	0x20000280
 8001c7c:	40006400 	.word	0x40006400
 8001c80:	200002b4 	.word	0x200002b4
 8001c84:	40000400 	.word	0x40000400
 8001c88:	0007a120 	.word	0x0007a120
 8001c8c:	2000039c 	.word	0x2000039c
 8001c90:	40004400 	.word	0x40004400
 8001c94:	20000be0 	.word	0x20000be0
 8001c98:	40013000 	.word	0x40013000
 8001c9c:	200002f4 	.word	0x200002f4
 8001ca0:	20000128 	.word	0x20000128
 8001ca4:	20000028 	.word	0x20000028

08001ca8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ca8:	6802      	ldr	r2, [r0, #0]
 8001caa:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d101      	bne.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001cb0:	f7fe ba5e 	b.w	8000170 <HAL_IncTick>
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40012c00 	.word	0x40012c00

08001cbc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_MspInit+0x3c>)
{
 8001cbe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	619a      	str	r2, [r3, #24]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	f002 0201 	and.w	r2, r2, #1
 8001cce:	9200      	str	r2, [sp, #0]
 8001cd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cd8:	61da      	str	r2, [r3, #28]
 8001cda:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cdc:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ce6:	6853      	ldr	r3, [r2, #4]
 8001ce8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	b002      	add	sp, #8
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010000 	.word	0x40010000

08001d00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4604      	mov	r4, r0
 8001d04:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d06:	2210      	movs	r2, #16
 8001d08:	2100      	movs	r1, #0
 8001d0a:	a802      	add	r0, sp, #8
 8001d0c:	f000 fa2c 	bl	8002168 <memset>
  if(hcan->Instance==CAN1)
 8001d10:	6822      	ldr	r2, [r4, #0]
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_CAN_MspInit+0x68>)
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d125      	bne.n	8001d64 <HAL_CAN_MspInit+0x64>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d18:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001d1c:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d20:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001d24:	61da      	str	r2, [r3, #28]
 8001d26:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	4810      	ldr	r0, [pc, #64]	; (8001d6c <HAL_CAN_MspInit+0x6c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d2a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001d2e:	9200      	str	r2, [sp, #0]
 8001d30:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	699a      	ldr	r2, [r3, #24]
 8001d34:	f042 0204 	orr.w	r2, r2, #4
 8001d38:	619a      	str	r2, [r3, #24]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d48:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f7fe fb4d 	bl	80003e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d58:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	a902      	add	r1, sp, #8
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <HAL_CAN_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f7fe fb42 	bl	80003e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d64:	b006      	add	sp, #24
 8001d66:	bd10      	pop	{r4, pc}
 8001d68:	40006400 	.word	0x40006400
 8001d6c:	40010800 	.word	0x40010800

08001d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d70:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d72:	2410      	movs	r4, #16
{
 8001d74:	4605      	mov	r5, r0
 8001d76:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	4622      	mov	r2, r4
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	a802      	add	r0, sp, #8
 8001d7e:	f000 f9f3 	bl	8002168 <memset>
  if(hspi->Instance==SPI1)
 8001d82:	682a      	ldr	r2, [r5, #0]
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_SPI_MspInit+0x78>)
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d12c      	bne.n	8001de4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001d8e:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d96:	619a      	str	r2, [r3, #24]
 8001d98:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	4814      	ldr	r0, [pc, #80]	; (8001dec <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d9c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001da0:	9200      	str	r2, [sp, #0]
 8001da2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	f042 0208 	orr.w	r2, r2, #8
 8001daa:	619a      	str	r2, [r3, #24]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001db6:	2328      	movs	r3, #40	; 0x28
 8001db8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f7fe fb11 	bl	80003e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	a902      	add	r1, sp, #8
 8001dca:	4808      	ldr	r0, [pc, #32]	; (8001dec <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dd0:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f7fe fb09 	bl	80003e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001dd6:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <HAL_SPI_MspInit+0x80>)
 8001dd8:	6853      	ldr	r3, [r2, #4]
 8001dda:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001de4:	b007      	add	sp, #28
 8001de6:	bd30      	pop	{r4, r5, pc}
 8001de8:	40013000 	.word	0x40013000
 8001dec:	40010c00 	.word	0x40010c00
 8001df0:	40010000 	.word	0x40010000

08001df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df4:	b510      	push	{r4, lr}
 8001df6:	4604      	mov	r4, r0
 8001df8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	a802      	add	r0, sp, #8
 8001e00:	f000 f9b2 	bl	8002168 <memset>
  if(htim_base->Instance==TIM3)
 8001e04:	6822      	ldr	r2, [r4, #0]
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_TIM_Base_MspInit+0x50>)
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d119      	bne.n	8001e40 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e0c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001e10:	69da      	ldr	r2, [r3, #28]
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e14:	f042 0202 	orr.w	r2, r2, #2
 8001e18:	61da      	str	r2, [r3, #28]
 8001e1a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	480a      	ldr	r0, [pc, #40]	; (8001e48 <HAL_TIM_Base_MspInit+0x54>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e1e:	f002 0202 	and.w	r2, r2, #2
 8001e22:	9200      	str	r2, [sp, #0]
 8001e24:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	f042 0204 	orr.w	r2, r2, #4
 8001e2c:	619a      	str	r2, [r3, #24]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f7fe fad4 	bl	80003e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e40:	b006      	add	sp, #24
 8001e42:	bd10      	pop	{r4, pc}
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40010800 	.word	0x40010800

08001e4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	4604      	mov	r4, r0
 8001e50:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e52:	2210      	movs	r2, #16
 8001e54:	2100      	movs	r1, #0
 8001e56:	a802      	add	r0, sp, #8
 8001e58:	f000 f986 	bl	8002168 <memset>
  if(htim->Instance==TIM3)
 8001e5c:	6822      	ldr	r2, [r4, #0]
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_TIM_MspPostInit+0x44>)
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d113      	bne.n	8001e8c <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001e68:	699a      	ldr	r2, [r3, #24]
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	f042 0204 	orr.w	r2, r2, #4
 8001e70:	619a      	str	r2, [r3, #24]
 8001e72:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	4807      	ldr	r0, [pc, #28]	; (8001e94 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e7e:	2340      	movs	r3, #64	; 0x40
 8001e80:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f7fe faae 	bl	80003e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e8c:	b006      	add	sp, #24
 8001e8e:	bd10      	pop	{r4, pc}
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40010800 	.word	0x40010800

08001e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	a802      	add	r0, sp, #8
 8001ea4:	f000 f960 	bl	8002168 <memset>
  if(huart->Instance==USART1)
 8001ea8:	6822      	ldr	r2, [r4, #0]
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_UART_MspInit+0x80>)
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d130      	bne.n	8001f12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001eb4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ebc:	619a      	str	r2, [r3, #24]
 8001ebe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	4816      	ldr	r0, [pc, #88]	; (8001f1c <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ec6:	9200      	str	r2, [sp, #0]
 8001ec8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ecc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	f042 0204 	orr.w	r2, r2, #4
 8001ed2:	619a      	str	r2, [r3, #24]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f7fe fa7c 	bl	80003e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	a902      	add	r1, sp, #8
 8001ef6:	4809      	ldr	r0, [pc, #36]	; (8001f1c <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ef8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f7fe fa73 	bl	80003e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f02:	2025      	movs	r0, #37	; 0x25
 8001f04:	4622      	mov	r2, r4
 8001f06:	4621      	mov	r1, r4
 8001f08:	f7fe f9e4 	bl	80002d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f0c:	2025      	movs	r0, #37	; 0x25
 8001f0e:	f7fe fa15 	bl	800033c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f12:	b006      	add	sp, #24
 8001f14:	bd10      	pop	{r4, pc}
 8001f16:	bf00      	nop
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40010800 	.word	0x40010800

08001f20 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001f20:	b510      	push	{r4, lr}
 8001f22:	4604      	mov	r4, r0
 8001f24:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	2210      	movs	r2, #16
 8001f28:	2100      	movs	r1, #0
 8001f2a:	a802      	add	r0, sp, #8
 8001f2c:	f000 f91c 	bl	8002168 <memset>
  if(husart->Instance==USART2)
 8001f30:	6822      	ldr	r2, [r4, #0]
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_USART_MspInit+0x7c>)
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d12f      	bne.n	8001f98 <HAL_USART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f38:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001f3c:	69da      	ldr	r2, [r3, #28]
    PA4     ------> USART2_CK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f44:	61da      	str	r2, [r3, #28]
 8001f46:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	4815      	ldr	r0, [pc, #84]	; (8001fa0 <HAL_USART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f4e:	9200      	str	r2, [sp, #0]
 8001f50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f54:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	f042 0204 	orr.w	r2, r2, #4
 8001f5a:	619a      	str	r2, [r3, #24]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001f66:	2314      	movs	r3, #20
 8001f68:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f7fe fa39 	bl	80003e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f76:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <HAL_USART_MspInit+0x80>)
 8001f7a:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f7e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f80:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f7fe fa30 	bl	80003e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f88:	2026      	movs	r0, #38	; 0x26
 8001f8a:	4622      	mov	r2, r4
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	f7fe f9a1 	bl	80002d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f92:	2026      	movs	r0, #38	; 0x26
 8001f94:	f7fe f9d2 	bl	800033c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f98:	b006      	add	sp, #24
 8001f9a:	bd10      	pop	{r4, pc}
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	40010800 	.word	0x40010800

08001fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001fa6:	4601      	mov	r1, r0
{
 8001fa8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001faa:	2200      	movs	r2, #0
 8001fac:	2019      	movs	r0, #25
 8001fae:	f7fe f991 	bl	80002d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001fb2:	2019      	movs	r0, #25
 8001fb4:	f7fe f9c2 	bl	800033c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fba:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fbc:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fbe:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fc4:	619a      	str	r2, [r3, #24]
 8001fc6:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fc8:	4c11      	ldr	r4, [pc, #68]	; (8002010 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fd2:	f7fe fd8f 	bl	8000af4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fd6:	f7fe fd7d 	bl	8000ad4 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_InitTick+0x70>)
 8001fdc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001fde:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001fe2:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_InitTick+0x74>)
 8001fe6:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001fea:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001fec:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fee:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ff0:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001ff2:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ff6:	f7ff f873 	bl	80010e0 <HAL_TIM_Base_Init>
 8001ffa:	b920      	cbnz	r0, 8002006 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7fe ff7f 	bl	8000f00 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002002:	b008      	add	sp, #32
 8002004:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002006:	2001      	movs	r0, #1
 8002008:	e7fb      	b.n	8002002 <HAL_InitTick+0x5e>
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	20000df0 	.word	0x20000df0
 8002014:	40012c00 	.word	0x40012c00
 8002018:	000f4240 	.word	0x000f4240

0800201c <NMI_Handler>:
 800201c:	4770      	bx	lr

0800201e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201e:	e7fe      	b.n	800201e <HardFault_Handler>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	e7fe      	b.n	8002020 <MemManage_Handler>

08002022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002022:	e7fe      	b.n	8002022 <BusFault_Handler>

08002024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002024:	e7fe      	b.n	8002024 <UsageFault_Handler>

08002026 <SVC_Handler>:
 8002026:	4770      	bx	lr

08002028 <DebugMon_Handler>:
 8002028:	4770      	bx	lr

0800202a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202a:	4770      	bx	lr

0800202c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800202c:	4801      	ldr	r0, [pc, #4]	; (8002034 <TIM1_UP_IRQHandler+0x8>)
 800202e:	f7fe bf7d 	b.w	8000f2c <HAL_TIM_IRQHandler>
 8002032:	bf00      	nop
 8002034:	20000df0 	.word	0x20000df0

08002038 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002038:	4801      	ldr	r0, [pc, #4]	; (8002040 <USART1_IRQHandler+0x8>)
 800203a:	f7ff bb4b 	b.w	80016d4 <HAL_UART_IRQHandler>
 800203e:	bf00      	nop
 8002040:	200002f8 	.word	0x200002f8

08002044 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
	static uint16_t byte_counter;

	 uint32_t isrflags = READ_REG(husart2.Instance->SR);
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <USART2_IRQHandler+0x38>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6819      	ldr	r1, [r3, #0]
	  uint32_t cr1its   = READ_REG(husart2.Instance->CR1);
 800204a:	68da      	ldr	r2, [r3, #12]
	  uint32_t cr3its   = READ_REG(husart2.Instance->CR3);

	 if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800204c:	0649      	lsls	r1, r1, #25
	  uint32_t cr3its   = READ_REG(husart2.Instance->CR3);
 800204e:	6958      	ldr	r0, [r3, #20]
	 if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002050:	d512      	bpl.n	8002078 <USART2_IRQHandler+0x34>
 8002052:	0652      	lsls	r2, r2, #25
 8002054:	d510      	bpl.n	8002078 <USART2_IRQHandler+0x34>
	    {

		husart2.Instance->DR=0xff;
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	605a      	str	r2, [r3, #4]

		byte_counter++;
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <USART2_IRQHandler+0x3c>)
 800205c:	8813      	ldrh	r3, [r2, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	b29b      	uxth	r3, r3
				if(byte_counter>10){
 8002062:	2b0a      	cmp	r3, #10
 8002064:	d801      	bhi.n	800206a <USART2_IRQHandler+0x26>
		byte_counter++;
 8002066:	8013      	strh	r3, [r2, #0]
 8002068:	4770      	bx	lr
					byte_counter = 0;
 800206a:	2300      	movs	r3, #0
					HAL_GPIO_TogglePin(HTM_SYNC_GPIO_Port, HTM_SYNC_Pin );
 800206c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <USART2_IRQHandler+0x40>)
					byte_counter = 0;
 8002072:	8013      	strh	r3, [r2, #0]
					HAL_GPIO_TogglePin(HTM_SYNC_GPIO_Port, HTM_SYNC_Pin );
 8002074:	f7fe ba9f 	b.w	80005b6 <HAL_GPIO_TogglePin>
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2000039c 	.word	0x2000039c
 8002080:	20000228 	.word	0x20000228
 8002084:	40010c00 	.word	0x40010c00

08002088 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <SystemInit+0x40>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <SystemInit+0x44>)
 8002096:	400a      	ands	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80020a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020a4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020ac:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80020b4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80020b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80020ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80020bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <SystemInit+0x48>)
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	f8ff0000 	.word	0xf8ff0000
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80020d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80020d6:	e003      	b.n	80020e0 <LoopCopyDataInit>

080020d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80020da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80020dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80020de:	3104      	adds	r1, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80020e0:	480a      	ldr	r0, [pc, #40]	; (800210c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80020e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80020e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80020e8:	d3f6      	bcc.n	80020d8 <CopyDataInit>
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020ec:	e002      	b.n	80020f4 <LoopFillZerobss>

080020ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020f0:	f842 3b04 	str.w	r3, [r2], #4

080020f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020f8:	d3f9      	bcc.n	80020ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020fa:	f7ff ffc5 	bl	8002088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fe:	f000 f80f 	bl	8002120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002102:	f7ff fc71 	bl	80019e8 <main>
  bx lr
 8002106:	4770      	bx	lr
  ldr r3, =_sidata
 8002108:	080021c0 	.word	0x080021c0
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002110:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002114:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002118:	20000e30 	.word	0x20000e30

0800211c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_2_IRQHandler>
	...

08002120 <__libc_init_array>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	2500      	movs	r5, #0
 8002124:	4e0c      	ldr	r6, [pc, #48]	; (8002158 <__libc_init_array+0x38>)
 8002126:	4c0d      	ldr	r4, [pc, #52]	; (800215c <__libc_init_array+0x3c>)
 8002128:	1ba4      	subs	r4, r4, r6
 800212a:	10a4      	asrs	r4, r4, #2
 800212c:	42a5      	cmp	r5, r4
 800212e:	d109      	bne.n	8002144 <__libc_init_array+0x24>
 8002130:	f000 f822 	bl	8002178 <_init>
 8002134:	2500      	movs	r5, #0
 8002136:	4e0a      	ldr	r6, [pc, #40]	; (8002160 <__libc_init_array+0x40>)
 8002138:	4c0a      	ldr	r4, [pc, #40]	; (8002164 <__libc_init_array+0x44>)
 800213a:	1ba4      	subs	r4, r4, r6
 800213c:	10a4      	asrs	r4, r4, #2
 800213e:	42a5      	cmp	r5, r4
 8002140:	d105      	bne.n	800214e <__libc_init_array+0x2e>
 8002142:	bd70      	pop	{r4, r5, r6, pc}
 8002144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002148:	4798      	blx	r3
 800214a:	3501      	adds	r5, #1
 800214c:	e7ee      	b.n	800212c <__libc_init_array+0xc>
 800214e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002152:	4798      	blx	r3
 8002154:	3501      	adds	r5, #1
 8002156:	e7f2      	b.n	800213e <__libc_init_array+0x1e>
 8002158:	080021b8 	.word	0x080021b8
 800215c:	080021b8 	.word	0x080021b8
 8002160:	080021b8 	.word	0x080021b8
 8002164:	080021bc 	.word	0x080021bc

08002168 <memset>:
 8002168:	4603      	mov	r3, r0
 800216a:	4402      	add	r2, r0
 800216c:	4293      	cmp	r3, r2
 800216e:	d100      	bne.n	8002172 <memset+0xa>
 8002170:	4770      	bx	lr
 8002172:	f803 1b01 	strb.w	r1, [r3], #1
 8002176:	e7f9      	b.n	800216c <memset+0x4>

08002178 <_init>:
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217a:	bf00      	nop
 800217c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217e:	bc08      	pop	{r3}
 8002180:	469e      	mov	lr, r3
 8002182:	4770      	bx	lr

08002184 <_fini>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	bf00      	nop
 8002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218a:	bc08      	pop	{r3}
 800218c:	469e      	mov	lr, r3
 800218e:	4770      	bx	lr
